Index: binutils/configure
===================================================================
--- binutils.orig/configure	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/configure	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -587,6 +587,7 @@ GCC_FOR_TARGET
 CXX_FOR_TARGET
 CC_FOR_TARGET
 READELF
+SIM
 OBJDUMP
 OBJCOPY
 WINDMC
Index: binutils/Makefile.in
===================================================================
--- binutils.orig/Makefile.in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/Makefile.in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -187,6 +187,7 @@ HOST_EXPORTS = \
 	$(BASE_EXPORTS) \
 	CC="$(CC)"; export CC; \
 	ADA_CFLAGS="$(ADA_CFLAGS)"; export ADA_CFLAGS; \
+	SIM="$(SIM)"; export SIM; \
 	CFLAGS="$(CFLAGS)"; export CFLAGS; \
 	CONFIG_SHELL="$(SHELL)"; export CONFIG_SHELL; \
 	CXX="$(CXX)"; export CXX; \
@@ -210,6 +211,8 @@ HOST_EXPORTS = \
 	AR_FOR_TARGET="$(AR_FOR_TARGET)"; export AR_FOR_TARGET; \
 	AS_FOR_TARGET="$(AS_FOR_TARGET)"; export AS_FOR_TARGET; \
 	GCC_FOR_TARGET="$(GCC_FOR_TARGET)"; export GCC_FOR_TARGET; \
+	CC_FOR_TARGET="$(CC_FOR_TARGET)"; export CC_FOR_TARGET; \
+	FLAGS_FOR_TARGET="$(FLAGS_FOR_TARGET)"; export FLAGS_FOR_TARGET; \
 	LD_FOR_TARGET="$(LD_FOR_TARGET)"; export LD_FOR_TARGET; \
 	NM_FOR_TARGET="$(NM_FOR_TARGET)"; export NM_FOR_TARGET; \
 	OBJDUMP_FOR_TARGET="$(OBJDUMP_FOR_TARGET)"; export OBJDUMP_FOR_TARGET; \
@@ -393,6 +396,7 @@ AS = @AS@
 AR = @AR@
 AR_FLAGS = rc
 CC = @CC@
+SIM = @SIM@
 CXX = @CXX@
 DLLTOOL = @DLLTOOL@
 LD = @LD@
Index: binutils/ld/Makefile.in
===================================================================
--- binutils.orig/ld/Makefile.in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/Makefile.in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -180,6 +180,7 @@ AWK = @AWK@
 CATALOGS = @CATALOGS@
 CATOBJEXT = @CATOBJEXT@
 CC = @CC@
+SIM = @SIM@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
 CPP = @CPP@
@@ -751,6 +752,7 @@ ALL_EMULATION_SOURCES = \
 	est2000.c \
 	esun3.c \
 	esun4.c \
+	esuperh.c \
 	etic30aout.c \
 	etic30coff.c \
 	etic3xcoff.c \
@@ -1799,25 +1801,6 @@ GTAGS:
 
 distclean-tags:
 	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
-site.exp: Makefile
-	@echo 'Making a new site.exp file...'
-	@echo '## these variables are automatically generated by make ##' >site.tmp
-	@echo '# Do not edit here.  If you wish to override these values' >>site.tmp
-	@echo '# edit the last section' >>site.tmp
-	@echo 'set srcdir $(srcdir)' >>site.tmp
-	@echo "set objdir `pwd`" >>site.tmp
-	@echo 'set build_alias "$(build_alias)"' >>site.tmp
-	@echo 'set build_triplet $(build_triplet)' >>site.tmp
-	@echo 'set host_alias "$(host_alias)"' >>site.tmp
-	@echo 'set host_triplet $(host_triplet)' >>site.tmp
-	@echo 'set target_alias "$(target_alias)"' >>site.tmp
-	@echo 'set target_triplet $(target_triplet)' >>site.tmp
-	@echo '## All variables above are generated by configure. Do Not Edit ##' >>site.tmp
-	@test ! -f site.exp || \
-	  sed '1,/^## All variables above are.*##/ d' site.exp >> site.tmp
-	@-rm -f site.bak
-	@test ! -f site.exp || mv site.exp site.bak
-	@mv site.tmp site.exp
 
 distclean-DEJAGNU:
 	-rm -f site.exp site.bak
@@ -3347,6 +3330,9 @@ eshlsymbian.c: $(srcdir)/emulparams/shlsymbian.sh
 eshpe.c: $(srcdir)/emulparams/shpe.sh \
   $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
 	${GENSCRIPTS} shpe "$(tdir_shl)"
+esuperh.c: $(srcdir)/emulparams/superh.sh \
+  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
+	${GENSCRIPTS} superh "$(tdir_superh)"
 esparcaout.c: $(srcdir)/emulparams/sparcaout.sh \
   $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
 	${GENSCRIPTS} sparcaout "$(tdir_sparcaout)"
@@ -3594,7 +3580,7 @@ check-DEJAGNU: site.exp
 	runtest=$(RUNTEST); \
 	if $(SHELL) -c "$$runtest --version" > /dev/null 2>&1; then \
 	  $$runtest --tool $(DEJATOOL) --srcdir $${srcroot}/testsuite \
-		CC="$(CC_FOR_TARGET)" CFLAGS="$(CFLAGS)" \
+		CC="$(CC_FOR_TARGET)" CFLAGS="$(FLAGS_FOR_TARGET)" \
 		CXX="$(CXX_FOR_TARGET)" CXXFLAGS="$(CXXFLAGS)" \
 		CC_FOR_HOST="$(CC)" CFLAGS_FOR_HOST="$(CFLAGS)" \
 		OFILES="$(OFILES)" BFDLIB="$(TESTBFDLIB)" \
@@ -3604,6 +3590,30 @@ check-DEJAGNU: site.exp
 	else echo "WARNING: could not find \`runtest'" 1>&2; :;\
 	fi
 
+site.exp: Makefile
+	@echo 'Making a new site.exp file...'
+	@test ! -f site.bak || rm -f site.bak
+	@echo '## these variables are automatically generated by make ##' > $@-t
+	@echo '# Do not edit here.  If you wish to override these values' >> $@-t
+	@echo '# edit the last section' >> $@-t
+	@echo 'set tool $(DEJATOOL)' >> $@-t
+	@echo 'set srcdir $(srcdir)' >> $@-t
+	@echo 'set objdir' `pwd` >> $@-t
+	@echo 'set host_alias $(host_alias)' >> $@-t
+	@echo 'set host_triplet $(host_triplet)' >> $@-t
+	@echo 'set target_alias $(target_alias)' >> $@-t
+	@echo 'set target_triplet $(target_triplet)' >> $@-t
+	@echo 'set build_alias $(build_alias)' >> $@-t
+	@echo 'set build_triplet $(build_triplet)' >> $@-t
+	@echo 'set target_list ${target_alias}' >> $@-t
+	@echo 'set boards_dir ${srcdir}/../../boards' >> $@-t
+	@echo 'set SIM "$(SIM)"' >> $@-t
+	@echo 'set CC_FOR_TARGET "$(CC_FOR_TARGET)"' >> $@-t
+	@echo '## All variables above are generated by configure. Do Not Edit ##' >> $@-t
+	@test ! -f site.exp || sed '1,/^## All variables above are.*##/ d' site.exp >> $@-t
+	@test ! -f site.exp || mv site.exp site.bak
+	@mv $@-t site.exp
+
 # Rules for testing by relinking ld itself.
 # A similar test is in the testsuite.  This target is for ease of use
 # when porting ld.
Index: binutils/ld/emultempl/shelf.em
===================================================================
--- binutils.orig/ld/emultempl/shelf.em	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/ld/emultempl/shelf.em	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,60 @@
+# This shell script emits a C file. -*- C -*-
+#   Copyright 2010 Free Software Foundation, Inc.
+#   Copyright 2010 STMicroelectronics.
+#
+# This file is part of the GNU Binutils.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
+# MA 02110-1301, USA.
+#
+
+# This file is sourced from elf32.em, and defines extra sh-elf
+# specific routines.
+#
+
+# Replace the standard before_parse function with our own.
+LDEMUL_BEFORE_PARSE=shelf_before_parse
+
+fragment <<EOF
+static void
+${LDEMUL_BEFORE_PARSE} (void)
+{
+  /* Call the default before_parse function.  */
+  gld${EMULATION_NAME}_before_parse();
+
+  /* Override the default link_info.[init|fini]_functions.  */
+  link_info.init_function = "__init";
+  link_info.fini_function = "__fini";
+}
+EOF
+
+# Define some shell vars to insert bits of code into the standard elf
+# parse_args and list_options functions.
+#
+PARSE_AND_LIST_PROLOGUE='
+#define OPTION_HW_WA                    (500)
+'
+
+PARSE_AND_LIST_LONGOPTS='
+	{"db-page-bug", no_argument, NULL, OPTION_HW_WA},
+'
+PARSE_AND_LIST_ARGS_CASES='
+	case OPTION_HW_WA:
+      {
+	extern int sh_hw_wa;
+	sh_hw_wa=1;
+	break;
+      }
+'
Index: binutils/ld/configure.in
===================================================================
--- binutils.orig/ld/configure.in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/configure.in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -150,6 +150,7 @@ ACX_LARGEFILE
 AC_PROG_INSTALL
 
 LT_INIT
+AC_SUBST(SIM)
 
 ALL_LINGUAS="fr sv tr es da vi zh_CN zh_TW ga fi id bg it uk"
 ZW_GNU_GETTEXT_SISTER_DIR
Index: binutils/ld/testsuite/ld-undefined/undefined.exp
===================================================================
--- binutils.orig/ld/testsuite/ld-undefined/undefined.exp	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-undefined/undefined.exp	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -129,6 +129,11 @@ setup_xfail mep-*-*
 setup_xfail mips-sgi-irix6*
 setup_xfail "sh64-*-*"
 
+if { [istarget sh*-*elf] } {
+    untested $testline
+    return
+}
+
 # The undefined test fails on 31 bit s/390 because the address of the 
 # function `this_function_is_not_defined' is stored in the literal pool of
 # the function. Therefore the line number in the error message is 8 instead
Index: binutils/ld/testsuite/ChangeLog.st40
===================================================================
--- binutils.orig/ld/testsuite/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/ld/testsuite/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,89 @@
+2013-06-05  Christian Bruel  <christian.bruel@st.com>
+ 
+ 	* ld-sh/shared-1.d: Update figures.
+
+2012-06-07  Laurent Alfonsi  <laurent.alfonsi@st.com>
+
+	* ld-sh/rrelax-{a,b,c,d}.s: New test for codex 170153.
+	* ld-sh/sh.exp: Test rrelax (mrelax+relocatable)
+
+2011-07-13  Christian Bruel  <christian.bruel@st.com>
+
+ 	INSbl31164
+	* ld-sh/defsymweak.s: New test.
+	* ld-sh/sh.exp: Test defsymweak.s.
+
+2010-07-12  Christian Bruel  <christian.bruel@st.com>
+
+	* ld-gc/gc.exp: Remove _ prefix to symbols for sh*-*linux* targets.
+	
+2008-10-07  Antony King  <antony.king@st.com>
+ 
+ 	Fix INSbl29365:
+ 	* ld-sh/shared-1.d: Update figures.
+	
+2009-05-20  Christian Bruel  <christian.bruel@st.com>
+	
+	* ld-sh/sh.exp: Fix sim check.
+	* ld-sh/start.s: Fix trapa #.
+	* ld-sh/arch/arch_expected.txt: Update
+	
+2008-05-29  Antony King  <antony.king@st.com>
+
+	* ld-gc/gc.exp: Add _ prefix to symbols for sh*-*-* targets.
+
+2007-07-06  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* ld-sh/arch/arch.exp: Use gas --help to get architecture list.
+	Use empty assembler file and --isa option to create initial .o files.
+	* ld-sh/arch/sh-dsp.s: Delete.
+	* ld-sh/arch/sh.s: Delete.
+	* ld-sh/arch/sh2.s: Delete.
+	* ld-sh/arch/sh2a-nofpu-or-sh3-nommu.s: Delete.
+	* ld-sh/arch/sh2a-nofpu-or-sh4-nommu-nofpu.s: Delete.
+	* ld-sh/arch/sh2a-nofpu.s: Delete.
+	* ld-sh/arch/sh2a-or-sh3e.s: Delete.
+	* ld-sh/arch/sh2a-or-sh4.s: Delete.
+	* ld-sh/arch/sh2a.s: Delete.
+	* ld-sh/arch/sh2e.s: Delete.
+	* ld-sh/arch/sh3-dsp.s: Delete.
+	* ld-sh/arch/sh3-nommu.s: Delete.
+	* ld-sh/arch/sh3.s: Delete.
+	* ld-sh/arch/sh3e.s: Delete.
+	* ld-sh/arch/sh4-nofpu.s: Delete.
+	* ld-sh/arch/sh4-nommu-nofpu.s: Delete.
+	* ld-sh/arch/sh4.s: Delete.
+	* ld-sh/arch/sh4a-nofpu.s: Delete.
+	* ld-sh/arch/sh4a.s: Delete.
+	* ld-sh/arch/sh4al-dsp.s: Delete.
+	* ld-sh/arch/st40-300-nofpu-or-sh2a-nofpu.s: Delete.
+	* ld-sh/arch/st40-300-nofpu-or-sh4a-nofpu.s: Delete.
+	* ld-sh/arch/st40-300-nofpu.s: Delete.
+	* ld-sh/arch/st40-300-or-sh4a.s: Delete.
+	* ld-sh/arch/st40-300.s: Delete.
+
+2007-01-18  David Cook  <david.cook@st.com>
+
+	* ld-sh/sub2l-1.d: Don't check for anything after text section.
+	* ld-sh/shared-1.d: Update figures.
+
+2006-07-05  David Cook  <david.cook@st.com>
+
+	* ld-selective/1.c (start): Add (both parts).
+	* ld-selective/2.c (start): Likewise.
+	* ld-sh/shared-1.d: Update figures.
+	* ld-sh/weak1.d: Allow other symbols between f and w0.
+
+2006-06-16  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* lib/ld-lib.exp (default_ld_link): Use global LDFLAGS.
+	(default_ld_simple_link): Likewise.
+	(default_ld_assemble): Convert linker endian flags to SH assembler
+	endian flags.
+
+2006-03-01  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* ld-sh/arch/arch.exp: Support assemblers with little endian default.
+	Find files named st* in addition to sh*.
+	(test_arch): Use global LDFLAGS.
+	* ld-sh/arch/arch_expected.txt: Regenerate for ST40-300.
Index: binutils/ld/testsuite/ld-elf/stab.d
===================================================================
--- binutils.orig/ld/testsuite/ld-elf/stab.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-elf/stab.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,14 +0,0 @@
-#source: start.s
-#as: -gstabs
-#readelf: -S --wide
-#ld:
-#notarget: "ia64-*-*" "alpha*"
-
-# Disabled on alpha because the entry point may be above 4GB but the stabs
-# value on 32 bits.
-
-#...
-  \[[0-9 ][0-9]\] \.stab +PROGBITS +0+ [0-9a-f]+ [0-9a-f]+ [0-9a-f]+ +[1-9]+ +0.*
-#...
-  \[[0-9 ][0-9]\] \.stabstr +STRTAB +0+ [0-9a-f]+ [0-9a-f]+ 00 +0 +0.*
-#...
Index: binutils/ld/testsuite/lib/ld-lib.exp
===================================================================
--- binutils.orig/ld/testsuite/lib/ld-lib.exp	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/lib/ld-lib.exp	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -2,6 +2,7 @@
 #   Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
 #    2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
 #    Free Software Foundation, Inc.
+#   Copyright (c) 2006  STMicroelectronics.
 #
 # This file is part of the GNU Binutils.
 #
@@ -184,6 +185,7 @@ proc default_ld_link { ld target objects } {
     global host_triplet
     global link_output
     global exec_output
+    global LDFLAGS
 
     set objs "$HOSTING_CRT0 $objects"
     set libs "$LIBS $HOSTING_LIBS"
@@ -194,6 +196,10 @@ proc default_ld_link { ld target objects } {
 	set flags ""
     }
 
+    if [info exists LDFLAGS] {
+	set flags "$flags $LDFLAGS"
+    }
+
     remote_file host delete $target
 
     return [run_host_cmd_yesno "$ld" "$HOSTING_EMU $flags -o $target $objs $libs"]
@@ -205,6 +211,7 @@ proc default_ld_simple_link { ld target objects }
     global host_triplet
     global gcc_ld_flag
     global exec_output
+    global LDFLAGS
 
     if [is_endian_output_format $objects] then {
 	set flags [big_or_little_endian]
@@ -332,6 +339,8 @@ proc default_ld_assemble { as in_flags source obje
     if ![info exists ASFLAGS] { set ASFLAGS "" }
 
     set flags [big_or_little_endian]
+    regsub -- {-EB} $flags {-big} flags
+    regsub -- {-EL} $flags {-little} flags
     set exec_output [run_host_cmd "$as" "$flags $in_flags $ASFLAGS -o $object $source"]
     set exec_output [prune_warnings $exec_output]
     if [string match "" $exec_output] then {
Index: binutils/ld/testsuite/ld-selective/1.c
===================================================================
--- binutils.orig/ld/testsuite/ld-selective/1.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-selective/1.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,10 +1,18 @@
-/* _start should be the only thing left after GC.  */
+/* _start should be the only thing left after GC (unless start is the
+   entrypoint).  */
 
-void _start() __asm__("_start");
+void _start() __asm__("_start"); // keep
+void start() __asm__("start"); // some toolchains use this name.
+
 void _start()
 {
 }
 
+void start ()
+{
+  _start ();
+}
+
 void dropme1()
 {
 }
Index: binutils/ld/testsuite/ld-selective/2.c
===================================================================
--- binutils.orig/ld/testsuite/ld-selective/2.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-selective/2.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,11 +1,18 @@
 /* Normally we should loose foo and keep _start and _init. 
    With -u foo, we should keep that as well.  */
 
-void _start() __asm__("_start");
+void _start() __asm__("_start"); // keep
+void start() __asm__("start"); // some toolchains use this name.
+
 void _start()
 {
 }
 
+void start ()
+{
+  _start ();
+}
+
 void __attribute__((section(".init")))
 _init()
 {
Index: binutils/ld/testsuite/ld-gc/gc.exp
===================================================================
--- binutils.orig/ld/testsuite/ld-gc/gc.exp	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-gc/gc.exp	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -94,11 +94,19 @@ proc test_gc { testname filename linker ldflags} {
     pass $testname
 }
 
-test_gc "Check --gc-section" "gcexe" $ld "--gc-sections -e main"
-test_gc "Check --gc-section/-q" "gcrexe" $ld "--gc-sections -q -e main"
-test_gc "Check --gc-section/-r/-e" "gcrel" $ld "-r --gc-sections -e main"
-test_gc "Check --gc-section/-r/-u" "gcrel" $ld "-r --gc-sections -u used_func"
+if { [istarget sh*-*elf] } {
+  set mainsym "_main"
+  set usedsym "_used_func"
+} else {
+  set mainsym "main"
+  set usedsym "used_func"
+}
 
+test_gc "Check --gc-section" "gcexe" $ld "--gc-sections -e $mainsym"
+test_gc "Check --gc-section/-q" "gcrexe" $ld "--gc-sections -q -e $mainsym"
+test_gc "Check --gc-section/-r/-e" "gcrel" $ld "-r --gc-sections -e $mainsym"
+test_gc "Check --gc-section/-r/-u" "gcrel" $ld "-r --gc-sections -u $usedsym"
+
 run_dump_test "noent"
 run_dump_test "abi-note"
 run_dump_test "start"
Index: binutils/ld/testsuite/ld-sh/start.s
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/start.s	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-sh/start.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -19,7 +19,7 @@ main_k:
 
 	.global _trap
 _trap:	
-	trapa #3
+	trapa #34
 	rts
 	nop
 
Index: binutils/ld/testsuite/ld-sh/rrelax-b.s
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/rrelax-b.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/ld/testsuite/ld-sh/rrelax-b.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,34 @@
+	.file	"b.c"
+	.text
+	.align 1
+	.align 2
+	.global	_foo
+	.type	_foo, @function
+_foo:
+	rts	
+	mov	#1,r0
+	.size	_foo, .-_foo
+	.align 1
+	.align 2
+	.global	_func_b
+	.type	_func_b, @function
+_func_b:
+	tst	r4,r4
+	bf/s	.L3
+	mov	#111,r1
+	mov	#121,r1
+.L3:
+	mov.l	.L7,r2
+.L6:
+	mov.l	.L8,r0
+	.uses .L6
+	jmp	@r0
+	mov.l	r1,@r2
+.L9:
+	.align 2
+.L7:
+	.long	_b
+.L8:
+	.long	_func_d
+	.size	_func_b, .-_func_b
+	.ident	"GCC: (STMicroelectronics Base) 4.6.3 20120330"
Index: binutils/ld/testsuite/ld-sh/rrelax-d.s
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/rrelax-d.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/ld/testsuite/ld-sh/rrelax-d.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,37 @@
+	.file	"d.c"
+	.text
+	.align 1
+	.align 2
+	.global	_bar
+	.type	_bar, @function
+_bar:
+.L2:
+	mov.l	.L3,r0
+	.uses .L2
+	jmp	@r0
+	nop
+.L4:
+	.align 2
+.L3:
+	.long	_foo
+	.size	_bar, .-_bar
+	.align 1
+	.align 2
+	.global	_func_d
+	.type	_func_d, @function
+_func_d:
+	tst	r4,r4
+	bf/s	.L6
+	mov	#111,r1
+	mov	#121,r1
+.L6:
+	mov.l	.L9,r2
+	mov	r4,r0
+	rts	
+	mov.l	r1,@r2
+.L10:
+	.align 2
+.L9:
+	.long	_d
+	.size	_func_d, .-_func_d
+	.ident	"GCC: (STMicroelectronics Base) 4.6.3 20120330"
Index: binutils/ld/testsuite/ld-sh/shared-1.d
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/shared-1.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-sh/shared-1.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -13,11 +13,11 @@
 
 Relocation section '\.rela\.text' at offset 0x[0-9a-f]+ contains 1 entries:
 .*
-0000019c +[0-9a-f]+ R_SH_RELATIVE +1a0
+0000031c +[0-9a-f]+ R_SH_RELATIVE +320
 
 Hex dump of section '\.rela\.text':
-  0x00000188 9c010000 a5000000 a0010000 .*
+  0x00000308 1c030000 a5000000 20030000 .*
 
 Hex dump of section '\.text':
 .*
-  0x00000194 09000900 09000900 a0010000 .*
+  0x00000314 09000900 09000900 20030000 .*
Index: binutils/ld/testsuite/ld-sh/defsymweak.s
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/defsymweak.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/ld/testsuite/ld-sh/defsymweak.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,29 @@
+	.file	"defsymweak.c"
+	.text
+	.align 1
+	.align 2
+	.global	_main
+	.type	_main, @function
+_main:
+	mov.l	.L2,r1
+	rts	
+	mov.l	@r1,r0
+.L3:
+	.align 2
+.L2:
+	.long	_toto
+	.size	_main, .-_main
+	.weak	_toto
+	.data
+	.align 2
+	.type	_toto, @object
+	.size	_toto, 4
+_toto:
+	.long	3
+	.global	_tata
+	.align 2
+	.type	_tata, @object
+	.size	_tata, 4
+_tata:
+	.long	1
+	.ident	"GCC: (STMicroelectronics Base) 4.5.3 20110525"
Index: binutils/ld/testsuite/ld-sh/sh.exp
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/sh.exp	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-sh/sh.exp	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -2,6 +2,8 @@
 #   Copyright 1995, 1996, 1997, 2001, 2002, 2003, 2005, 2006, 2007, 2010
 #   Free Software Foundation, Inc.
 #
+# Copyright (c) 2011  STMicroelectronics.
+#
 # This file is part of the GNU Binutils.
 #
 # This program is free software; you can redistribute it and/or modify
@@ -20,7 +22,6 @@
 # MA 02110-1301, USA.
 #
 # Written by Ian Lance Taylor (ian@cygnus.com)
-#
 
 # Test SH relaxing.  This tests the compiler and assembler as well as
 # the linker.
@@ -111,6 +112,24 @@ if ![ld_simple_link $ld tmpdir/sh1.s1 $srec_relax_
     }
 }
 
+set testdefsym "defsym weak"
+
+if {![ld_assemble $as "$srcdir/$subdir/defsymweak.s" tmpdir/defsymweak.o]
+    || ![ld_simple_link $ld tmpdir/m.aout "tmpdir/defsymweak.o --defsym _toto=_tata" ]} {
+    fail $testdefsym
+} else {
+    catch "exec $objdump -t tmpdir/m.aout | grep toto | sed s/toto// > tmpdir/s1" exec_output
+    catch "exec $objdump -t tmpdir/m.aout | grep tata | sed s/tata// > tmpdir/s2" exec_output
+    catch "exec cmp tmpdir/s1 tmpdir/s2" exec_output
+    if ![string match "" $exec_output] {
+	send_log "$exec_output\n"
+	verbose "$exec_output"
+	fail $testdefsym
+    } else {
+	pass $testdefsym
+    }
+}
+
 set testlink "SH relaxing"
 set testjsr "SH confirm relaxing"
 set testrun "SH relaxing execution"
@@ -155,14 +174,48 @@ if [string match "*jsr*" $exec_output] {
     pass $testjsr
 }
 
-if { ![info exists SIM] || [which $SIM] == 0 } {
+if { ![info exists sim] || [which $sim] != 0 } {
     untested $testrun
-    return
+} else {
+    set status [catch "exec $sim tmpdir/sh2" exec_output]
+    if { $status == 0 } {
+	pass $testrun
+    } else {
+	fail $testrun
+    }
 }
 
-set status [catch "exec $SIM tmpdir/sh2" exec_output]
-if { $status == 0 } {
-    pass $testrun
+# relax + relocatable
+set testrrelax_comp "relax-relocatable Compil"
+set testrrelax_run "relax-relocatable Run"
+
+if {![ld_assemble $as "-relax tmpdir/start.s" tmpdir/start.o] \
+    || ![ld_assemble $as "-relax $srcdir/$subdir/rrelax-a.s" tmpdir/rrelax-a.o] \
+    || ![ld_assemble $as "-relax $srcdir/$subdir/rrelax-b.s" tmpdir/rrelax-b.o] \
+    || ![ld_assemble $as "-relax $srcdir/$subdir/rrelax-c.s" tmpdir/rrelax-c.o] \
+    || ![ld_assemble $as "-relax $srcdir/$subdir/rrelax-d.s" tmpdir/rrelax-d.o]} {
+    send_log "cannot assemble .s files\n"
+    fail $testrrelax_comp
+    untested $testrrelax_run    
 } else {
-    fail $testrun
+  if {![ld_simple_link $ld tmpdir/rrelax-bc.o "-r tmpdir/rrelax-b.o tmpdir/rrelax-c.o"] \
+      || ![ld_simple_link $ld tmpdir/rrelax-bcd.o "-r tmpdir/rrelax-bc.o tmpdir/rrelax-d.o"] \
+      || ![ld_simple_link $ld tmpdir/rrelax-abcd.u \
+                              "-relax tmpdir/rrelax-a.o tmpdir/rrelax-bcd.o tmpdir/start.o"]} {
+      send_log "cannot link rrelax-abcd.u\n"
+      fail $testrrelax_comp
+      untested $testrrelax_run
+  } else {
+     pass $testrrelax_comp
+     if { ![info exists sim] || [which $sim] != 0 } {
+	 untested $testrrelax_run
+     } else {
+	 set status [catch "exec $sim tmpdir/rrelax-abcd.u" exec_output]
+	 if { $status == 0 } {
+	     pass $testrrelax_run
+	 } else {
+	     fail $testrrelax_run
+	 }
+     }
+  }
 }
Index: binutils/ld/testsuite/ld-sh/sub2l-1.d
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/sub2l-1.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-sh/sub2l-1.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -20,5 +20,4 @@ Contents of section \.text:
  1010 09000900 09000900 09000900 09000900  .*
  1020 09000900 09000900 0b000900 d8ffffff  .*
  1030 daffffff 02100000 28100000 24100000  .*
-Contents of section \..*:
 #pass
Index: binutils/ld/testsuite/ld-sh/rrelax-a.s
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/rrelax-a.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/ld/testsuite/ld-sh/rrelax-a.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,149 @@
+	.file	"a.c"
+	.text
+	.section	.text.startup,"ax",@progbits
+	.align 1
+	.align 5
+	.global	_main
+	.type	_main, @function
+_main:
+	mov.l	r8,@-r15
+	mov	#-1,r1
+	mov.l	r9,@-r15
+	mov	#1,r4
+	mov.l	r10,@-r15
+	mov.l	r11,@-r15
+.L20:
+	mov.l	.L23,r0
+	mov.l	r12,@-r15
+	mov.l	.L24,r8
+	mov.l	.L25,r11
+	mov.l	.L26,r10
+	mov.l	.L27,r9
+	mov.l	r13,@-r15
+	mov.l	r1,@r11
+	mov.l	r1,@r10
+	mov.l	r1,@r9
+	mov.l	r1,@r8
+	sts.l	pr,@-r15
+	.uses .L20
+	jsr	@r0
+	mov	#1,r13
+	mov.l	.L28,r12
+	mov	r0,r3
+	mov.l	@r8,r1
+	mov.l	r0,@r12
+	mov	r1,r0
+	cmp/eq	#-1,r0
+	bt	.L19
+.L17:
+	lds.l	@r15+,pr
+	mov	r13,r0
+	mov.l	@r15+,r13
+	mov.l	@r15+,r12
+	mov.l	@r15+,r11
+	mov.l	@r15+,r10
+	mov.l	@r15+,r9
+	rts	
+	mov.l	@r15+,r8
+	.align 5
+.L19:
+	mov.l	@r9,r1
+	mov	r1,r0
+	cmp/eq	#-1,r0
+	bf	.L17
+	mov.l	@r10,r1
+	mov	r1,r0
+	cmp/eq	#-1,r0
+	bf	.L17
+	mov.l	@r11,r2
+	mov	r2,r0
+	cmp/eq	#111,r0
+	bf	.L17
+	mov	r3,r0
+	cmp/eq	#1,r0
+	bf	.L17
+	mov.l	r1,@r11
+.L21:
+	mov.l	.L29,r0
+	mov.l	r1,@r9
+	mov.l	r1,@r8
+	.uses .L21
+	jsr	@r0
+	mov	#0,r4
+	mov.l	@r8,r1
+	mov	r0,r2
+	mov.l	r0,@r12
+	mov	r1,r0
+	cmp/eq	#-1,r0
+	bf	.L17
+	mov.l	@r9,r1
+	mov	r1,r0
+	cmp/eq	#121,r0
+	bf	.L17
+	mov.l	@r10,r1
+	mov	r1,r0
+	cmp/eq	#-1,r0
+	bf	.L17
+	mov.l	@r11,r1
+	mov	r1,r0
+	cmp/eq	#121,r0
+	bf/s	.L17
+	tst	r2,r2
+	bf/s	.L17
+	mov	#-1,r1
+.L22:
+	mov.l	.L30,r0
+	mov.l	r1,@r11
+	mov.l	r1,@r10
+	mov.l	r1,@r9
+	mov.l	r1,@r8
+	.uses .L22
+	jsr	@r0
+	mov	#2,r4
+	mov.l	@r8,r1
+	mov	r0,r3
+	mov.l	r0,@r12
+	mov	r1,r0
+	cmp/eq	#-1,r0
+	bf	.L17
+	mov.l	@r9,r2
+	mov	r2,r0
+	cmp/eq	#111,r0
+	bf	.L17
+	mov.l	@r10,r2
+	mov	r2,r0
+	cmp/eq	#111,r0
+	bf	.L17
+	mov.l	@r11,r2
+	mov	r2,r0
+	cmp/eq	#111,r0
+	bf	.L17
+	mov	r3,r0
+	cmp/eq	#2,r0
+	bra	.L17
+	negc	r1,r13
+.L31:
+	.align 2
+.L23:
+	.long	_func_d
+.L24:
+	.long	_a
+.L25:
+	.long	_d
+.L26:
+	.long	_c
+.L27:
+	.long	_b
+.L28:
+	.long	_ret
+.L29:
+	.long	_func_b
+.L30:
+	.long	_func_c
+	.size	_main, .-_main
+	.comm	_d,4,4
+	.comm	_c,4,4
+	.comm	_b,4,4
+	.comm	_a,4,4
+	.comm	_ret,4,4
+	.ident	"GCC: (STMicroelectronics Base) 4.6.3 20120330"
Index: binutils/ld/testsuite/ld-sh/arch/arch.exp
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/arch/arch.exp	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-sh/arch/arch.exp	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,5 +1,6 @@
 # Copyright (C) 2004, 2005, 2006, 2007, 2008
 # Free Software Foundation, Inc.
+# Copyright (c) 2006, 2007  STMicroelectronics.
 #
 # This file is part of the GNU Binutils.
 #
@@ -72,7 +73,7 @@ proc get_sh_arch { ofile } {
 # It also writes an entry to the arch_results.txt file.
 
 proc test_arch { file1 file2 arch resultfile } {
-    global LD
+    global LD LDFLAGS
 
     set name1 [file tail $file1]
     set rootname1 [file rootname $name1]
@@ -80,11 +81,9 @@ proc test_arch { file1 file2 arch resultfile } {
     set name2 [file tail $file2]
     set rootname2 [file rootname $name2]
 
-    set flags [big_or_little_endian]
-    
     # This must use -r to prevent LD trying to relocate the (unrealistic) file
-    send_log "$LD $flags -r -o ${rootname1}_${rootname2}.o $file1 $file2\n"
-    catch "exec $LD $flags -r -o ${rootname1}_${rootname2}.o $file1 $file2" ld_output
+    send_log "$LD $LDFLAGS -r -o ${rootname1}_${rootname2}.o $file1 $file2\n"
+    catch "exec $LD $LDFLAGS -r -o ${rootname1}_${rootname2}.o $file1 $file2" ld_output
     send_log $ld_output
 
     if {[string equal $ld_output ""] == 1} then {
@@ -147,37 +146,54 @@ if [istarget sh*-*-elf] then {
     # Find all the architectures and assemble all the files
     # we will use for the linker tests.
 
-    set sfilelist [lsort -ascii [glob "$srcdir/$subdir/sh*.s"]]
-    set ofilelist {}
-    foreach sfile $sfilelist {
-	set ofile "[file rootname [file tail $sfile]].o"
+    # Extract the architecture list from the GAS --help message.
+    set archlist {}
+    spawn $AS --help
+    expect -ex "--isa=\["
+    expect {
+      -re {\| ([-a-z0-9]+)} {
+	# Skip "any", "dsp", "fp", and all the "*-up" architectures
+	if ![regexp {^any$|^dsp$|^fp$|-up$} $expect_out(1,string)] {
+	  lappend archlist $expect_out(1,string)
+	}
+	exp_continue
+      }
+      eof {wait}
+    }
+
+    # Create an empty assembler file
+    # Not all hosts have /dev/null
+    close [open "empty.s" w]
+
+    foreach arch $archlist {
+	set ofile "$arch.o"
 	lappend ofilelist $ofile
 
-	set endian "-big"
+	set endian ""
+	if [string equal [big_or_little_endian] " -EB"] then {
+	    set endian "-big"
+	}
 	if [string equal [big_or_little_endian] " -EL"] then {
 	    set endian "-little"
 	}
 
-	set cmd "$AS $endian -isa=any $sfile -o $ofile"
+	set cmd "$AS $endian -isa=$arch empty.s -o $ofile"
 	verbose -log $cmd
 	catch "exec $cmd" as_output
 	if ![file exists $ofile] then {
 	    verbose -log $as_output
-	    perror "$sfile: assembly failed"
+	    perror "$arch: assembly failed"
 	}
     }
 
     # Create the default arch ofile
     # This cannot be created with the assembler
     # sh4al-dsp is number 6, sh-unknown is 0
+    # The location of this number moves with endian
 
     lappend ofilelist "sh-unknown.o"
 
-    if [string equal [big_or_little_endian] " -EL"] then {
-	set cmd {xxd sh4al-dsp.o | sed {s/\(^0000020: .... .... \)06/\100/} | xxd -r - sh-unknown.o}
-    } else {
-	set cmd {xxd sh4al-dsp.o | sed {s/\(^0000020: .... .... .... ..\)06/\100/} | xxd -r - sh-unknown.o}
-    }
+    set cmd {xxd sh4al-dsp.o | sed {s/\(^0000020: .... ....\) 0[60]00 000[60]/\1 0000 0000/} | xxd -r - sh-unknown.o}
     verbose -log $cmd
     catch "exec $cmd" xxd_output
     verbose -log $xxd_output
Index: binutils/ld/testsuite/ld-sh/arch/arch_expected.txt
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/arch/arch_expected.txt	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-sh/arch/arch_expected.txt	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -10,444 +10,679 @@
 #
 # FILE1              FILE2                OUTPUT
 # -----              -----                ------
-sh-dsp.o             sh-dsp.o             sh-dsp
-sh-dsp.o             sh.o                 sh-dsp
-sh-dsp.o             sh2.o                sh-dsp
-sh-dsp.o             sh2a-nofpu-or-sh3-nommu.o sh3-dsp
-sh-dsp.o             sh2a-nofpu-or-sh4-nommu-nofpu.o sh4al-dsp
-sh-dsp.o             sh2a-nofpu.o         ERROR
-sh-dsp.o             sh2a-or-sh3e.o       ERROR
-sh-dsp.o             sh2a-or-sh4.o        ERROR
-sh-dsp.o             sh2a.o               ERROR
-sh-dsp.o             sh2e.o               ERROR
-sh-dsp.o             sh3-dsp.o            sh3-dsp
-sh-dsp.o             sh3-nommu.o          sh3-dsp
-sh-dsp.o             sh3.o                sh3-dsp
-sh-dsp.o             sh3e.o               ERROR
-sh-dsp.o             sh4-nofpu.o          sh4al-dsp
-sh-dsp.o             sh4-nommu-nofpu.o    sh4al-dsp
-sh-dsp.o             sh4.o                ERROR
-sh-dsp.o             sh4a-nofpu.o         sh4al-dsp
-sh-dsp.o             sh4a.o               ERROR
-sh-dsp.o             sh4al-dsp.o          sh4al-dsp
-sh-dsp.o             sh-unknown.o         sh-dsp
-sh.o                 sh-dsp.o             sh-dsp
 sh.o                 sh.o                 sh
 sh.o                 sh2.o                sh2
-sh.o                 sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh3-nommu
-sh.o                 sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu
-sh.o                 sh2a-nofpu.o         sh2a-nofpu
-sh.o                 sh2a-or-sh3e.o       sh2a-or-sh3e
-sh.o                 sh2a-or-sh4.o        sh2a-or-sh4
-sh.o                 sh2a.o               sh2a
 sh.o                 sh2e.o               sh2e
+sh.o                 sh-dsp.o             sh-dsp
+sh.o                 sh3.o                sh3
+sh.o                 sh3-nommu.o          sh3-nommu
 sh.o                 sh3-dsp.o            sh3-dsp
-sh.o                 sh3-nommu.o          sh3-nommu
-sh.o                 sh3.o                sh3
 sh.o                 sh3e.o               sh3e
+sh.o                 sh4.o                sh4
+sh.o                 sh4a.o               sh4a
+sh.o                 sh4al-dsp.o          sh4al-dsp
 sh.o                 sh4-nofpu.o          sh4-nofpu
 sh.o                 sh4-nommu-nofpu.o    sh4-nommu-nofpu
-sh.o                 sh4.o                sh4
 sh.o                 sh4a-nofpu.o         sh4a-nofpu
-sh.o                 sh4a.o               sh4a
-sh.o                 sh4al-dsp.o          sh4al-dsp
+sh.o                 sh2a.o               sh2a
+sh.o                 sh2a-nofpu.o         sh2a-nofpu
+sh.o                 sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu
+sh.o                 sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh3-nommu
+sh.o                 sh2a-or-sh4.o        sh2a-or-sh4
+sh.o                 sh2a-or-sh3e.o       sh2a-or-sh3e
+sh.o                 st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu-or-sh2a-nofpu
+sh.o                 st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+sh.o                 st40-300-nofpu.o     st40-300-nofpu
+sh.o                 st40-300-or-sh4a.o   st40-300-or-sh4a
+sh.o                 st40-300.o           st40-300
 sh.o                 sh-unknown.o         sh
-sh2.o                sh-dsp.o             sh-dsp
 sh2.o                sh.o                 sh2
 sh2.o                sh2.o                sh2
-sh2.o                sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh3-nommu
-sh2.o                sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu
-sh2.o                sh2a-nofpu.o         sh2a-nofpu
-sh2.o                sh2a-or-sh3e.o       sh2a-or-sh3e
-sh2.o                sh2a-or-sh4.o        sh2a-or-sh4
-sh2.o                sh2a.o               sh2a
 sh2.o                sh2e.o               sh2e
+sh2.o                sh-dsp.o             sh-dsp
+sh2.o                sh3.o                sh3
+sh2.o                sh3-nommu.o          sh3-nommu
 sh2.o                sh3-dsp.o            sh3-dsp
-sh2.o                sh3-nommu.o          sh3-nommu
-sh2.o                sh3.o                sh3
 sh2.o                sh3e.o               sh3e
+sh2.o                sh4.o                sh4
+sh2.o                sh4a.o               sh4a
+sh2.o                sh4al-dsp.o          sh4al-dsp
 sh2.o                sh4-nofpu.o          sh4-nofpu
 sh2.o                sh4-nommu-nofpu.o    sh4-nommu-nofpu
-sh2.o                sh4.o                sh4
 sh2.o                sh4a-nofpu.o         sh4a-nofpu
-sh2.o                sh4a.o               sh4a
-sh2.o                sh4al-dsp.o          sh4al-dsp
+sh2.o                sh2a.o               sh2a
+sh2.o                sh2a-nofpu.o         sh2a-nofpu
+sh2.o                sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu
+sh2.o                sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh3-nommu
+sh2.o                sh2a-or-sh4.o        sh2a-or-sh4
+sh2.o                sh2a-or-sh3e.o       sh2a-or-sh3e
+sh2.o                st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu-or-sh2a-nofpu
+sh2.o                st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+sh2.o                st40-300-nofpu.o     st40-300-nofpu
+sh2.o                st40-300-or-sh4a.o   st40-300-or-sh4a
+sh2.o                st40-300.o           st40-300
 sh2.o                sh-unknown.o         sh2
-sh2a-nofpu-or-sh3-nommu.o sh-dsp.o             sh3-dsp
-sh2a-nofpu-or-sh3-nommu.o sh.o                 sh2a-nofpu-or-sh3-nommu
-sh2a-nofpu-or-sh3-nommu.o sh2.o                sh2a-nofpu-or-sh3-nommu
-sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh3-nommu
-sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu
-sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu.o         sh2a-nofpu
-sh2a-nofpu-or-sh3-nommu.o sh2a-or-sh3e.o       sh2a-or-sh3e
-sh2a-nofpu-or-sh3-nommu.o sh2a-or-sh4.o        sh2a-or-sh4
-sh2a-nofpu-or-sh3-nommu.o sh2a.o               sh2a
-sh2a-nofpu-or-sh3-nommu.o sh2e.o               sh2a-or-sh3e
-sh2a-nofpu-or-sh3-nommu.o sh3-dsp.o            sh3-dsp
-sh2a-nofpu-or-sh3-nommu.o sh3-nommu.o          sh3-nommu
-sh2a-nofpu-or-sh3-nommu.o sh3.o                sh3
-sh2a-nofpu-or-sh3-nommu.o sh3e.o               sh3e
-sh2a-nofpu-or-sh3-nommu.o sh4-nofpu.o          sh4-nofpu
-sh2a-nofpu-or-sh3-nommu.o sh4-nommu-nofpu.o    sh4-nommu-nofpu
-sh2a-nofpu-or-sh3-nommu.o sh4.o                sh4
-sh2a-nofpu-or-sh3-nommu.o sh4a-nofpu.o         sh4a-nofpu
-sh2a-nofpu-or-sh3-nommu.o sh4a.o               sh4a
-sh2a-nofpu-or-sh3-nommu.o sh4al-dsp.o          sh4al-dsp
-sh2a-nofpu-or-sh3-nommu.o sh-unknown.o         sh2a-nofpu-or-sh3-nommu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh-dsp.o             sh4al-dsp
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh.o                 sh2a-nofpu-or-sh4-nommu-nofpu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh2.o                sh2a-nofpu-or-sh4-nommu-nofpu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh4-nommu-nofpu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu.o         sh2a-nofpu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-or-sh3e.o       sh2a-or-sh4
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-or-sh4.o        sh2a-or-sh4
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a.o               sh2a
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh2e.o               sh2a-or-sh4
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh3-dsp.o            sh4al-dsp
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh3-nommu.o          sh4-nommu-nofpu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh3.o                sh4-nofpu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh3e.o               sh4
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nofpu.o          sh4-nofpu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nommu-nofpu.o    sh4-nommu-nofpu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh4.o                sh4
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh4a-nofpu.o         sh4a-nofpu
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh4a.o               sh4a
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh4al-dsp.o          sh4al-dsp
-sh2a-nofpu-or-sh4-nommu-nofpu.o sh-unknown.o         sh2a-nofpu-or-sh4-nommu-nofpu
-sh2a-nofpu.o         sh-dsp.o             ERROR
-sh2a-nofpu.o         sh.o                 sh2a-nofpu
-sh2a-nofpu.o         sh2.o                sh2a-nofpu
-sh2a-nofpu.o         sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu
-sh2a-nofpu.o         sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu
-sh2a-nofpu.o         sh2a-nofpu.o         sh2a-nofpu
-sh2a-nofpu.o         sh2a-or-sh3e.o       sh2a
-sh2a-nofpu.o         sh2a-or-sh4.o        sh2a
-sh2a-nofpu.o         sh2a.o               sh2a
-sh2a-nofpu.o         sh2e.o               sh2a
-sh2a-nofpu.o         sh3-dsp.o            ERROR
-sh2a-nofpu.o         sh3-nommu.o          ERROR
-sh2a-nofpu.o         sh3.o                ERROR
-sh2a-nofpu.o         sh3e.o               ERROR
-sh2a-nofpu.o         sh4-nofpu.o          ERROR
-sh2a-nofpu.o         sh4-nommu-nofpu.o    ERROR
-sh2a-nofpu.o         sh4.o                ERROR
-sh2a-nofpu.o         sh4a-nofpu.o         ERROR
-sh2a-nofpu.o         sh4a.o               ERROR
-sh2a-nofpu.o         sh4al-dsp.o          ERROR
-sh2a-nofpu.o         sh-unknown.o         sh2a-nofpu
-sh2a-or-sh3e.o       sh-dsp.o             ERROR
-sh2a-or-sh3e.o       sh.o                 sh2a-or-sh3e
-sh2a-or-sh3e.o       sh2.o                sh2a-or-sh3e
-sh2a-or-sh3e.o       sh2a-nofpu-or-sh3-nommu.o sh2a-or-sh3e
-sh2a-or-sh3e.o       sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-or-sh4
-sh2a-or-sh3e.o       sh2a-nofpu.o         sh2a
-sh2a-or-sh3e.o       sh2a-or-sh3e.o       sh2a-or-sh3e
-sh2a-or-sh3e.o       sh2a-or-sh4.o        sh2a-or-sh4
-sh2a-or-sh3e.o       sh2a.o               sh2a
-sh2a-or-sh3e.o       sh2e.o               sh2a-or-sh3e
-sh2a-or-sh3e.o       sh3-dsp.o            ERROR
-sh2a-or-sh3e.o       sh3-nommu.o          sh3e
-sh2a-or-sh3e.o       sh3.o                sh3e
-sh2a-or-sh3e.o       sh3e.o               sh3e
-sh2a-or-sh3e.o       sh4-nofpu.o          sh4
-sh2a-or-sh3e.o       sh4-nommu-nofpu.o    sh4
-sh2a-or-sh3e.o       sh4.o                sh4
-sh2a-or-sh3e.o       sh4a-nofpu.o         sh4a
-sh2a-or-sh3e.o       sh4a.o               sh4a
-sh2a-or-sh3e.o       sh4al-dsp.o          ERROR
-sh2a-or-sh3e.o       sh-unknown.o         sh2a-or-sh3e
-sh2a-or-sh4.o        sh-dsp.o             ERROR
-sh2a-or-sh4.o        sh.o                 sh2a-or-sh4
-sh2a-or-sh4.o        sh2.o                sh2a-or-sh4
-sh2a-or-sh4.o        sh2a-nofpu-or-sh3-nommu.o sh2a-or-sh4
-sh2a-or-sh4.o        sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-or-sh4
-sh2a-or-sh4.o        sh2a-nofpu.o         sh2a
-sh2a-or-sh4.o        sh2a-or-sh3e.o       sh2a-or-sh4
-sh2a-or-sh4.o        sh2a-or-sh4.o        sh2a-or-sh4
-sh2a-or-sh4.o        sh2a.o               sh2a
-sh2a-or-sh4.o        sh2e.o               sh2a-or-sh4
-sh2a-or-sh4.o        sh3-dsp.o            ERROR
-sh2a-or-sh4.o        sh3-nommu.o          sh4
-sh2a-or-sh4.o        sh3.o                sh4
-sh2a-or-sh4.o        sh3e.o               sh4
-sh2a-or-sh4.o        sh4-nofpu.o          sh4
-sh2a-or-sh4.o        sh4-nommu-nofpu.o    sh4
-sh2a-or-sh4.o        sh4.o                sh4
-sh2a-or-sh4.o        sh4a-nofpu.o         sh4a
-sh2a-or-sh4.o        sh4a.o               sh4a
-sh2a-or-sh4.o        sh4al-dsp.o          ERROR
-sh2a-or-sh4.o        sh-unknown.o         sh2a-or-sh4
-sh2a.o               sh-dsp.o             ERROR
-sh2a.o               sh.o                 sh2a
-sh2a.o               sh2.o                sh2a
-sh2a.o               sh2a-nofpu-or-sh3-nommu.o sh2a
-sh2a.o               sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a
-sh2a.o               sh2a-nofpu.o         sh2a
-sh2a.o               sh2a-or-sh3e.o       sh2a
-sh2a.o               sh2a-or-sh4.o        sh2a
-sh2a.o               sh2a.o               sh2a
-sh2a.o               sh2e.o               sh2a
-sh2a.o               sh3-dsp.o            ERROR
-sh2a.o               sh3-nommu.o          ERROR
-sh2a.o               sh3.o                ERROR
-sh2a.o               sh3e.o               ERROR
-sh2a.o               sh4-nofpu.o          ERROR
-sh2a.o               sh4-nommu-nofpu.o    ERROR
-sh2a.o               sh4.o                ERROR
-sh2a.o               sh4a-nofpu.o         ERROR
-sh2a.o               sh4a.o               ERROR
-sh2a.o               sh4al-dsp.o          ERROR
-sh2a.o               sh-unknown.o         sh2a
-sh2e.o               sh-dsp.o             ERROR
 sh2e.o               sh.o                 sh2e
 sh2e.o               sh2.o                sh2e
-sh2e.o               sh2a-nofpu-or-sh3-nommu.o sh2a-or-sh3e
-sh2e.o               sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-or-sh4
-sh2e.o               sh2a-nofpu.o         sh2a
-sh2e.o               sh2a-or-sh3e.o       sh2a-or-sh3e
-sh2e.o               sh2a-or-sh4.o        sh2a-or-sh4
-sh2e.o               sh2a.o               sh2a
 sh2e.o               sh2e.o               sh2e
+sh2e.o               sh-dsp.o             ERROR
+sh2e.o               sh3.o                sh3e
+sh2e.o               sh3-nommu.o          sh3e
 sh2e.o               sh3-dsp.o            ERROR
-sh2e.o               sh3-nommu.o          sh3e
-sh2e.o               sh3.o                sh3e
 sh2e.o               sh3e.o               sh3e
+sh2e.o               sh4.o                sh4
+sh2e.o               sh4a.o               sh4a
+sh2e.o               sh4al-dsp.o          ERROR
 sh2e.o               sh4-nofpu.o          sh4
 sh2e.o               sh4-nommu-nofpu.o    sh4
-sh2e.o               sh4.o                sh4
 sh2e.o               sh4a-nofpu.o         sh4a
-sh2e.o               sh4a.o               sh4a
-sh2e.o               sh4al-dsp.o          ERROR
+sh2e.o               sh2a.o               sh2a
+sh2e.o               sh2a-nofpu.o         sh2a
+sh2e.o               sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-or-sh4
+sh2e.o               sh2a-nofpu-or-sh3-nommu.o sh2a-or-sh3e
+sh2e.o               sh2a-or-sh4.o        sh2a-or-sh4
+sh2e.o               sh2a-or-sh3e.o       sh2a-or-sh3e
+sh2e.o               st40-300-nofpu-or-sh2a-nofpu.o st40-300
+sh2e.o               st40-300-nofpu-or-sh4a-nofpu.o st40-300-or-sh4a
+sh2e.o               st40-300-nofpu.o     st40-300
+sh2e.o               st40-300-or-sh4a.o   st40-300-or-sh4a
+sh2e.o               st40-300.o           st40-300
 sh2e.o               sh-unknown.o         sh2e
-sh3-dsp.o            sh-dsp.o             sh3-dsp
+sh-dsp.o             sh.o                 sh-dsp
+sh-dsp.o             sh2.o                sh-dsp
+sh-dsp.o             sh2e.o               ERROR
+sh-dsp.o             sh-dsp.o             sh-dsp
+sh-dsp.o             sh3.o                sh3-dsp
+sh-dsp.o             sh3-nommu.o          sh3-dsp
+sh-dsp.o             sh3-dsp.o            sh3-dsp
+sh-dsp.o             sh3e.o               ERROR
+sh-dsp.o             sh4.o                ERROR
+sh-dsp.o             sh4a.o               ERROR
+sh-dsp.o             sh4al-dsp.o          sh4al-dsp
+sh-dsp.o             sh4-nofpu.o          sh4al-dsp
+sh-dsp.o             sh4-nommu-nofpu.o    sh4al-dsp
+sh-dsp.o             sh4a-nofpu.o         sh4al-dsp
+sh-dsp.o             sh2a.o               ERROR
+sh-dsp.o             sh2a-nofpu.o         ERROR
+sh-dsp.o             sh2a-nofpu-or-sh4-nommu-nofpu.o sh4al-dsp
+sh-dsp.o             sh2a-nofpu-or-sh3-nommu.o sh3-dsp
+sh-dsp.o             sh2a-or-sh4.o        ERROR
+sh-dsp.o             sh2a-or-sh3e.o       ERROR
+sh-dsp.o             st40-300-nofpu-or-sh2a-nofpu.o ERROR
+sh-dsp.o             st40-300-nofpu-or-sh4a-nofpu.o sh4al-dsp
+sh-dsp.o             st40-300-nofpu.o     ERROR
+sh-dsp.o             st40-300-or-sh4a.o   ERROR
+sh-dsp.o             st40-300.o           ERROR
+sh-dsp.o             sh-unknown.o         sh-dsp
+sh3.o                sh.o                 sh3
+sh3.o                sh2.o                sh3
+sh3.o                sh2e.o               sh3e
+sh3.o                sh-dsp.o             sh3-dsp
+sh3.o                sh3.o                sh3
+sh3.o                sh3-nommu.o          sh3
+sh3.o                sh3-dsp.o            sh3-dsp
+sh3.o                sh3e.o               sh3e
+sh3.o                sh4.o                sh4
+sh3.o                sh4a.o               sh4a
+sh3.o                sh4al-dsp.o          sh4al-dsp
+sh3.o                sh4-nofpu.o          sh4-nofpu
+sh3.o                sh4-nommu-nofpu.o    sh4-nofpu
+sh3.o                sh4a-nofpu.o         sh4a-nofpu
+sh3.o                sh2a.o               ERROR
+sh3.o                sh2a-nofpu.o         ERROR
+sh3.o                sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nofpu
+sh3.o                sh2a-nofpu-or-sh3-nommu.o sh3
+sh3.o                sh2a-or-sh4.o        sh4
+sh3.o                sh2a-or-sh3e.o       sh3e
+sh3.o                st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu
+sh3.o                st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+sh3.o                st40-300-nofpu.o     st40-300-nofpu
+sh3.o                st40-300-or-sh4a.o   st40-300-or-sh4a
+sh3.o                st40-300.o           st40-300
+sh3.o                sh-unknown.o         sh3
+sh3-nommu.o          sh.o                 sh3-nommu
+sh3-nommu.o          sh2.o                sh3-nommu
+sh3-nommu.o          sh2e.o               sh3e
+sh3-nommu.o          sh-dsp.o             sh3-dsp
+sh3-nommu.o          sh3.o                sh3
+sh3-nommu.o          sh3-nommu.o          sh3-nommu
+sh3-nommu.o          sh3-dsp.o            sh3-dsp
+sh3-nommu.o          sh3e.o               sh3e
+sh3-nommu.o          sh4.o                sh4
+sh3-nommu.o          sh4a.o               sh4a
+sh3-nommu.o          sh4al-dsp.o          sh4al-dsp
+sh3-nommu.o          sh4-nofpu.o          sh4-nofpu
+sh3-nommu.o          sh4-nommu-nofpu.o    sh4-nommu-nofpu
+sh3-nommu.o          sh4a-nofpu.o         sh4a-nofpu
+sh3-nommu.o          sh2a.o               ERROR
+sh3-nommu.o          sh2a-nofpu.o         ERROR
+sh3-nommu.o          sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nommu-nofpu
+sh3-nommu.o          sh2a-nofpu-or-sh3-nommu.o sh3-nommu
+sh3-nommu.o          sh2a-or-sh4.o        sh4
+sh3-nommu.o          sh2a-or-sh3e.o       sh3e
+sh3-nommu.o          st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu
+sh3-nommu.o          st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+sh3-nommu.o          st40-300-nofpu.o     st40-300-nofpu
+sh3-nommu.o          st40-300-or-sh4a.o   st40-300-or-sh4a
+sh3-nommu.o          st40-300.o           st40-300
+sh3-nommu.o          sh-unknown.o         sh3-nommu
 sh3-dsp.o            sh.o                 sh3-dsp
 sh3-dsp.o            sh2.o                sh3-dsp
-sh3-dsp.o            sh2a-nofpu-or-sh3-nommu.o sh3-dsp
-sh3-dsp.o            sh2a-nofpu-or-sh4-nommu-nofpu.o sh4al-dsp
-sh3-dsp.o            sh2a-nofpu.o         ERROR
-sh3-dsp.o            sh2a-or-sh3e.o       ERROR
-sh3-dsp.o            sh2a-or-sh4.o        ERROR
-sh3-dsp.o            sh2a.o               ERROR
 sh3-dsp.o            sh2e.o               ERROR
+sh3-dsp.o            sh-dsp.o             sh3-dsp
+sh3-dsp.o            sh3.o                sh3-dsp
+sh3-dsp.o            sh3-nommu.o          sh3-dsp
 sh3-dsp.o            sh3-dsp.o            sh3-dsp
-sh3-dsp.o            sh3-nommu.o          sh3-dsp
-sh3-dsp.o            sh3.o                sh3-dsp
 sh3-dsp.o            sh3e.o               ERROR
+sh3-dsp.o            sh4.o                ERROR
+sh3-dsp.o            sh4a.o               ERROR
+sh3-dsp.o            sh4al-dsp.o          sh4al-dsp
 sh3-dsp.o            sh4-nofpu.o          sh4al-dsp
 sh3-dsp.o            sh4-nommu-nofpu.o    sh4al-dsp
-sh3-dsp.o            sh4.o                ERROR
 sh3-dsp.o            sh4a-nofpu.o         sh4al-dsp
-sh3-dsp.o            sh4a.o               ERROR
-sh3-dsp.o            sh4al-dsp.o          sh4al-dsp
+sh3-dsp.o            sh2a.o               ERROR
+sh3-dsp.o            sh2a-nofpu.o         ERROR
+sh3-dsp.o            sh2a-nofpu-or-sh4-nommu-nofpu.o sh4al-dsp
+sh3-dsp.o            sh2a-nofpu-or-sh3-nommu.o sh3-dsp
+sh3-dsp.o            sh2a-or-sh4.o        ERROR
+sh3-dsp.o            sh2a-or-sh3e.o       ERROR
+sh3-dsp.o            st40-300-nofpu-or-sh2a-nofpu.o ERROR
+sh3-dsp.o            st40-300-nofpu-or-sh4a-nofpu.o sh4al-dsp
+sh3-dsp.o            st40-300-nofpu.o     ERROR
+sh3-dsp.o            st40-300-or-sh4a.o   ERROR
+sh3-dsp.o            st40-300.o           ERROR
 sh3-dsp.o            sh-unknown.o         sh3-dsp
-sh3-nommu.o          sh-dsp.o             sh3-dsp
-sh3-nommu.o          sh.o                 sh3-nommu
-sh3-nommu.o          sh2.o                sh3-nommu
-sh3-nommu.o          sh2a-nofpu-or-sh3-nommu.o sh3-nommu
-sh3-nommu.o          sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nommu-nofpu
-sh3-nommu.o          sh2a-nofpu.o         ERROR
-sh3-nommu.o          sh2a-or-sh3e.o       sh3e
-sh3-nommu.o          sh2a-or-sh4.o        sh4
-sh3-nommu.o          sh2a.o               ERROR
-sh3-nommu.o          sh2e.o               sh3e
-sh3-nommu.o          sh3-dsp.o            sh3-dsp
-sh3-nommu.o          sh3-nommu.o          sh3-nommu
-sh3-nommu.o          sh3.o                sh3
-sh3-nommu.o          sh3e.o               sh3e
-sh3-nommu.o          sh4-nofpu.o          sh4-nofpu
-sh3-nommu.o          sh4-nommu-nofpu.o    sh4-nommu-nofpu
-sh3-nommu.o          sh4.o                sh4
-sh3-nommu.o          sh4a-nofpu.o         sh4a-nofpu
-sh3-nommu.o          sh4a.o               sh4a
-sh3-nommu.o          sh4al-dsp.o          sh4al-dsp
-sh3-nommu.o          sh-unknown.o         sh3-nommu
-sh3.o                sh-dsp.o             sh3-dsp
-sh3.o                sh.o                 sh3
-sh3.o                sh2.o                sh3
-sh3.o                sh2a-nofpu-or-sh3-nommu.o sh3
-sh3.o                sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nofpu
-sh3.o                sh2a-nofpu.o         ERROR
-sh3.o                sh2a-or-sh3e.o       sh3e
-sh3.o                sh2a-or-sh4.o        sh4
-sh3.o                sh2a.o               ERROR
-sh3.o                sh2e.o               sh3e
-sh3.o                sh3-dsp.o            sh3-dsp
-sh3.o                sh3-nommu.o          sh3
-sh3.o                sh3.o                sh3
-sh3.o                sh3e.o               sh3e
-sh3.o                sh4-nofpu.o          sh4-nofpu
-sh3.o                sh4-nommu-nofpu.o    sh4-nofpu
-sh3.o                sh4.o                sh4
-sh3.o                sh4a-nofpu.o         sh4a-nofpu
-sh3.o                sh4a.o               sh4a
-sh3.o                sh4al-dsp.o          sh4al-dsp
-sh3.o                sh-unknown.o         sh3
-sh3e.o               sh-dsp.o             ERROR
 sh3e.o               sh.o                 sh3e
 sh3e.o               sh2.o                sh3e
-sh3e.o               sh2a-nofpu-or-sh3-nommu.o sh3e
-sh3e.o               sh2a-nofpu-or-sh4-nommu-nofpu.o sh4
-sh3e.o               sh2a-nofpu.o         ERROR
-sh3e.o               sh2a-or-sh3e.o       sh3e
-sh3e.o               sh2a-or-sh4.o        sh4
-sh3e.o               sh2a.o               ERROR
 sh3e.o               sh2e.o               sh3e
+sh3e.o               sh-dsp.o             ERROR
+sh3e.o               sh3.o                sh3e
+sh3e.o               sh3-nommu.o          sh3e
 sh3e.o               sh3-dsp.o            ERROR
-sh3e.o               sh3-nommu.o          sh3e
-sh3e.o               sh3.o                sh3e
 sh3e.o               sh3e.o               sh3e
+sh3e.o               sh4.o                sh4
+sh3e.o               sh4a.o               sh4a
+sh3e.o               sh4al-dsp.o          ERROR
 sh3e.o               sh4-nofpu.o          sh4
 sh3e.o               sh4-nommu-nofpu.o    sh4
-sh3e.o               sh4.o                sh4
 sh3e.o               sh4a-nofpu.o         sh4a
-sh3e.o               sh4a.o               sh4a
-sh3e.o               sh4al-dsp.o          ERROR
+sh3e.o               sh2a.o               ERROR
+sh3e.o               sh2a-nofpu.o         ERROR
+sh3e.o               sh2a-nofpu-or-sh4-nommu-nofpu.o sh4
+sh3e.o               sh2a-nofpu-or-sh3-nommu.o sh3e
+sh3e.o               sh2a-or-sh4.o        sh4
+sh3e.o               sh2a-or-sh3e.o       sh3e
+sh3e.o               st40-300-nofpu-or-sh2a-nofpu.o st40-300
+sh3e.o               st40-300-nofpu-or-sh4a-nofpu.o st40-300-or-sh4a
+sh3e.o               st40-300-nofpu.o     st40-300
+sh3e.o               st40-300-or-sh4a.o   st40-300-or-sh4a
+sh3e.o               st40-300.o           st40-300
 sh3e.o               sh-unknown.o         sh3e
-sh4-nofpu.o          sh-dsp.o             sh4al-dsp
+sh4.o                sh.o                 sh4
+sh4.o                sh2.o                sh4
+sh4.o                sh2e.o               sh4
+sh4.o                sh-dsp.o             ERROR
+sh4.o                sh3.o                sh4
+sh4.o                sh3-nommu.o          sh4
+sh4.o                sh3-dsp.o            ERROR
+sh4.o                sh3e.o               sh4
+sh4.o                sh4.o                sh4
+sh4.o                sh4a.o               sh4a
+sh4.o                sh4al-dsp.o          ERROR
+sh4.o                sh4-nofpu.o          sh4
+sh4.o                sh4-nommu-nofpu.o    sh4
+sh4.o                sh4a-nofpu.o         sh4a
+sh4.o                sh2a.o               ERROR
+sh4.o                sh2a-nofpu.o         ERROR
+sh4.o                sh2a-nofpu-or-sh4-nommu-nofpu.o sh4
+sh4.o                sh2a-nofpu-or-sh3-nommu.o sh4
+sh4.o                sh2a-or-sh4.o        sh4
+sh4.o                sh2a-or-sh3e.o       sh4
+sh4.o                st40-300-nofpu-or-sh2a-nofpu.o st40-300
+sh4.o                st40-300-nofpu-or-sh4a-nofpu.o st40-300-or-sh4a
+sh4.o                st40-300-nofpu.o     st40-300
+sh4.o                st40-300-or-sh4a.o   st40-300-or-sh4a
+sh4.o                st40-300.o           st40-300
+sh4.o                sh-unknown.o         sh4
+sh4a.o               sh.o                 sh4a
+sh4a.o               sh2.o                sh4a
+sh4a.o               sh2e.o               sh4a
+sh4a.o               sh-dsp.o             ERROR
+sh4a.o               sh3.o                sh4a
+sh4a.o               sh3-nommu.o          sh4a
+sh4a.o               sh3-dsp.o            ERROR
+sh4a.o               sh3e.o               sh4a
+sh4a.o               sh4.o                sh4a
+sh4a.o               sh4a.o               sh4a
+sh4a.o               sh4al-dsp.o          ERROR
+sh4a.o               sh4-nofpu.o          sh4a
+sh4a.o               sh4-nommu-nofpu.o    sh4a
+sh4a.o               sh4a-nofpu.o         sh4a
+sh4a.o               sh2a.o               ERROR
+sh4a.o               sh2a-nofpu.o         ERROR
+sh4a.o               sh2a-nofpu-or-sh4-nommu-nofpu.o sh4a
+sh4a.o               sh2a-nofpu-or-sh3-nommu.o sh4a
+sh4a.o               sh2a-or-sh4.o        sh4a
+sh4a.o               sh2a-or-sh3e.o       sh4a
+sh4a.o               st40-300-nofpu-or-sh2a-nofpu.o ERROR
+sh4a.o               st40-300-nofpu-or-sh4a-nofpu.o sh4a
+sh4a.o               st40-300-nofpu.o     ERROR
+sh4a.o               st40-300-or-sh4a.o   sh4a
+sh4a.o               st40-300.o           ERROR
+sh4a.o               sh-unknown.o         sh4a
+sh4al-dsp.o          sh.o                 sh4al-dsp
+sh4al-dsp.o          sh2.o                sh4al-dsp
+sh4al-dsp.o          sh2e.o               ERROR
+sh4al-dsp.o          sh-dsp.o             sh4al-dsp
+sh4al-dsp.o          sh3.o                sh4al-dsp
+sh4al-dsp.o          sh3-nommu.o          sh4al-dsp
+sh4al-dsp.o          sh3-dsp.o            sh4al-dsp
+sh4al-dsp.o          sh3e.o               ERROR
+sh4al-dsp.o          sh4.o                ERROR
+sh4al-dsp.o          sh4a.o               ERROR
+sh4al-dsp.o          sh4al-dsp.o          sh4al-dsp
+sh4al-dsp.o          sh4-nofpu.o          sh4al-dsp
+sh4al-dsp.o          sh4-nommu-nofpu.o    sh4al-dsp
+sh4al-dsp.o          sh4a-nofpu.o         sh4al-dsp
+sh4al-dsp.o          sh2a.o               ERROR
+sh4al-dsp.o          sh2a-nofpu.o         ERROR
+sh4al-dsp.o          sh2a-nofpu-or-sh4-nommu-nofpu.o sh4al-dsp
+sh4al-dsp.o          sh2a-nofpu-or-sh3-nommu.o sh4al-dsp
+sh4al-dsp.o          sh2a-or-sh4.o        ERROR
+sh4al-dsp.o          sh2a-or-sh3e.o       ERROR
+sh4al-dsp.o          st40-300-nofpu-or-sh2a-nofpu.o ERROR
+sh4al-dsp.o          st40-300-nofpu-or-sh4a-nofpu.o sh4al-dsp
+sh4al-dsp.o          st40-300-nofpu.o     ERROR
+sh4al-dsp.o          st40-300-or-sh4a.o   ERROR
+sh4al-dsp.o          st40-300.o           ERROR
+sh4al-dsp.o          sh-unknown.o         sh4al-dsp
 sh4-nofpu.o          sh.o                 sh4-nofpu
 sh4-nofpu.o          sh2.o                sh4-nofpu
-sh4-nofpu.o          sh2a-nofpu-or-sh3-nommu.o sh4-nofpu
-sh4-nofpu.o          sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nofpu
-sh4-nofpu.o          sh2a-nofpu.o         ERROR
-sh4-nofpu.o          sh2a-or-sh3e.o       sh4
-sh4-nofpu.o          sh2a-or-sh4.o        sh4
-sh4-nofpu.o          sh2a.o               ERROR
 sh4-nofpu.o          sh2e.o               sh4
+sh4-nofpu.o          sh-dsp.o             sh4al-dsp
+sh4-nofpu.o          sh3.o                sh4-nofpu
+sh4-nofpu.o          sh3-nommu.o          sh4-nofpu
 sh4-nofpu.o          sh3-dsp.o            sh4al-dsp
-sh4-nofpu.o          sh3-nommu.o          sh4-nofpu
-sh4-nofpu.o          sh3.o                sh4-nofpu
 sh4-nofpu.o          sh3e.o               sh4
+sh4-nofpu.o          sh4.o                sh4
+sh4-nofpu.o          sh4a.o               sh4a
+sh4-nofpu.o          sh4al-dsp.o          sh4al-dsp
 sh4-nofpu.o          sh4-nofpu.o          sh4-nofpu
 sh4-nofpu.o          sh4-nommu-nofpu.o    sh4-nofpu
-sh4-nofpu.o          sh4.o                sh4
 sh4-nofpu.o          sh4a-nofpu.o         sh4a-nofpu
-sh4-nofpu.o          sh4a.o               sh4a
-sh4-nofpu.o          sh4al-dsp.o          sh4al-dsp
+sh4-nofpu.o          sh2a.o               ERROR
+sh4-nofpu.o          sh2a-nofpu.o         ERROR
+sh4-nofpu.o          sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nofpu
+sh4-nofpu.o          sh2a-nofpu-or-sh3-nommu.o sh4-nofpu
+sh4-nofpu.o          sh2a-or-sh4.o        sh4
+sh4-nofpu.o          sh2a-or-sh3e.o       sh4
+sh4-nofpu.o          st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu
+sh4-nofpu.o          st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+sh4-nofpu.o          st40-300-nofpu.o     st40-300-nofpu
+sh4-nofpu.o          st40-300-or-sh4a.o   st40-300-or-sh4a
+sh4-nofpu.o          st40-300.o           st40-300
 sh4-nofpu.o          sh-unknown.o         sh4-nofpu
-sh4-nommu-nofpu.o    sh-dsp.o             sh4al-dsp
 sh4-nommu-nofpu.o    sh.o                 sh4-nommu-nofpu
 sh4-nommu-nofpu.o    sh2.o                sh4-nommu-nofpu
-sh4-nommu-nofpu.o    sh2a-nofpu-or-sh3-nommu.o sh4-nommu-nofpu
-sh4-nommu-nofpu.o    sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nommu-nofpu
-sh4-nommu-nofpu.o    sh2a-nofpu.o         ERROR
-sh4-nommu-nofpu.o    sh2a-or-sh3e.o       sh4
-sh4-nommu-nofpu.o    sh2a-or-sh4.o        sh4
-sh4-nommu-nofpu.o    sh2a.o               ERROR
 sh4-nommu-nofpu.o    sh2e.o               sh4
+sh4-nommu-nofpu.o    sh-dsp.o             sh4al-dsp
+sh4-nommu-nofpu.o    sh3.o                sh4-nofpu
+sh4-nommu-nofpu.o    sh3-nommu.o          sh4-nommu-nofpu
 sh4-nommu-nofpu.o    sh3-dsp.o            sh4al-dsp
-sh4-nommu-nofpu.o    sh3-nommu.o          sh4-nommu-nofpu
-sh4-nommu-nofpu.o    sh3.o                sh4-nofpu
 sh4-nommu-nofpu.o    sh3e.o               sh4
+sh4-nommu-nofpu.o    sh4.o                sh4
+sh4-nommu-nofpu.o    sh4a.o               sh4a
+sh4-nommu-nofpu.o    sh4al-dsp.o          sh4al-dsp
 sh4-nommu-nofpu.o    sh4-nofpu.o          sh4-nofpu
 sh4-nommu-nofpu.o    sh4-nommu-nofpu.o    sh4-nommu-nofpu
-sh4-nommu-nofpu.o    sh4.o                sh4
 sh4-nommu-nofpu.o    sh4a-nofpu.o         sh4a-nofpu
-sh4-nommu-nofpu.o    sh4a.o               sh4a
-sh4-nommu-nofpu.o    sh4al-dsp.o          sh4al-dsp
+sh4-nommu-nofpu.o    sh2a.o               ERROR
+sh4-nommu-nofpu.o    sh2a-nofpu.o         ERROR
+sh4-nommu-nofpu.o    sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nommu-nofpu
+sh4-nommu-nofpu.o    sh2a-nofpu-or-sh3-nommu.o sh4-nommu-nofpu
+sh4-nommu-nofpu.o    sh2a-or-sh4.o        sh4
+sh4-nommu-nofpu.o    sh2a-or-sh3e.o       sh4
+sh4-nommu-nofpu.o    st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu
+sh4-nommu-nofpu.o    st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+sh4-nommu-nofpu.o    st40-300-nofpu.o     st40-300-nofpu
+sh4-nommu-nofpu.o    st40-300-or-sh4a.o   st40-300-or-sh4a
+sh4-nommu-nofpu.o    st40-300.o           st40-300
 sh4-nommu-nofpu.o    sh-unknown.o         sh4-nommu-nofpu
-sh4.o                sh-dsp.o             ERROR
-sh4.o                sh.o                 sh4
-sh4.o                sh2.o                sh4
-sh4.o                sh2a-nofpu-or-sh3-nommu.o sh4
-sh4.o                sh2a-nofpu-or-sh4-nommu-nofpu.o sh4
-sh4.o                sh2a-nofpu.o         ERROR
-sh4.o                sh2a-or-sh3e.o       sh4
-sh4.o                sh2a-or-sh4.o        sh4
-sh4.o                sh2a.o               ERROR
-sh4.o                sh2e.o               sh4
-sh4.o                sh3-dsp.o            ERROR
-sh4.o                sh3-nommu.o          sh4
-sh4.o                sh3.o                sh4
-sh4.o                sh3e.o               sh4
-sh4.o                sh4-nofpu.o          sh4
-sh4.o                sh4-nommu-nofpu.o    sh4
-sh4.o                sh4.o                sh4
-sh4.o                sh4a-nofpu.o         sh4a
-sh4.o                sh4a.o               sh4a
-sh4.o                sh4al-dsp.o          ERROR
-sh4.o                sh-unknown.o         sh4
-sh4a-nofpu.o         sh-dsp.o             sh4al-dsp
 sh4a-nofpu.o         sh.o                 sh4a-nofpu
 sh4a-nofpu.o         sh2.o                sh4a-nofpu
-sh4a-nofpu.o         sh2a-nofpu-or-sh3-nommu.o sh4a-nofpu
-sh4a-nofpu.o         sh2a-nofpu-or-sh4-nommu-nofpu.o sh4a-nofpu
-sh4a-nofpu.o         sh2a-nofpu.o         ERROR
-sh4a-nofpu.o         sh2a-or-sh3e.o       sh4a
-sh4a-nofpu.o         sh2a-or-sh4.o        sh4a
-sh4a-nofpu.o         sh2a.o               ERROR
 sh4a-nofpu.o         sh2e.o               sh4a
+sh4a-nofpu.o         sh-dsp.o             sh4al-dsp
+sh4a-nofpu.o         sh3.o                sh4a-nofpu
+sh4a-nofpu.o         sh3-nommu.o          sh4a-nofpu
 sh4a-nofpu.o         sh3-dsp.o            sh4al-dsp
-sh4a-nofpu.o         sh3-nommu.o          sh4a-nofpu
-sh4a-nofpu.o         sh3.o                sh4a-nofpu
 sh4a-nofpu.o         sh3e.o               sh4a
+sh4a-nofpu.o         sh4.o                sh4a
+sh4a-nofpu.o         sh4a.o               sh4a
+sh4a-nofpu.o         sh4al-dsp.o          sh4al-dsp
 sh4a-nofpu.o         sh4-nofpu.o          sh4a-nofpu
 sh4a-nofpu.o         sh4-nommu-nofpu.o    sh4a-nofpu
-sh4a-nofpu.o         sh4.o                sh4a
 sh4a-nofpu.o         sh4a-nofpu.o         sh4a-nofpu
-sh4a-nofpu.o         sh4a.o               sh4a
-sh4a-nofpu.o         sh4al-dsp.o          sh4al-dsp
+sh4a-nofpu.o         sh2a.o               ERROR
+sh4a-nofpu.o         sh2a-nofpu.o         ERROR
+sh4a-nofpu.o         sh2a-nofpu-or-sh4-nommu-nofpu.o sh4a-nofpu
+sh4a-nofpu.o         sh2a-nofpu-or-sh3-nommu.o sh4a-nofpu
+sh4a-nofpu.o         sh2a-or-sh4.o        sh4a
+sh4a-nofpu.o         sh2a-or-sh3e.o       sh4a
+sh4a-nofpu.o         st40-300-nofpu-or-sh2a-nofpu.o ERROR
+sh4a-nofpu.o         st40-300-nofpu-or-sh4a-nofpu.o sh4a-nofpu
+sh4a-nofpu.o         st40-300-nofpu.o     ERROR
+sh4a-nofpu.o         st40-300-or-sh4a.o   sh4a
+sh4a-nofpu.o         st40-300.o           ERROR
 sh4a-nofpu.o         sh-unknown.o         sh4a-nofpu
-sh4a.o               sh-dsp.o             ERROR
-sh4a.o               sh.o                 sh4a
-sh4a.o               sh2.o                sh4a
-sh4a.o               sh2a-nofpu-or-sh3-nommu.o sh4a
-sh4a.o               sh2a-nofpu-or-sh4-nommu-nofpu.o sh4a
-sh4a.o               sh2a-nofpu.o         ERROR
-sh4a.o               sh2a-or-sh3e.o       sh4a
-sh4a.o               sh2a-or-sh4.o        sh4a
-sh4a.o               sh2a.o               ERROR
-sh4a.o               sh2e.o               sh4a
-sh4a.o               sh3-dsp.o            ERROR
-sh4a.o               sh3-nommu.o          sh4a
-sh4a.o               sh3.o                sh4a
-sh4a.o               sh3e.o               sh4a
-sh4a.o               sh4-nofpu.o          sh4a
-sh4a.o               sh4-nommu-nofpu.o    sh4a
-sh4a.o               sh4.o                sh4a
-sh4a.o               sh4a-nofpu.o         sh4a
-sh4a.o               sh4a.o               sh4a
-sh4a.o               sh4al-dsp.o          ERROR
-sh4a.o               sh-unknown.o         sh4a
-sh4al-dsp.o          sh-dsp.o             sh4al-dsp
-sh4al-dsp.o          sh.o                 sh4al-dsp
-sh4al-dsp.o          sh2.o                sh4al-dsp
-sh4al-dsp.o          sh2a-nofpu-or-sh3-nommu.o sh4al-dsp
-sh4al-dsp.o          sh2a-nofpu-or-sh4-nommu-nofpu.o sh4al-dsp
-sh4al-dsp.o          sh2a-nofpu.o         ERROR
-sh4al-dsp.o          sh2a-or-sh3e.o       ERROR
-sh4al-dsp.o          sh2a-or-sh4.o        ERROR
-sh4al-dsp.o          sh2a.o               ERROR
-sh4al-dsp.o          sh2e.o               ERROR
-sh4al-dsp.o          sh3-dsp.o            sh4al-dsp
-sh4al-dsp.o          sh3-nommu.o          sh4al-dsp
-sh4al-dsp.o          sh3.o                sh4al-dsp
-sh4al-dsp.o          sh3e.o               ERROR
-sh4al-dsp.o          sh4-nofpu.o          sh4al-dsp
-sh4al-dsp.o          sh4-nommu-nofpu.o    sh4al-dsp
-sh4al-dsp.o          sh4.o                ERROR
-sh4al-dsp.o          sh4a-nofpu.o         sh4al-dsp
-sh4al-dsp.o          sh4a.o               ERROR
-sh4al-dsp.o          sh4al-dsp.o          sh4al-dsp
-sh4al-dsp.o          sh-unknown.o         sh4al-dsp
-sh-unknown.o         sh-dsp.o             sh-dsp
+sh2a.o               sh.o                 sh2a
+sh2a.o               sh2.o                sh2a
+sh2a.o               sh2e.o               sh2a
+sh2a.o               sh-dsp.o             ERROR
+sh2a.o               sh3.o                ERROR
+sh2a.o               sh3-nommu.o          ERROR
+sh2a.o               sh3-dsp.o            ERROR
+sh2a.o               sh3e.o               ERROR
+sh2a.o               sh4.o                ERROR
+sh2a.o               sh4a.o               ERROR
+sh2a.o               sh4al-dsp.o          ERROR
+sh2a.o               sh4-nofpu.o          ERROR
+sh2a.o               sh4-nommu-nofpu.o    ERROR
+sh2a.o               sh4a-nofpu.o         ERROR
+sh2a.o               sh2a.o               sh2a
+sh2a.o               sh2a-nofpu.o         sh2a
+sh2a.o               sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a
+sh2a.o               sh2a-nofpu-or-sh3-nommu.o sh2a
+sh2a.o               sh2a-or-sh4.o        sh2a
+sh2a.o               sh2a-or-sh3e.o       sh2a
+sh2a.o               st40-300-nofpu-or-sh2a-nofpu.o sh2a
+sh2a.o               st40-300-nofpu-or-sh4a-nofpu.o ERROR
+sh2a.o               st40-300-nofpu.o     ERROR
+sh2a.o               st40-300-or-sh4a.o   ERROR
+sh2a.o               st40-300.o           ERROR
+sh2a.o               sh-unknown.o         sh2a
+sh2a-nofpu.o         sh.o                 sh2a-nofpu
+sh2a-nofpu.o         sh2.o                sh2a-nofpu
+sh2a-nofpu.o         sh2e.o               sh2a
+sh2a-nofpu.o         sh-dsp.o             ERROR
+sh2a-nofpu.o         sh3.o                ERROR
+sh2a-nofpu.o         sh3-nommu.o          ERROR
+sh2a-nofpu.o         sh3-dsp.o            ERROR
+sh2a-nofpu.o         sh3e.o               ERROR
+sh2a-nofpu.o         sh4.o                ERROR
+sh2a-nofpu.o         sh4a.o               ERROR
+sh2a-nofpu.o         sh4al-dsp.o          ERROR
+sh2a-nofpu.o         sh4-nofpu.o          ERROR
+sh2a-nofpu.o         sh4-nommu-nofpu.o    ERROR
+sh2a-nofpu.o         sh4a-nofpu.o         ERROR
+sh2a-nofpu.o         sh2a.o               sh2a
+sh2a-nofpu.o         sh2a-nofpu.o         sh2a-nofpu
+sh2a-nofpu.o         sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu
+sh2a-nofpu.o         sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu
+sh2a-nofpu.o         sh2a-or-sh4.o        sh2a
+sh2a-nofpu.o         sh2a-or-sh3e.o       sh2a
+sh2a-nofpu.o         st40-300-nofpu-or-sh2a-nofpu.o sh2a-nofpu
+sh2a-nofpu.o         st40-300-nofpu-or-sh4a-nofpu.o ERROR
+sh2a-nofpu.o         st40-300-nofpu.o     ERROR
+sh2a-nofpu.o         st40-300-or-sh4a.o   ERROR
+sh2a-nofpu.o         st40-300.o           ERROR
+sh2a-nofpu.o         sh-unknown.o         sh2a-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh.o                 sh2a-nofpu-or-sh4-nommu-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh2.o                sh2a-nofpu-or-sh4-nommu-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh2e.o               sh2a-or-sh4
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh-dsp.o             sh4al-dsp
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh3.o                sh4-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh3-nommu.o          sh4-nommu-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh3-dsp.o            sh4al-dsp
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh3e.o               sh4
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh4.o                sh4
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh4a.o               sh4a
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh4al-dsp.o          sh4al-dsp
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nofpu.o          sh4-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh4-nommu-nofpu.o    sh4-nommu-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh4a-nofpu.o         sh4a-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a.o               sh2a
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu.o         sh2a-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh4-nommu-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-or-sh4.o        sh2a-or-sh4
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-or-sh3e.o       sh2a-or-sh4
+sh2a-nofpu-or-sh4-nommu-nofpu.o st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu-or-sh2a-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o st40-300-nofpu.o     st40-300-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.o st40-300-or-sh4a.o   st40-300-or-sh4a
+sh2a-nofpu-or-sh4-nommu-nofpu.o st40-300.o           st40-300
+sh2a-nofpu-or-sh4-nommu-nofpu.o sh-unknown.o         sh2a-nofpu-or-sh4-nommu-nofpu
+sh2a-nofpu-or-sh3-nommu.o sh.o                 sh2a-nofpu-or-sh3-nommu
+sh2a-nofpu-or-sh3-nommu.o sh2.o                sh2a-nofpu-or-sh3-nommu
+sh2a-nofpu-or-sh3-nommu.o sh2e.o               sh2a-or-sh3e
+sh2a-nofpu-or-sh3-nommu.o sh-dsp.o             sh3-dsp
+sh2a-nofpu-or-sh3-nommu.o sh3.o                sh3
+sh2a-nofpu-or-sh3-nommu.o sh3-nommu.o          sh3-nommu
+sh2a-nofpu-or-sh3-nommu.o sh3-dsp.o            sh3-dsp
+sh2a-nofpu-or-sh3-nommu.o sh3e.o               sh3e
+sh2a-nofpu-or-sh3-nommu.o sh4.o                sh4
+sh2a-nofpu-or-sh3-nommu.o sh4a.o               sh4a
+sh2a-nofpu-or-sh3-nommu.o sh4al-dsp.o          sh4al-dsp
+sh2a-nofpu-or-sh3-nommu.o sh4-nofpu.o          sh4-nofpu
+sh2a-nofpu-or-sh3-nommu.o sh4-nommu-nofpu.o    sh4-nommu-nofpu
+sh2a-nofpu-or-sh3-nommu.o sh4a-nofpu.o         sh4a-nofpu
+sh2a-nofpu-or-sh3-nommu.o sh2a.o               sh2a
+sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu.o         sh2a-nofpu
+sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu
+sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh3-nommu
+sh2a-nofpu-or-sh3-nommu.o sh2a-or-sh4.o        sh2a-or-sh4
+sh2a-nofpu-or-sh3-nommu.o sh2a-or-sh3e.o       sh2a-or-sh3e
+sh2a-nofpu-or-sh3-nommu.o st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu-or-sh2a-nofpu
+sh2a-nofpu-or-sh3-nommu.o st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+sh2a-nofpu-or-sh3-nommu.o st40-300-nofpu.o     st40-300-nofpu
+sh2a-nofpu-or-sh3-nommu.o st40-300-or-sh4a.o   st40-300-or-sh4a
+sh2a-nofpu-or-sh3-nommu.o st40-300.o           st40-300
+sh2a-nofpu-or-sh3-nommu.o sh-unknown.o         sh2a-nofpu-or-sh3-nommu
+sh2a-or-sh4.o        sh.o                 sh2a-or-sh4
+sh2a-or-sh4.o        sh2.o                sh2a-or-sh4
+sh2a-or-sh4.o        sh2e.o               sh2a-or-sh4
+sh2a-or-sh4.o        sh-dsp.o             ERROR
+sh2a-or-sh4.o        sh3.o                sh4
+sh2a-or-sh4.o        sh3-nommu.o          sh4
+sh2a-or-sh4.o        sh3-dsp.o            ERROR
+sh2a-or-sh4.o        sh3e.o               sh4
+sh2a-or-sh4.o        sh4.o                sh4
+sh2a-or-sh4.o        sh4a.o               sh4a
+sh2a-or-sh4.o        sh4al-dsp.o          ERROR
+sh2a-or-sh4.o        sh4-nofpu.o          sh4
+sh2a-or-sh4.o        sh4-nommu-nofpu.o    sh4
+sh2a-or-sh4.o        sh4a-nofpu.o         sh4a
+sh2a-or-sh4.o        sh2a.o               sh2a
+sh2a-or-sh4.o        sh2a-nofpu.o         sh2a
+sh2a-or-sh4.o        sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-or-sh4
+sh2a-or-sh4.o        sh2a-nofpu-or-sh3-nommu.o sh2a-or-sh4
+sh2a-or-sh4.o        sh2a-or-sh4.o        sh2a-or-sh4
+sh2a-or-sh4.o        sh2a-or-sh3e.o       sh2a-or-sh4
+sh2a-or-sh4.o        st40-300-nofpu-or-sh2a-nofpu.o st40-300
+sh2a-or-sh4.o        st40-300-nofpu-or-sh4a-nofpu.o st40-300-or-sh4a
+sh2a-or-sh4.o        st40-300-nofpu.o     st40-300
+sh2a-or-sh4.o        st40-300-or-sh4a.o   st40-300-or-sh4a
+sh2a-or-sh4.o        st40-300.o           st40-300
+sh2a-or-sh4.o        sh-unknown.o         sh2a-or-sh4
+sh2a-or-sh3e.o       sh.o                 sh2a-or-sh3e
+sh2a-or-sh3e.o       sh2.o                sh2a-or-sh3e
+sh2a-or-sh3e.o       sh2e.o               sh2a-or-sh3e
+sh2a-or-sh3e.o       sh-dsp.o             ERROR
+sh2a-or-sh3e.o       sh3.o                sh3e
+sh2a-or-sh3e.o       sh3-nommu.o          sh3e
+sh2a-or-sh3e.o       sh3-dsp.o            ERROR
+sh2a-or-sh3e.o       sh3e.o               sh3e
+sh2a-or-sh3e.o       sh4.o                sh4
+sh2a-or-sh3e.o       sh4a.o               sh4a
+sh2a-or-sh3e.o       sh4al-dsp.o          ERROR
+sh2a-or-sh3e.o       sh4-nofpu.o          sh4
+sh2a-or-sh3e.o       sh4-nommu-nofpu.o    sh4
+sh2a-or-sh3e.o       sh4a-nofpu.o         sh4a
+sh2a-or-sh3e.o       sh2a.o               sh2a
+sh2a-or-sh3e.o       sh2a-nofpu.o         sh2a
+sh2a-or-sh3e.o       sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-or-sh4
+sh2a-or-sh3e.o       sh2a-nofpu-or-sh3-nommu.o sh2a-or-sh3e
+sh2a-or-sh3e.o       sh2a-or-sh4.o        sh2a-or-sh4
+sh2a-or-sh3e.o       sh2a-or-sh3e.o       sh2a-or-sh3e
+sh2a-or-sh3e.o       st40-300-nofpu-or-sh2a-nofpu.o st40-300
+sh2a-or-sh3e.o       st40-300-nofpu-or-sh4a-nofpu.o st40-300-or-sh4a
+sh2a-or-sh3e.o       st40-300-nofpu.o     st40-300
+sh2a-or-sh3e.o       st40-300-or-sh4a.o   st40-300-or-sh4a
+sh2a-or-sh3e.o       st40-300.o           st40-300
+sh2a-or-sh3e.o       sh-unknown.o         sh2a-or-sh3e
+st40-300-nofpu-or-sh2a-nofpu.o sh.o                 st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o sh2.o                st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o sh2e.o               st40-300
+st40-300-nofpu-or-sh2a-nofpu.o sh-dsp.o             ERROR
+st40-300-nofpu-or-sh2a-nofpu.o sh3.o                st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o sh3-nommu.o          st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o sh3-dsp.o            ERROR
+st40-300-nofpu-or-sh2a-nofpu.o sh3e.o               st40-300
+st40-300-nofpu-or-sh2a-nofpu.o sh4.o                st40-300
+st40-300-nofpu-or-sh2a-nofpu.o sh4a.o               ERROR
+st40-300-nofpu-or-sh2a-nofpu.o sh4al-dsp.o          ERROR
+st40-300-nofpu-or-sh2a-nofpu.o sh4-nofpu.o          st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o sh4-nommu-nofpu.o    st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o sh4a-nofpu.o         ERROR
+st40-300-nofpu-or-sh2a-nofpu.o sh2a.o               sh2a
+st40-300-nofpu-or-sh2a-nofpu.o sh2a-nofpu.o         sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu.o st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o sh2a-nofpu-or-sh3-nommu.o st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o sh2a-or-sh4.o        st40-300
+st40-300-nofpu-or-sh2a-nofpu.o sh2a-or-sh3e.o       st40-300
+st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu.o     st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.o st40-300-or-sh4a.o   st40-300
+st40-300-nofpu-or-sh2a-nofpu.o st40-300.o           st40-300
+st40-300-nofpu-or-sh2a-nofpu.o sh-unknown.o         st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o sh.o                 st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o sh2.o                st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o sh2e.o               st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.o sh-dsp.o             sh4al-dsp
+st40-300-nofpu-or-sh4a-nofpu.o sh3.o                st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o sh3-nommu.o          st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o sh3-dsp.o            sh4al-dsp
+st40-300-nofpu-or-sh4a-nofpu.o sh3e.o               st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.o sh4.o                st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.o sh4a.o               sh4a
+st40-300-nofpu-or-sh4a-nofpu.o sh4al-dsp.o          sh4al-dsp
+st40-300-nofpu-or-sh4a-nofpu.o sh4-nofpu.o          st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o sh4-nommu-nofpu.o    st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o sh4a-nofpu.o         sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o sh2a.o               ERROR
+st40-300-nofpu-or-sh4a-nofpu.o sh2a-nofpu.o         ERROR
+st40-300-nofpu-or-sh4a-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o sh2a-nofpu-or-sh3-nommu.o st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o sh2a-or-sh4.o        st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.o sh2a-or-sh3e.o       st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu.o     st40-300-nofpu
+st40-300-nofpu-or-sh4a-nofpu.o st40-300-or-sh4a.o   st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.o st40-300.o           st40-300
+st40-300-nofpu-or-sh4a-nofpu.o sh-unknown.o         st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu.o     sh.o                 st40-300-nofpu
+st40-300-nofpu.o     sh2.o                st40-300-nofpu
+st40-300-nofpu.o     sh2e.o               st40-300
+st40-300-nofpu.o     sh-dsp.o             ERROR
+st40-300-nofpu.o     sh3.o                st40-300-nofpu
+st40-300-nofpu.o     sh3-nommu.o          st40-300-nofpu
+st40-300-nofpu.o     sh3-dsp.o            ERROR
+st40-300-nofpu.o     sh3e.o               st40-300
+st40-300-nofpu.o     sh4.o                st40-300
+st40-300-nofpu.o     sh4a.o               ERROR
+st40-300-nofpu.o     sh4al-dsp.o          ERROR
+st40-300-nofpu.o     sh4-nofpu.o          st40-300-nofpu
+st40-300-nofpu.o     sh4-nommu-nofpu.o    st40-300-nofpu
+st40-300-nofpu.o     sh4a-nofpu.o         ERROR
+st40-300-nofpu.o     sh2a.o               ERROR
+st40-300-nofpu.o     sh2a-nofpu.o         ERROR
+st40-300-nofpu.o     sh2a-nofpu-or-sh4-nommu-nofpu.o st40-300-nofpu
+st40-300-nofpu.o     sh2a-nofpu-or-sh3-nommu.o st40-300-nofpu
+st40-300-nofpu.o     sh2a-or-sh4.o        st40-300
+st40-300-nofpu.o     sh2a-or-sh3e.o       st40-300
+st40-300-nofpu.o     st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu
+st40-300-nofpu.o     st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu
+st40-300-nofpu.o     st40-300-nofpu.o     st40-300-nofpu
+st40-300-nofpu.o     st40-300-or-sh4a.o   st40-300
+st40-300-nofpu.o     st40-300.o           st40-300
+st40-300-nofpu.o     sh-unknown.o         st40-300-nofpu
+st40-300-or-sh4a.o   sh.o                 st40-300-or-sh4a
+st40-300-or-sh4a.o   sh2.o                st40-300-or-sh4a
+st40-300-or-sh4a.o   sh2e.o               st40-300-or-sh4a
+st40-300-or-sh4a.o   sh-dsp.o             ERROR
+st40-300-or-sh4a.o   sh3.o                st40-300-or-sh4a
+st40-300-or-sh4a.o   sh3-nommu.o          st40-300-or-sh4a
+st40-300-or-sh4a.o   sh3-dsp.o            ERROR
+st40-300-or-sh4a.o   sh3e.o               st40-300-or-sh4a
+st40-300-or-sh4a.o   sh4.o                st40-300-or-sh4a
+st40-300-or-sh4a.o   sh4a.o               sh4a
+st40-300-or-sh4a.o   sh4al-dsp.o          ERROR
+st40-300-or-sh4a.o   sh4-nofpu.o          st40-300-or-sh4a
+st40-300-or-sh4a.o   sh4-nommu-nofpu.o    st40-300-or-sh4a
+st40-300-or-sh4a.o   sh4a-nofpu.o         sh4a
+st40-300-or-sh4a.o   sh2a.o               ERROR
+st40-300-or-sh4a.o   sh2a-nofpu.o         ERROR
+st40-300-or-sh4a.o   sh2a-nofpu-or-sh4-nommu-nofpu.o st40-300-or-sh4a
+st40-300-or-sh4a.o   sh2a-nofpu-or-sh3-nommu.o st40-300-or-sh4a
+st40-300-or-sh4a.o   sh2a-or-sh4.o        st40-300-or-sh4a
+st40-300-or-sh4a.o   sh2a-or-sh3e.o       st40-300-or-sh4a
+st40-300-or-sh4a.o   st40-300-nofpu-or-sh2a-nofpu.o st40-300
+st40-300-or-sh4a.o   st40-300-nofpu-or-sh4a-nofpu.o st40-300-or-sh4a
+st40-300-or-sh4a.o   st40-300-nofpu.o     st40-300
+st40-300-or-sh4a.o   st40-300-or-sh4a.o   st40-300-or-sh4a
+st40-300-or-sh4a.o   st40-300.o           st40-300
+st40-300-or-sh4a.o   sh-unknown.o         st40-300-or-sh4a
+st40-300.o           sh.o                 st40-300
+st40-300.o           sh2.o                st40-300
+st40-300.o           sh2e.o               st40-300
+st40-300.o           sh-dsp.o             ERROR
+st40-300.o           sh3.o                st40-300
+st40-300.o           sh3-nommu.o          st40-300
+st40-300.o           sh3-dsp.o            ERROR
+st40-300.o           sh3e.o               st40-300
+st40-300.o           sh4.o                st40-300
+st40-300.o           sh4a.o               ERROR
+st40-300.o           sh4al-dsp.o          ERROR
+st40-300.o           sh4-nofpu.o          st40-300
+st40-300.o           sh4-nommu-nofpu.o    st40-300
+st40-300.o           sh4a-nofpu.o         ERROR
+st40-300.o           sh2a.o               ERROR
+st40-300.o           sh2a-nofpu.o         ERROR
+st40-300.o           sh2a-nofpu-or-sh4-nommu-nofpu.o st40-300
+st40-300.o           sh2a-nofpu-or-sh3-nommu.o st40-300
+st40-300.o           sh2a-or-sh4.o        st40-300
+st40-300.o           sh2a-or-sh3e.o       st40-300
+st40-300.o           st40-300-nofpu-or-sh2a-nofpu.o st40-300
+st40-300.o           st40-300-nofpu-or-sh4a-nofpu.o st40-300
+st40-300.o           st40-300-nofpu.o     st40-300
+st40-300.o           st40-300-or-sh4a.o   st40-300
+st40-300.o           st40-300.o           st40-300
+st40-300.o           sh-unknown.o         st40-300
 sh-unknown.o         sh.o                 sh
 sh-unknown.o         sh2.o                sh2
-sh-unknown.o         sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh3-nommu
-sh-unknown.o         sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu
-sh-unknown.o         sh2a-nofpu.o         sh2a-nofpu
-sh-unknown.o         sh2a-or-sh3e.o       sh2a-or-sh3e
-sh-unknown.o         sh2a-or-sh4.o        sh2a-or-sh4
-sh-unknown.o         sh2a.o               sh2a
 sh-unknown.o         sh2e.o               sh2e
+sh-unknown.o         sh-dsp.o             sh-dsp
+sh-unknown.o         sh3.o                sh3
+sh-unknown.o         sh3-nommu.o          sh3-nommu
 sh-unknown.o         sh3-dsp.o            sh3-dsp
-sh-unknown.o         sh3-nommu.o          sh3-nommu
-sh-unknown.o         sh3.o                sh3
 sh-unknown.o         sh3e.o               sh3e
+sh-unknown.o         sh4.o                sh4
+sh-unknown.o         sh4a.o               sh4a
+sh-unknown.o         sh4al-dsp.o          sh4al-dsp
 sh-unknown.o         sh4-nofpu.o          sh4-nofpu
 sh-unknown.o         sh4-nommu-nofpu.o    sh4-nommu-nofpu
-sh-unknown.o         sh4.o                sh4
 sh-unknown.o         sh4a-nofpu.o         sh4a-nofpu
-sh-unknown.o         sh4a.o               sh4a
-sh-unknown.o         sh4al-dsp.o          sh4al-dsp
+sh-unknown.o         sh2a.o               sh2a
+sh-unknown.o         sh2a-nofpu.o         sh2a-nofpu
+sh-unknown.o         sh2a-nofpu-or-sh4-nommu-nofpu.o sh2a-nofpu-or-sh4-nommu-nofpu
+sh-unknown.o         sh2a-nofpu-or-sh3-nommu.o sh2a-nofpu-or-sh3-nommu
+sh-unknown.o         sh2a-or-sh4.o        sh2a-or-sh4
+sh-unknown.o         sh2a-or-sh3e.o       sh2a-or-sh3e
+sh-unknown.o         st40-300-nofpu-or-sh2a-nofpu.o st40-300-nofpu-or-sh2a-nofpu
+sh-unknown.o         st40-300-nofpu-or-sh4a-nofpu.o st40-300-nofpu-or-sh4a-nofpu
+sh-unknown.o         st40-300-nofpu.o     st40-300-nofpu
+sh-unknown.o         st40-300-or-sh4a.o   st40-300-or-sh4a
+sh-unknown.o         st40-300.o           st40-300
 sh-unknown.o         sh-unknown.o         sh
Index: binutils/ld/testsuite/ld-sh/rrelax-c.s
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/rrelax-c.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/ld/testsuite/ld-sh/rrelax-c.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,26 @@
+	.file	"c.c"
+	.text
+	.align 1
+	.align 2
+	.global	_func_c
+	.type	_func_c, @function
+_func_c:
+	tst	r4,r4
+	bf/s	.L2
+	mov	#111,r1
+	mov	#121,r1
+.L2:
+	mov.l	.L6,r2
+.L5:
+	mov.l	.L7,r0
+	.uses .L5
+	jmp	@r0
+	mov.l	r1,@r2
+.L8:
+	.align 2
+.L6:
+	.long	_c
+.L7:
+	.long	_func_b
+	.size	_func_c, .-_func_c
+	.ident	"GCC: (STMicroelectronics Base) 4.6.3 20120330"
Index: binutils/ld/testsuite/ld-sh/sub2l.s
===================================================================
--- binutils.orig/ld/testsuite/ld-sh/sub2l.s	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/testsuite/ld-sh/sub2l.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,5 +1,4 @@
 ! "The subtraction of two symbols".
- .little
  .text
  .align 5
 f:
Index: binutils/ld/ChangeLog.st40
===================================================================
--- binutils.orig/ld/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/ld/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,94 @@
+2013-06-05  Christian Bruel <christian.bruel@st.com>
+
+	* scripttempl/elf.sc (.post_text_reserve, .post_rodata_reserve): Don't create symbols for -shared.
+
+2012-10-11  Laurent Alfonsi  <laurent.alfonsi@st.com>
+
+	* plugin.c (add_symbols): Detect wrap symbols.
+
+2012-02-06  Laurent Alfonsi  <laurent.alfonsi@st.com>
+
+	* ldlang.c (lang_size_sections_1): Various relaxation fixes
+
+2010-06-18  Antony King  <antony.king@st.com>
+
+	* emultempl/shelf.em: (shelf_before_parse). Define and override
+	init/fini.
+
+2010-06-02  Christian Bruel <christian.bruel@st.com>
+
+	* emulparams/shelf_linux.sh (EXTRA_EM_FILE): Define.
+	* emulparams/superh.sh: Likewise.
+	* emultempl/elf32.em: Cleanup db-page-bug flag.
+	* emultempl/shelf.em: New file.
+
+2009-09-29  Yvan Roux  <yvan.roux@st.com>
+	    Christian Bruel <christian.bruel@st.com>
+
+	* scripttempl/elf.sc (.text): Group unlikely sections together.
+
+2009-07-07  Yvan Roux  <yvan.roux@st.com>
+
+	* ldlang.c (lang_size_sections_1): Update output offsets after
+	relaxation.
+
+2009-15-05  Christian Bruel  <christian.bruel@st.com>
+
+	* emultempl/elf32.em (db-page-bug): New option
+	(sh_hw_wa): Define.
+
+2009-01-19  David Cook  <david.cook@st.com>
+
+	* emulparams/superh.sh (OTHER_SECTIONS): Add assertion checking to
+	prevent the location of _stack overlapping code/data sections.
+
+2008-10-03  Antony King  <antony.king@st.com>
+
+	Fix INSbl29365:
+	* emulparams/superh.sh (ADD_RTOS_CTOR_DTOR): Add.
+	(RTOS_CTOR_START, RTOS_CTOR_END): Likewise.
+	(RTOS_DTOR_START, RTOS_DTOR_END): Likewise.
+	* scripttempl/elf.sc (ADD_RTOS_CTOR_DTOR): Add support for
+	.rtos.ctors and	.rtos.dtors sections.
+
+2007-01-24  David Cook  <david.cook@st.com>
+
+	* emulparams/superh.sh (REQUIRE_EDATA_AND_END_ALIGNED): Add.
+
+	Fix INSbl26839:
+	* scripttempl/elf.sc (_edata, _end): Ensure proper alignment.
+
+2006-12-14  David Cook  <david.cook@st.com>
+
+	* emulparams/superh.sh (REQUIRE_REGION_MARKER_SYMBOLS): Add.
+	* scripttempl/elf.sc (__stext, __etext, __srodata, __srodata): Ensure
+	these region markers are present.
+
+2006-09-11  David Cook  <david.cook@st.com>
+
+	* scripttempl/elf.sc (.stack, .preinit_array): Remove use of ABSOLUTE.
+	(.init_array, .fini_array): Likewise.
+
+2006-09-05  David Cook  <david.cook@st.com>
+
+	* emulparams/superh.sh (CTOR_START, CTOR_END): Remove use of ABSOLUTE.
+	(DTOR_START, DTOR_END): Likewise.
+
+	Fix INSbl23612:
+	(.stack): Remove use of ABSOLUTE. Remove content from section.
+
+2006-07-05  David Cook  <david.cook@st.com>
+
+	* emulparams/superh.sh (TEXT_START_ADDR): When _start is not defined, use a
+	start address of 0x1000.
+	* scripttempl/elf.sc: Make linker scripts much more flexible and support
+	Cyptocore out-of-the-box.
+
+2006-01-19  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* Makefile.am (ALL_EMULATIONS): Add esuperh.o .
+	(esuperh.c): New target.
+	* Makefile.in: Regenerate.
+	* configure.tgt: Add sh-superh-elf.
+	* emulparams/superh.sh: New file.
+
Index: binutils/ld/configure
===================================================================
--- binutils.orig/ld/configure	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/configure	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -640,6 +640,7 @@ LIBINTL_DEP
 LIBINTL
 USE_NLS
 CXXCPP
+SIM
 OTOOL64
 OTOOL
 LIPO
Index: binutils/ld/ldlang.c
===================================================================
--- binutils.orig/ld/ldlang.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/ldlang.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -45,6 +45,7 @@
 #ifdef ENABLE_PLUGINS
 #include "plugin.h"
 #endif /* ENABLE_PLUGINS */
+#include <assert.h>
 
 #ifndef offsetof
 #define offsetof(TYPE, MEMBER) ((size_t) & (((TYPE*) 0)->MEMBER))
@@ -4588,7 +4589,6 @@ size_input_section
 	}
 
       /* Remember where in the output section this input section goes.  */
-
       i->output_offset = dot - o->vma;
 
       /* Mark how big the output section must be to contain this now.  */
@@ -5163,10 +5163,34 @@ lang_size_sections_1
 	      {
 		bfd_boolean again;
 
+		/* before calling the relaxation, update the section with the up-to-date dot */
+		if ((dot-output_section_statement->bfd_section->vma) != link_info.relro_start)
+		{
+		   i->output_offset = align_power(dot - output_section_statement->bfd_section->vma, i->alignment_power);
+		}
+		
 		if (! bfd_relax_section (i->owner, i, &link_info, &again))
 		  einfo (_("%P%F: can't relax section: %E\n"));
 		if (again)
-		  *relax = TRUE;
+		  {
+		    /* Propagate size reduction.  */
+		    lang_statement_union_type *saved_prev = *prev;
+		    lang_size_sections_1 (prev, output_section_statement,
+		    			  fill, dot, NULL, FALSE);
+		    /* The previous relaxation call might have insert a 
+		       lang_padding_statement_enum right before the current 
+		       lang_input_section_enum. This might have altered the *prev
+		       value. We need to save/restore the (*prev) pointer.
+		    */
+		    if ((*prev)->header.type != lang_input_section_enum)
+		    {
+		      if (((*prev)->header.type != lang_padding_statement_enum) || 
+		    	   (*prev)->header.next != saved_prev)
+		    	assert(0 && "Fix for libstdc++-v3/ext_b should not be sufficient");
+		    }
+		    *prev = saved_prev;
+		    *relax = TRUE;
+		  }
 	      }
 	    dot = size_input_section (prev, output_section_statement,
 				      output_section_statement->fill, dot);
@@ -7045,6 +7069,14 @@ lang_add_output_format (const char *format,
 
       output_target = format;
     }
+
+  /* DF: Temporary fix for segfault in testsuite: 
+     disable -relax when output format is srec for ST40 architecture */
+  if ((ldfile_output_architecture == bfd_arch_sh) && 
+      (output_target != NULL) && (strcmp (output_target, "srec") == 0)) {
+      /* disable relaxation */
+      DISABLE_RELAXATION;
+  }
 }
 
 void
Index: binutils/ld/ldlex.c
===================================================================
--- binutils.orig/ld/ldlex.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/ldlex.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,5 +1,5 @@
 
-#line 3 "ldlex.c"
+#line 3 "/home/compwork/ferranti/svn-binutils/gbu/branches/sync-st40-2.23.1/ld/ldlex.c"
 
 #define  YY_INT_ALIGNED short int
 
@@ -1714,7 +1714,7 @@ int yywrap (void) { return 1; }
 
 
 
-#line 1718 "ldlex.c"
+#line 1718 "/home/compwork/ferranti/svn-binutils/gbu/branches/sync-st40-2.23.1/ld/ldlex.c"
 
 #define INITIAL 0
 #define SCRIPT 1
@@ -1820,7 +1820,7 @@ static int input (void );
 	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
 		{ \
 		int c = '*'; \
-		yy_size_t n; \
+		int n; \
 		for ( n = 0; n < max_size && \
 			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
 			buf[n] = (char) c; \
@@ -1921,7 +1921,7 @@ YY_DECL
 	}
     }
 
-#line 1925 "ldlex.c"
+#line 1925 "/home/compwork/ferranti/svn-binutils/gbu/branches/sync-st40-2.23.1/ld/ldlex.c"
 
 	if ( !(yy_init) )
 		{
@@ -3108,7 +3108,7 @@ YY_RULE_SETUP
 #line 468 "ldlex.l"
 ECHO;
 	YY_BREAK
-#line 3112 "ldlex.c"
+#line 3112 "/home/compwork/ferranti/svn-binutils/gbu/branches/sync-st40-2.23.1/ld/ldlex.c"
 
 	case YY_END_OF_BUFFER:
 		{
Index: binutils/ld/scripttempl/elf.sc
===================================================================
--- binutils.orig/ld/scripttempl/elf.sc	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/scripttempl/elf.sc	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -64,6 +64,23 @@
 #	RODATA_NAME, SDATA_NAME, SBSS_NAME, BSS_NAME - base parts of names
 #		for standard sections, without initial "." or suffixes.
 #
+# The ST40 Micro Toolset added these:
+#	ADD_POST_TEXT_RESERVE - whether to add a .post_text_reserve section.
+#	ADD_POST_RODATA_RESERVE - whether to add a .post_rodata_reserve section.
+#	ADD_RTOS_CTOR_DTOR - whether to add .rtos.ctors and .rtos.dtors sections
+#	REORDER_TEXT_PLT_AND_INIT - whether to re-order text sections to .text,
+#		.plt, .init, .fini, or stick to the original ordering.
+#	REQUIRE_EDATA_AND_END_ALIGNED - whether an ALIGN directive should be
+#		used to force the _edata and _end symbols to be word aligned.
+#	REQUIRE_REGION_MARKER_SYMBOLS - ensure that the symbols  __stext,
+#		__etext, __srodata and __erodata are set.
+#	SUPPORT_SEPARATED_RWDATA - whether to support separating read-write data
+#		from what came before by setting the _start_rwdata symbol.
+#	BSS_LMA_EQUALS_VMA - force the LMA of the BSS sections to match the VMA
+#		even when SUPPORT_SEPARATED_RWDATA is set (this prevents the BSS
+#		getting in the way of any sections that might want an LMA in
+#		ROM immediately after the last loadable section before the BSS).
+#
 # When adding sections, do note that the names of some sections are used
 # when specifying the start address of the next.
 #
@@ -100,6 +117,60 @@ else
   FILL=
 fi
 
+# We use a temporary file to store a number for our .src_addr<x> variables
+# which are used in creating run-from-ROM, data in RAM, executables without
+# needing a MEMORY command to create memory regions into which sections would
+# need to be placed.  The LMA will be the address in ROM specified by AT() and
+# the VMA will be the address in RAM specified after the section name and
+# tracked by the value of ".".
+echo 0 > srcAddrLineNum$$
+
+# Function to create a new, initialised .src_addr<x> variable.
+srcaddrline() {
+  if test "$SUPPORT_SEPARATED_RWDATA" = "yes" && test -n "$RELOCATING" && test -z "$CREATE_SHLIB"; then
+    srcAddrLineNum=`cat srcAddrLineNum$$`
+    srcAddrLineNum=`echo $srcAddrLineNum + 1 | bc`
+    echo $srcAddrLineNum > srcAddrLineNum$$
+    echo ".src_addr${srcAddrLineNum} = (.end_ro_sections == .start_rwdata ? . : .end_ro_sections + (. - .start_rwdata));"
+  fi
+}
+
+# Function to make a reference to the current .src_addr<x> variable
+srcaddrref() { 
+  if test "$SUPPORT_SEPARATED_RWDATA" = "yes" && test -n "$RELOCATING" && test -z "$CREATE_SHLIB"; then
+    echo "AT(.src_addr`cat srcAddrLineNum$$`)"
+  fi
+}
+
+dotref() {
+  if test "$SUPPORT_SEPARATED_RWDATA" = "yes" && test -n "$RELOCATING" && test -z "$CREATE_SHLIB"; then
+    echo "."
+  fi
+}
+
+# Definitions inserted for Cryptocore post text and rodata sections used to
+# store any necessary signed region padding, the signature of the region and
+# 'config_table' entry.
+POST_TEXT_RESERVE="/* This will create a section whose size can be provided by defining the
+     .post_text_reserve symbol.  It is useful for Cryptocore protected parts
+     which require padding up to a certain alignment boundary and storage of a
+     signature and other information. */
+  .post_text_reserve :
+  {
+    .post_text_reserve = (DEFINED(.post_text_reserve) ? .post_text_reserve : 0);
+    . += .post_text_reserve;
+  } = 0xDEADADDA"
+POST_RODATA_RESERVE="/* This will create a section whose size can be provided by defining the
+     .post_rodata_reserve symbol.  It is useful for Cryptocore protected parts
+     which require padding up to a certain alignment boundary and storage of a
+     signature and other information. */
+  .post_rodata_reserve :
+  {
+    .post_rodata_reserve = (DEFINED(.post_rodata_reserve) ? .post_rodata_reserve : 0);
+    . += .post_rodata_reserve;
+  } = 0xDEADADDA"
+
+
 test -z "$RODATA_NAME" && RODATA_NAME=rodata
 test -z "$SDATA_NAME" && SDATA_NAME=sdata
 test -z "$SBSS_NAME" && SBSS_NAME=sbss
@@ -127,18 +198,27 @@ fi
 if test -z "${INITIAL_READONLY_SECTIONS}${CREATE_SHLIB}"; then
   INITIAL_READONLY_SECTIONS=".interp       ${RELOCATING-0} : { *(.interp) }"
 fi
+test -n "${DATA_PLT-${BSS_PLT-text}}" && TEXT_PLT=yes
 if test -z "$PLT"; then
   IPLT=".iplt         ${RELOCATING-0} : { *(.iplt) }"
-  PLT=".plt          ${RELOCATING-0} : { *(.plt)${IREL_IN_PLT+ *(.iplt)} }
+  PLT=".plt          ${RELOCATING-0} :
+  {
+    *(.plt)${IREL_IN_PLT+ *(.iplt)}
+  ${TEXT_PLT+${RELOCATING+${ADD_POST_TEXT_RESERVE+  /* Ensure the end of text is at least on a word boundary if we are going to
+       have a .post_text_reserve section. */
+    . = (DEFINED(.post_text_reserve) ? ALIGN(4) : .);}}}
+  } ${TEXT_PLT+${FILL}}
   ${IREL_IN_PLT-$IPLT}"
 fi
-test -n "${DATA_PLT-${BSS_PLT-text}}" && TEXT_PLT=yes
 if test -z "$GOT"; then
   if test -z "$SEPARATE_GOTPLT"; then
-    GOT=".got          ${RELOCATING-0} : { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }"
+    GOT="`srcaddrline`
+  .got          ${RELOCATING-0}`dotref` : `srcaddrref` { *(.got.plt) *(.igot.plt) *(.got) *(.igot) }"
   else
-    GOT=".got          ${RELOCATING-0} : { *(.got) *(.igot) }"
-    GOTPLT=".got.plt      ${RELOCATING-0} : { *(.got.plt)  *(.igot.plt) }"
+    GOT="`srcaddrline`
+  .got          ${RELOCATING-0}`dotref` : `srcaddrref` { *(.got) *(.igot) }"
+    GOTPLT="`srcaddrline`
+  .got.plt      ${RELOCATING-0}`dotref` : `srcaddrref` { *(.got.plt)  *(.igot.plt)}"
   fi
 fi
 REL_IFUNC=".rel.ifunc    ${RELOCATING-0} : { *(.rel.ifunc) }"
@@ -155,12 +235,25 @@ RELA_IPLT=".rela.iplt    ${RELOCATING-0} :
       *(.rela.iplt)
       ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__rela_iplt_end = .);}}
     }"
-DYNAMIC=".dynamic      ${RELOCATING-0} : { *(.dynamic) }"
-RODATA=".${RODATA_NAME}       ${RELOCATING-0} : { *(.${RODATA_NAME}${RELOCATING+ .${RODATA_NAME}.* .gnu.linkonce.r.*}) }"
-DATARELRO=".data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }"
+DYNAMIC="`srcaddrline`
+  .dynamic      ${RELOCATING-0}`dotref` : `srcaddrref` { *(.dynamic) }"
+if test -z "${WRITABLE_RODATA}"; then
+  RODATA=".${RODATA_NAME}       ${RELOCATING-0} :
+  {
+    *(.${RODATA_NAME}${RELOCATING+ .${RODATA_NAME}.* .gnu.linkonce.r.*})
+  ${RELOCATING+${ADD_POST_RODATA_RESERVE+  /* Ensure the end of read-only data is at least on a word boundary if we
+       are going to have a .post_rodata_reserve section. */
+    . = (DEFINED(.post_rodata_reserve) ? ALIGN(4) : .);}}
+  }${ADD_POST_RODATA_RESERVE+ ${FILL}}"
+else
+  RODATA="`srcaddrline`
+  .${RODATA_NAME}       ${RELOCATING-0}`dotref` : `srcaddrref` { *(.${RODATA_NAME}${RELOCATING+ .${RODATA_NAME}.* .gnu.linkonce.r.*}) }"
+fi
+DATARELRO="`srcaddrline`
+  .data.rel.ro   `dotref` : `srcaddrref` { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro* .gnu.linkonce.d.rel.ro.*) }"
 DISCARDED="/DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }"
 if test -z "${NO_SMALL_DATA}"; then
-  SBSS=".${SBSS_NAME}         ${RELOCATING-0} :
+  SBSS=".${SBSS_NAME}         ${RELOCATING-0} : ${BSS_LMA_EQUALS_VMA+AT(ADDR(.${SBSS_NAME}))}
   {
     ${RELOCATING+${SBSS_START_SYMBOLS}}
     ${CREATE_SHLIB+*(.${SBSS_NAME}2 .${SBSS_NAME}2.* .gnu.linkonce.sb2.*)}
@@ -169,17 +262,20 @@ if test -z "${NO_SMALL_DATA}"; then
     *(.scommon)
     ${RELOCATING+${SBSS_END_SYMBOLS}}
   }"
-  SBSS2=".${SBSS_NAME}2        ${RELOCATING-0} : { *(.${SBSS_NAME}2${RELOCATING+ .${SBSS_NAME}2.* .gnu.linkonce.sb2.*}) }"
+  SBSS2="`srcaddrline`
+  .${SBSS_NAME}2        ${RELOCATING-0}`dotref` : `srcaddrref` { *(.${SBSS_NAME}2${RELOCATING+ .${SBSS_NAME}2.* .gnu.linkonce.sb2.*}) }"
   SDATA="/* We want the small data sections together, so single-instruction offsets
      can access them all, and initialized data all before uninitialized, so
      we can shorten the on-disk segment size.  */
-  .${SDATA_NAME}        ${RELOCATING-0} :
+  `srcaddrline`
+  .${SDATA_NAME}        ${RELOCATING-0}`dotref` : `srcaddrref`
   {
     ${RELOCATING+${SDATA_START_SYMBOLS}}
     ${CREATE_SHLIB+*(.${SDATA_NAME}2 .${SDATA_NAME}2.* .gnu.linkonce.s2.*)}
     *(.${SDATA_NAME}${RELOCATING+ .${SDATA_NAME}.* .gnu.linkonce.s.*})
   }"
-  SDATA2=".${SDATA_NAME}2       ${RELOCATING-0} :
+  SDATA2="`srcaddrline`
+  .${SDATA_NAME}2       ${RELOCATING-0}`dotref` : `srcaddrref`
   {
     ${RELOCATING+${SDATA2_START_SYMBOLS}}
     *(.${SDATA_NAME}2${RELOCATING+ .${SDATA_NAME}2.* .gnu.linkonce.s2.*})
@@ -215,7 +311,7 @@ test "${LARGE_SECTIONS}" = "yes" && REL_LARGE="
   .rela.lrodata ${RELOCATING-0} : { *(.rela.lrodata${RELOCATING+ .rela.lrodata.* .rela.gnu.linkonce.lr.*}) }"
 test "${LARGE_SECTIONS}" = "yes" && OTHER_BSS_SECTIONS="
   ${OTHER_BSS_SECTIONS}
-  .lbss ${RELOCATING-0} :
+  .lbss ${RELOCATING-0} : ${BSS_LMA_EQUALS_VMA+AT(ADDR(.lbss))}
   {
     *(.dynlbss)
     *(.lbss${RELOCATING+ .lbss.* .gnu.linkonce.lb.*})
@@ -242,7 +338,8 @@ else
   CTORS_IN_INIT_ARRAY=
   DTORS_IN_FINI_ARRAY=
 fi
-INIT_ARRAY=".init_array   ${RELOCATING-0} :
+INIT_ARRAY="`srcaddrline`
+  .init_array   ${RELOCATING-0}`dotref` : `srcaddrref`
   {
     ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__init_array_start = .);}}
     ${SORT_INIT_ARRAY}
@@ -250,7 +347,8 @@ fi
     ${CTORS_IN_INIT_ARRAY}
     ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__init_array_end = .);}}
   }"
-FINI_ARRAY=".fini_array   ${RELOCATING-0} :
+FINI_ARRAY="`srcaddrline`
+  .fini_array   ${RELOCATING-0}`dotref` : `srcaddrref`
   {
     ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__fini_array_start = .);}}
     ${SORT_FINI_ARRAY}
@@ -258,7 +356,8 @@ fi
     ${DTORS_IN_FINI_ARRAY}
     ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__fini_array_end = .);}}
   }"
-CTOR=".ctors        ${CONSTRUCTING-0} :
+CTOR="${CONSTRUCTING+`srcaddrline`}
+  .ctors        ${CONSTRUCTING-0}${CONSTRUCTING+`dotref`} : ${CONSTRUCTING+`srcaddrref`}
   {
     ${CONSTRUCTING+${CTOR_START}}
     /* gcc uses crtbegin.o to find the start of
@@ -277,14 +376,15 @@ fi
     /* We don't want to include the .ctor section from
        the crtend.o file until after the sorted ctors.
        The .ctor section from the crtend file contains the
-       end of ctors marker and it must be last */
+       end of ctors marker and it must be last. */
 
     KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o $OTHER_EXCLUDE_FILES) .ctors))
     KEEP (*(SORT(.ctors.*)))
     KEEP (*(.ctors))
     ${CONSTRUCTING+${CTOR_END}}
   }"
-DTOR=".dtors        ${CONSTRUCTING-0} :
+DTOR="${CONSTRUCTING+`srcaddrline`}
+  .dtors        ${CONSTRUCTING-0}${CONSTRUCTING+`dotref`} : ${CONSTRUCTING+`srcaddrref`}
   {
     ${CONSTRUCTING+${DTOR_START}}
     KEEP (*crtbegin.o(.dtors))
@@ -294,6 +394,28 @@ fi
     KEEP (*(.dtors))
     ${CONSTRUCTING+${DTOR_END}}
   }"
+test "${ADD_RTOS_CTOR_DTOR}" = "yes" && RTOS_CTOR="${CONSTRUCTING+`srcaddrline`}
+  .rtos.ctors        ${CONSTRUCTING-0}${CONSTRUCTING+`dotref`} : ${CONSTRUCTING+`srcaddrref`}
+  {
+    ${CONSTRUCTING+${RTOS_CTOR_START}}
+    KEEP (*(SORT(.rtos.ctors.*)))
+    KEEP (*(.rtos.ctors))
+    ${CONSTRUCTING+${RTOS_CTOR_END}}
+  }"
+test "${ADD_RTOS_CTOR_DTOR}" = "yes" && REL_RTOS_CTOR="
+  .rel.rtos.ctors	${RELOCATING-0} : { *(.rel.rtos.ctors .rel.rtos.ctors.*) }
+  .rela.rtos.ctors	${RELOCATING-0} : { *(.rela.rtos.ctors .rela.rtos.ctors.*) }"
+test "${ADD_RTOS_CTOR_DTOR}" = "yes" && RTOS_DTOR="${CONSTRUCTING+`srcaddrline`}
+  .rtos.dtors        ${CONSTRUCTING-0}${CONSTRUCTING+`dotref`} : ${CONSTRUCTING+`srcaddrref`}
+  {
+    ${CONSTRUCTING+${RTOS_DTOR_START}}
+    KEEP (*(SORT(.rtos.dtors.*)))
+    KEEP (*(.rtos.dtors))
+    ${CONSTRUCTING+${RTOS_DTOR_END}}
+  }"
+test "${ADD_RTOS_CTOR_DTOR}" = "yes" && REL_RTOS_DTOR="
+  .rel.rtos.dtors	${RELOCATING-0} : { *(.rel.rtos.dtors .rel.rtos.dtors.*) }
+  .rela.rtos.dtors	${RELOCATING-0} : { *(.rela.rtos.dtors .rela.rtos.dtors.*) }"
 STACK="  .stack        ${RELOCATING-0}${RELOCATING+${STACK_ADDR}} :
   {
     ${RELOCATING+${USER_LABEL_PREFIX}_stack = .;}
@@ -390,6 +512,8 @@ eval $COMBRELOCCAT <<EOF
   .rela.ctors   ${RELOCATING-0} : { *(.rela.ctors) }
   .rel.dtors    ${RELOCATING-0} : { *(.rel.dtors) }
   .rela.dtors   ${RELOCATING-0} : { *(.rela.dtors) }
+  ${REL_RTOS_CTOR}
+  ${REL_RTOS_DTOR}
   .rel.got      ${RELOCATING-0} : { *(.rel.got) }
   .rela.got     ${RELOCATING-0} : { *(.rela.got) }
   ${OTHER_GOT_RELOC_SECTIONS}
@@ -459,19 +583,31 @@ emit_dyn()
 test -n "${NON_ALLOC_DYN}${SEPARATE_CODE}" || emit_dyn
 
 cat <<EOF
-  .init         ${RELOCATING-0} :
-  {
+  ${RELOCATING+${ADD_POST_TEXT_RESERVE+/* Allow alignment of the text sections by defining the .text_align symbol */
+  .text_align = (DEFINED(.text_align) ? .text_align : 1);
+  . = ALIGN(.text_align);}}
+  ${REQUIRE_REGION_MARKER_SYMBOLS+/* The __stext and __etext symbols are used to help identify the size and
+     location of the region associated with the .post_text_reserve section.
+   */
+  ${RELOCATING+__stext = .;}}
+EOF
+INIT=".init         ${RELOCATING-0} :
+  { 
     ${RELOCATING+${INIT_START}}
     KEEP (*(SORT_NONE(.init)))
     ${RELOCATING+${INIT_END}}
-  } ${FILL}
-
-  ${TEXT_PLT+${PLT}}
+  ${RELOCATING+${ADD_POST_TEXT_RESERVE+  /* Ensure the end of text is at least on a word boundary if we are going to
+       have a .post_text_reserve section. */
+    . = (DEFINED(.post_text_reserve) ? ALIGN(4) : .);}}
+  } ${FILL}"
+cat <<EOF
+  ${REORDER_TEXT_PLT_AND_INIT-${INIT}}
+  ${REORDER_TEXT_PLT_AND_INIT-${TEXT_PLT+${PLT}}}
   ${TINY_READONLY_SECTION}
   .text         ${RELOCATING-0} :
   {
     ${RELOCATING+${TEXT_START_SYMBOLS}}
-    ${RELOCATING+*(.text.unlikely .text.*_unlikely)}
+    ${RELOCATING+*(.text.unlikely .text.*.unlikely)}
     ${RELOCATING+*(.text.exit .text.exit.*)}
     ${RELOCATING+*(.text.startup .text.startup.*)}
     ${RELOCATING+*(.text.hot .text.hot.*)}
@@ -479,16 +615,32 @@ cat <<EOF
     /* .gnu.warning sections are handled specially by elf32.em.  */
     *(.gnu.warning)
     ${RELOCATING+${OTHER_TEXT_SECTIONS}}
+  ${RELOCATING+${ADD_POST_TEXT_RESERVE+  /* Ensure the end of text is at least on a word boundary if we are going to
+       have a .post_text_reserve section. */
+    . = (DEFINED(.post_text_reserve) ? ALIGN(4) : .);}}
   } ${FILL}
+  ${REORDER_TEXT_PLT_AND_INIT+${TEXT_PLT+${PLT}}}
+  ${REORDER_TEXT_PLT_AND_INIT+${INIT}}
   .fini         ${RELOCATING-0} :
   {
     ${RELOCATING+${FINI_START}}
     KEEP (*(SORT_NONE(.fini)))
     ${RELOCATING+${FINI_END}}
+  ${RELOCATING+${ADD_POST_TEXT_RESERVE+  /* Ensure the end of text is at least on a word boundary if we are going to
+       have a .post_text_reserve section. */
+    . = (DEFINED(.post_text_reserve) ? ALIGN(4) : .);}}
   } ${FILL}
-  ${RELOCATING+PROVIDE (__${ETEXT_NAME} = .);}
+  ${REQUIRE_REGION_MARKER_SYMBOLS+${RELOCATING+__${ETEXT_NAME} = .;}}
+  ${REQUIRE_REGION_MARKER_SYMBOLS-${RELOCATING+PROVIDE (__${ETEXT_NAME} = .);}}
   ${RELOCATING+PROVIDE (_${ETEXT_NAME} = .);}
   ${RELOCATING+PROVIDE (${ETEXT_NAME} = .);}
+  ${RELOCATING+${CREATE_SHLIB-${ADD_POST_TEXT_RESERVE+$POST_TEXT_RESERVE}}}
+  ${RELOCATING+${ADD_POST_RODATA_RESERVE+/* Allow alignment of the rodata sections by defining the .rodata_align symbol */
+  .rodata_align = (DEFINED(.rodata_align) ? .rodata_align : 1);
+  . = ALIGN(.rodata_align);}}
+  ${REQUIRE_REGION_MARKER_SYMBOLS+/* The __srodata and __erodata symbols are used to help identify the size and
+     location of the region associated with the .post_rodata_reserve section. */
+  ${RELOCATING+__srodata = .;}}
 EOF
 
 if test -n "${SEPARATE_CODE}"; then
@@ -519,16 +671,37 @@ fi
 
 cat <<EOF
   ${WRITABLE_RODATA-${RODATA}}
-  .${RODATA_NAME}1      ${RELOCATING-0} : { *(.${RODATA_NAME}1) }
+  .${RODATA_NAME}1      ${RELOCATING-0} :
+  {
+    *(.${RODATA_NAME}1)
+  ${RELOCATING+${ADD_POST_RODATA_RESERVE+  /* Ensure the end of read-only data is at least on a word boundary if we are
+       going to have a .post_rodata_reserve section. */
+    . = (DEFINED(.post_rodata_reserve) ? ALIGN(4) : .);}}
+  }${ADD_POST_RODATA_RESERVE+ ${FILL}}
+  ${REQUIRE_REGION_MARKER_SYMBOLS+${RELOCATING+__erodata = .;}}
+  ${RELOCATING+${CREATE_SHLIB-${ADD_POST_RODATA_RESERVE+${POST_RODATA_RESERVE}}}}
+  ${RELOCATING+${CREATE_SHLIB-${SUPPORT_SEPARATED_RWDATA+/* Locate read/write data separately from read-only code/data - can be used
+     by inplace ROM code which has data/bss.  Note that .sdata2 and .sbbs2 may
+     contain writable data, so must be in RAM, even if following sections claim
+     to be read-only (there may be cause to re-order these sections). */
+  .end_ro_sections = .;
+  .start_rwdata = (DEFINED(.start_rwdata) ? (.start_rwdata) : .);
+  . = .start_rwdata;}}}
+
   ${CREATE_SHLIB-${SDATA2}}
   ${CREATE_SHLIB-${SBSS2}}
   ${OTHER_READONLY_SECTIONS}
-  .eh_frame_hdr : { *(.eh_frame_hdr) }
-  .eh_frame     ${RELOCATING-0} : ONLY_IF_RO { KEEP (*(.eh_frame)) }
-  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RO { *(.gcc_except_table
+
+  `srcaddrline`
+  .eh_frame_hdr ${RELOCATING-0}`dotref` : `srcaddrref` { *(.eh_frame_hdr) }
+  `srcaddrline`
+  .eh_frame     ${RELOCATING-0}`dotref` : `srcaddrref` ONLY_IF_RO { KEEP (*(.eh_frame)) }
+  `srcaddrline`
+  .gcc_except_table ${RELOCATING-0}`dotref` : `srcaddrref` ONLY_IF_RO { *(.gcc_except_table
   .gcc_except_table.*) }
   /* These sections are generated by the Sun/Oracle C++ compiler.  */
-  .exception_ranges ${RELOCATING-0} : ONLY_IF_RO { *(.exception_ranges
+  `srcaddrline`
+  .exception_ranges ${RELOCATING-0}`dotref` : `srcaddrref` ONLY_IF_RO { *(.exception_ranges
   .exception_ranges*) }
 
   /* Adjust the address for the data segment.  We want to adjust up to
@@ -538,15 +711,20 @@ cat <<EOF
   ${CREATE_PIE+${RELOCATING+. = ${SHLIB_DATA_ADDR-${DATA_SEGMENT_ALIGN}};}}
 
   /* Exception handling  */
-  .eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }
-  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
-  .exception_ranges ${RELOCATING-0} : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
-
+  `srcaddrline`
+  .eh_frame     ${RELOCATING-0}`dotref` : `srcaddrref` ONLY_IF_RW { KEEP (*(.eh_frame)) }
+  `srcaddrline`
+  .gcc_except_table ${RELOCATING-0}`dotref` : `srcaddrref` ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
+  `srcaddrline`
+  .exception_ranges ${RELOCATING-0}`dotref` : `srcaddrref` ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
   /* Thread Local Storage sections  */
-  .tdata	${RELOCATING-0} : { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }
-  .tbss		${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }
+  `srcaddrline`
+  .tdata        ${RELOCATING-0}`dotref` : `srcaddrref` { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }
+  `srcaddrline`
+  .tbss         ${RELOCATING-0}`dotref` : `srcaddrref` { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }
 
-  .preinit_array   ${RELOCATING-0} :
+  `srcaddrline`
+  .preinit_array ${RELOCATING-0}`dotref` : `srcaddrref`
   {
     ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__preinit_array_start = .);}}
     KEEP (*(.preinit_array))
@@ -556,7 +734,10 @@ cat <<EOF
   ${RELOCATING+${FINI_ARRAY}}
   ${SMALL_DATA_CTOR-${RELOCATING+${CTOR}}}
   ${SMALL_DATA_DTOR-${RELOCATING+${DTOR}}}
-  .jcr          ${RELOCATING-0} : { KEEP (*(.jcr)) }
+  ${SMALL_DATA_CTOR-${RELOCATING+${RTOS_CTOR}}}
+  ${SMALL_DATA_DTOR-${RELOCATING+${RTOS_DTOR}}}
+  `srcaddrline`
+  .jcr          ${RELOCATING-0}`dotref` : `srcaddrref` { KEEP (*(.jcr)) }
 
   ${RELOCATING+${DATARELRO}}
   ${OTHER_RELRO_SECTIONS}
@@ -570,30 +751,36 @@ cat <<EOF
 
   ${DATA_PLT+${PLT_BEFORE_GOT-${PLT}}}
 
-  .data         ${RELOCATING-0} :
+  `srcaddrline`
+  .data         ${RELOCATING-0}`dotref` : `srcaddrref`
   {
     ${RELOCATING+${DATA_START_SYMBOLS}}
     *(.data${RELOCATING+ .data.* .gnu.linkonce.d.*})
     ${CONSTRUCTING+SORT(CONSTRUCTORS)}
   }
-  .data1        ${RELOCATING-0} : { *(.data1) }
+  `srcaddrline`
+  .data1        ${RELOCATING-0}`dotref` : `srcaddrref` { *(.data1) }
   ${WRITABLE_RODATA+${RODATA}}
   ${OTHER_READWRITE_SECTIONS}
   ${SMALL_DATA_CTOR+${RELOCATING+${CTOR}}}
   ${SMALL_DATA_DTOR+${RELOCATING+${DTOR}}}
+  ${SMALL_DATA_CTOR+${RELOCATING+${RTOS_CTOR}}}
+  ${SMALL_DATA_DTOR+${RELOCATING+${RTOS_DTOR}}}
   ${DATA_PLT+${PLT_BEFORE_GOT+${PLT}}}
   ${SDATA_GOT+${RELOCATING+${OTHER_GOT_SYMBOLS+. = .; ${OTHER_GOT_SYMBOLS}}}}
   ${SDATA_GOT+${GOT}}
   ${SDATA_GOT+${OTHER_GOT_SECTIONS}}
   ${SDATA}
   ${OTHER_SDATA_SECTIONS}
+  ${REQUIRE_EDATA_AND_END_ALIGNED+/* Ensure the _edata symbol is word aligned so the C-runtime initialisation (zeroing the BSS) works. */
+  . = ALIGN(4);}
   ${RELOCATING+${DATA_END_SYMBOLS-${USER_LABEL_PREFIX}_edata = .; PROVIDE (${USER_LABEL_PREFIX}edata = .);}}
   ${RELOCATING+. = .;}
   ${RELOCATING+${USER_LABEL_PREFIX}__bss_start = .;}
   ${RELOCATING+${OTHER_BSS_SYMBOLS}}
   ${SBSS}
   ${BSS_PLT+${PLT}}
-  .${BSS_NAME}          ${RELOCATING-0} :
+  .${BSS_NAME}          ${RELOCATING-0} : ${BSS_LMA_EQUALS_VMA+AT(ADDR(.${BSS_NAME}))}
   {
    *(.dyn${BSS_NAME})
    *(.${BSS_NAME}${RELOCATING+ .${BSS_NAME}.* .gnu.linkonce.b.*})
@@ -611,6 +798,8 @@ cat <<EOF
   ${LARGE_SECTIONS}
   ${RELOCATING+. = ALIGN(${ALIGNMENT});}
   ${RELOCATING+${OTHER_END_SYMBOLS}}
+  ${REQUIRE_EDATA_AND_END_ALIGNED+/* Ensure the _end symbol is word aligned so the C-runtime initialisation (zeroing the BSS) works. */
+  . = ALIGN(4);}
   ${RELOCATING+${END_SYMBOLS-${USER_LABEL_PREFIX}_end = .; PROVIDE (${USER_LABEL_PREFIX}end = .);}}
   ${RELOCATING+${DATA_SEGMENT_END}}
 EOF
@@ -676,3 +865,4 @@ cat <<EOF
   ${RELOCATING+${DISCARDED}}
 }
 EOF
+rm srcAddrLineNum$$
Index: binutils/ld/emulparams/superh.sh
===================================================================
--- binutils.orig/ld/emulparams/superh.sh	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/ld/emulparams/superh.sh	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,61 @@
+SCRIPT_NAME=elf
+OUTPUT_FORMAT="elf32-shl"
+BIG_OUTPUT_FORMAT="elf32-sh"
+LITTLE_OUTPUT_FORMAT="elf32-shl"
+TEXT_START_ADDR="(DEFINED(_start) ? _start + (DEFINED(.start_offset) ? .start_offset : 0) : 0x1000 + (DEFINED(.start_offset) ? .start_offset : 0))"
+MAXPAGESIZE=128
+ARCH=sh
+MACHINE=
+TEMPLATE_NAME=elf32
+GENERATE_SHLIB_SCRIPT=yes
+EMBEDDED=yes
+
+# These are for compatibility with the COFF toolchain.
+ENTRY=start
+CTOR_START='___ctors = .;'
+CTOR_END='___ctors_end = .;'
+DTOR_START='___dtors = .;'
+DTOR_END='___dtors_end = .;'
+# This is like setting STACK_ADDR to 0x300000, except that the setting can
+# be overridden, e.g. --defsym _stack=0x0f00.
+test -z "$CREATE_SHLIB" && OTHER_SECTIONS=".stack        ${RELOCATING-0}${RELOCATING+(DEFINED(_stack) ? _stack : 0x300000)} :
+  {
+    ${RELOCATING+_stack = .;}
+  }
+  ${RELOCATING+/* Assert if _stack is located within ranges identified as containing program
+     code/data.  We can use symbols __executable_start, .end_ro_sections,
+     .start_rwdata and _end to identify these ranges.
+   */
+  ASSERT(!(_stack >= __executable_start && _stack <= .end_ro_sections), \"Program code/read-only data between symbols __executable_start and .end_ro_sections overlaps stack location at symbol _stack\")
+  ASSERT(!(_stack >= .start_rwdata && _stack <= _end), \"Program data between symbols .start_rwdata and _end overlaps stack location at symbol _stack\")}"
+# We do not need .stack for shared libraries.
+test -n "$CREATE_SHLIB" && OTHER_SECTIONS=""
+
+# Special stuff for the ST40 Micro Toolset
+#   ADD_POST_TEXT_RESERVE - whether to add a .post_text_reserve section
+#   ADD_POST_RODATA_RESERVE - whether to add a .post_rodata_reserve section
+#   ADD_RTOS_CTOR_DTOR - whether to add .rtos.ctors and .rtos.dtors sections
+#   REORDER_TEXT_PLT_AND_INIT - whether to re-order text sections to .text,
+#       .plt, .init, .fini, or stick to the original ordering
+#   REQUIRE_EDATA_AND_END_ALIGNED - whether an ALIGN directive should be used to
+#       force the _edata and _end symbols to be word aligned
+#   REQUIRE_REGION_MARKER_SYMBOLS - ensure that the symbols  __stext, __etext,
+#       __srodata and __erodata are set
+#   SUPPORT_SEPARATED_RWDATA - whether to support separating read-write data
+#       from what came before by setting the _start_rwdata symbol
+ADD_POST_TEXT_RESERVE=yes
+ADD_POST_RODATA_RESERVE=yes
+REORDER_TEXT_PLT_AND_INIT=" "
+REQUIRE_EDATA_AND_END_ALIGNED=yes
+REQUIRE_REGION_MARKER_SYMBOLS=" "
+SUPPORT_SEPARATED_RWDATA=yes
+BSS_LMA_EQUALS_VMA=yes
+
+ADD_RTOS_CTOR_DTOR=yes
+RTOS_CTOR_START='___rtos_ctors = .;'
+RTOS_CTOR_END='___rtos_ctors_end = .;'
+RTOS_DTOR_START='___rtos_dtors = .;'
+RTOS_DTOR_END='___rtos_dtors_end = .;'
+
+EXTRA_EM_FILE=shelf
+
Index: binutils/ld/emulparams/shelf_linux.sh
===================================================================
--- binutils.orig/ld/emulparams/shelf_linux.sh	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/emulparams/shelf_linux.sh	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,2 +1,4 @@
 . ${srcdir}/emulparams/shlelf_linux.sh
 OUTPUT_FORMAT="elf32-shbig-linux"
+
+EXTRA_EM_FILE=${EXTRA_EM_FILE-shelf}
\ No newline at end of file
Index: binutils/ld/configure.tgt
===================================================================
--- binutils.orig/ld/configure.tgt	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/configure.tgt	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -362,6 +362,10 @@ m68*-sun-sunos[34]*)	targ_emul=sun3 ;;
 m68*-wrs-vxworks*)	targ_emul=sun3 ;;
 m68*-ericsson-ose)	targ_emul=sun3 ;;
 m68*-apple-aux*)	targ_emul=m68kaux ;;
+sh-superh-elf*)
+			targ_emul=superh
+			targ_extra_emuls=
+			;;
 m68k-sony-*)		targ_emul=news ;;
 m68k-hp-bsd*)		targ_emul=hp300bsd ;;
 m68*-motorola-sysv*)	targ_emul=delta68 ;;
Index: binutils/ld/plugin.c
===================================================================
--- binutils.orig/ld/plugin.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/plugin.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -408,7 +408,9 @@ add_symbols (void *handle, int nsyms, const struct
   asymbol **symptrs;
   bfd *abfd = handle;
   int n;
-
+  int wrap_symbol_detected=0;
+  const struct ld_plugin_symbol *syms_n=syms;
+  
   ASSERT (called_plugin);
   symptrs = xmalloc (nsyms * sizeof *symptrs);
   for (n = 0; n < nsyms; n++)
@@ -418,10 +420,17 @@ add_symbols (void *handle, int nsyms, const struct
 
       bfdsym = bfd_make_empty_symbol (abfd);
       symptrs[n] = bfdsym;
-      rv = asymbol_from_plugin_symbol (abfd, bfdsym, syms + n);
+      syms_n = syms + n;
+      rv = asymbol_from_plugin_symbol (abfd, bfdsym, syms_n);
       if (rv != LDPS_OK)
 	return rv;
-    }
+      
+      if ((syms_n->def==LDPK_DEF || syms_n->def==LDPK_WEAKDEF) &&
+        bfd_is_symbol_to_wrap(abfd, &link_info, syms_n->name))
+	 wrap_symbol_detected=1;
+   }
+  if (wrap_symbol_detected)
+    return LDPS_NO_SYMS;
   bfd_set_symtab (abfd, symptrs, nsyms);
   return LDPS_OK;
 }
Index: binutils/ld/Makefile.am
===================================================================
--- binutils.orig/ld/Makefile.am	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/ld/Makefile.am	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -444,6 +444,7 @@ ALL_EMULATION_SOURCES = \
 	est2000.c \
 	esun3.c \
 	esun4.c \
+	esuperh.c \
 	etic30aout.c \
 	etic30coff.c \
 	etic3xcoff.c \
@@ -1877,6 +1878,9 @@ eshlsymbian.c: $(srcdir)/emulparams/shlsymbian.sh
 eshpe.c: $(srcdir)/emulparams/shpe.sh \
   $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
 	${GENSCRIPTS} shpe "$(tdir_shl)"
+esuperh.c: $(srcdir)/emulparams/superh.sh \
+  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
+	${GENSCRIPTS} superh "$(tdir_superh)"
 esparcaout.c: $(srcdir)/emulparams/sparcaout.sh \
   $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
 	${GENSCRIPTS} sparcaout "$(tdir_sparcaout)"
@@ -2140,7 +2144,7 @@ check-DEJAGNU: site.exp
 	runtest=$(RUNTEST); \
 	if $(SHELL) -c "$$runtest --version" > /dev/null 2>&1; then \
 	  $$runtest --tool $(DEJATOOL) --srcdir $${srcroot}/testsuite \
-		CC="$(CC_FOR_TARGET)" CFLAGS="$(CFLAGS)" \
+		CC="$(CC_FOR_TARGET)" CFLAGS="$(FLAGS_FOR_TARGET)" \
 		CXX="$(CXX_FOR_TARGET)" CXXFLAGS="$(CXXFLAGS)" \
 		CC_FOR_HOST="$(CC)" CFLAGS_FOR_HOST="$(CFLAGS)" \
 		OFILES="$(OFILES)" BFDLIB="$(TESTBFDLIB)" \
@@ -2150,6 +2154,30 @@ check-DEJAGNU: site.exp
 	else echo "WARNING: could not find \`runtest'" 1>&2; :;\
 	fi
 
+site.exp: Makefile
+	@echo 'Making a new site.exp file...'
+	@test ! -f site.bak || rm -f site.bak
+	@echo '## these variables are automatically generated by make ##' > $@-t
+	@echo '# Do not edit here.  If you wish to override these values' >> $@-t
+	@echo '# edit the last section' >> $@-t
+	@echo 'set tool $(DEJATOOL)' >> $@-t
+	@echo 'set srcdir $(srcdir)' >> $@-t
+	@echo 'set objdir' `pwd` >> $@-t
+	@echo 'set host_alias $(host_alias)' >> $@-t
+	@echo 'set host_triplet $(host_triplet)' >> $@-t
+	@echo 'set target_alias $(target_alias)' >> $@-t
+	@echo 'set target_triplet $(target_triplet)' >> $@-t
+	@echo 'set build_alias $(build_alias)' >> $@-t
+	@echo 'set build_triplet $(build_triplet)' >> $@-t
+	@echo 'set target_list ${target_alias}' >> $@-t
+	@echo 'set boards_dir ${srcdir}/../../boards' >> $@-t
+	@echo 'set SIM "$(SIM)"' >> $@-t
+	@echo 'set CC_FOR_TARGET "$(CC_FOR_TARGET)"' >> $@-t
+	@echo '## All variables above are generated by configure. Do Not Edit ##' >> $@-t
+	@test ! -f site.exp || sed '1,/^## All variables above are.*##/ d' site.exp >> $@-t
+	@test ! -f site.exp || mv site.exp site.bak
+	@mv $@-t site.exp
+
 # Rules for testing by relinking ld itself.
 # A similar test is in the testsuite.  This target is for ease of use
 # when porting ld.
Index: binutils/configure.ac
===================================================================
--- binutils.orig/configure.ac	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/configure.ac	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -3054,6 +3054,7 @@ NCN_STRICT_CHECK_TOOLS(OBJCOPY, objcopy)
 NCN_STRICT_CHECK_TOOLS(OBJDUMP, objdump)
 NCN_STRICT_CHECK_TOOLS(READELF, readelf)
 AC_SUBST(CC)
+AC_SUBST(SIM)
 AC_SUBST(CXX)
 AC_SUBST(CFLAGS)
 AC_SUBST(CXXFLAGS)
Index: binutils/gas/Makefile.in
===================================================================
--- binutils.orig/gas/Makefile.in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/Makefile.in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -143,6 +143,7 @@ AWK = @AWK@
 CATALOGS = @CATALOGS@
 CATOBJEXT = @CATOBJEXT@
 CC = @CC@
+SIM = @SIM@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
 CPP = @CPP@
@@ -2254,25 +2255,6 @@ GTAGS:
 
 distclean-tags:
 	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
-site.exp: Makefile
-	@echo 'Making a new site.exp file...'
-	@echo '## these variables are automatically generated by make ##' >site.tmp
-	@echo '# Do not edit here.  If you wish to override these values' >>site.tmp
-	@echo '# edit the last section' >>site.tmp
-	@echo 'set srcdir $(srcdir)' >>site.tmp
-	@echo "set objdir `pwd`" >>site.tmp
-	@echo 'set build_alias "$(build_alias)"' >>site.tmp
-	@echo 'set build_triplet $(build_triplet)' >>site.tmp
-	@echo 'set host_alias "$(host_alias)"' >>site.tmp
-	@echo 'set host_triplet $(host_triplet)' >>site.tmp
-	@echo 'set target_alias "$(target_alias)"' >>site.tmp
-	@echo 'set target_triplet $(target_triplet)' >>site.tmp
-	@echo '## All variables above are generated by configure. Do Not Edit ##' >>site.tmp
-	@test ! -f site.exp || \
-	  sed '1,/^## All variables above are.*##/ d' site.exp >> site.tmp
-	@-rm -f site.bak
-	@test ! -f site.exp || mv site.exp site.bak
-	@mv site.tmp site.exp
 
 distclean-DEJAGNU:
 	-rm -f site.exp site.bak
@@ -2436,6 +2418,30 @@ check-DEJAGNU: site.exp
 	else echo "WARNING: could not find \`runtest'" 1>&2; :;\
 	fi
 
+site.exp: Makefile
+	@echo 'Making a new site.exp file...'
+	@echo '## these variables are automatically generated by make ##' >site.tmp
+	@echo '# Do not edit here.  If you wish to override these values' >>site.tmp
+	@echo '# edit the last section' >>site.tmp
+	@echo 'set srcdir $(srcdir)' >>site.tmp
+	@echo "set objdir `pwd`" >>site.tmp
+	@echo 'set build_alias "$(build_alias)"' >>site.tmp
+	@echo 'set build_triplet $(build_triplet)' >>site.tmp
+	@echo 'set host_alias "$(host_alias)"' >>site.tmp
+	@echo 'set host_triplet $(host_triplet)' >>site.tmp
+	@echo 'set target_alias "$(target_alias)"' >>site.tmp
+	@echo 'set target_triplet $(target_triplet)' >>site.tmp
+	@echo 'set target_list ${target_alias}' >>site.tmp
+	@echo 'set boards_dir ${srcdir}/../../boards' >>site.tmp
+	@echo 'set SIM "$(SIM)"' >>site.tmp
+	@echo 'set CC_FOR_TARGET "$(CC_FOR_TARGET)"' >>site.tmp
+	@echo '## All variables above are generated by configure. Do Not Edit ##' >>site.tmp
+	@test ! -f site.exp || \
+	  sed '1,/^## All variables above are.*##/ d' site.exp >> site.tmp
+	@-rm -f site.bak
+	@test ! -f site.exp || mv site.exp site.bak
+	@mv site.tmp site.exp
+
 # If m68k-parse.y is in a different directory, then ylwrap will use an
 # absolute path when it invokes yacc, which will cause yacc to put the
 # absolute path into the generated file.  That's a pain when it comes
Index: binutils/gas/doc/c-sh.texi
===================================================================
--- binutils.orig/gas/doc/c-sh.texi	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/doc/c-sh.texi	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -31,6 +31,8 @@
 @kindex --dsp
 @kindex --renesas
 @kindex --allow-reg-prefix
+@kindex --tas
+@kindex --notas
 
 @item --little
 Generate little endian code.
@@ -67,9 +69,13 @@ Enable sh2e, sh3e, sh4, and sh4a insn sets.
 @item --isa=all
 Enable sh1, sh2, sh2e, sh3, sh3e, sh4, sh4a, and sh-dsp insn sets.
 
-@item -h-tick-hex
+@item --h-tick-hex
 Support H'00 style hex constants in addition to 0x00 style.
 
+@item --tas
+@itemx --notas
+Allow or forbids the tas.b instruction.
+
 @end table
 
 @node SH Syntax
Index: binutils/gas/configure.in
===================================================================
--- binutils.orig/gas/configure.in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/configure.in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -28,6 +28,8 @@ ACX_LARGEFILE
 
 LT_INIT
 
+AC_SUBST(SIM)
+
 AC_ARG_ENABLE(targets,
 [  --enable-targets        alternative target configurations besides the primary],
 [case "${enableval}" in
Index: binutils/gas/testsuite/ChangeLog.st40
===================================================================
--- binutils.orig/gas/testsuite/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/gas/testsuite/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,82 @@
+2010-07-06  Christian Bruel  <christian.bruel@st.com>
+
+	* gas/sh/err-tas.s: New test.
+	* gas/sh/err-notas.s: Change default.
+	* gas/sh/arch/arch.exp: Use --tas.
+	
+2009-08-29  Matt Fleming  <matt@console-pimps.org>
+	
+	* gas/sh/sign-extension.d: New file.
+	* gas/sh/sign-extension.s: New file.
+	* gas/sh/basic.exp: Run new test.
+	
+2009-09-29  Christian Bruel  <christian.bruel@st.com>
+
+	* gas/sh/too_large.d: Fix reference.
+	
+2009-09-11  Christian Bruel  <christian.bruel@st.com>
+
+	* gas/sh/err-notas.s: New test.
+	
+2009-06-09  Antony King  <antony.king@st.com>
+
+	* gas/sh/arch/arch.exp: Use spawn -open to improve reliability.
+	* gas/sh/arch/sh-dsp.s: Regenerate.
+	* gas/sh/arch/sh.s: Regenerate.
+	* gas/sh/arch/sh2.s: Regenerate.
+	* gas/sh/arch/sh2a-nofpu-or-sh3-nommu.s: Regenerate.
+	* gas/sh/arch/sh2a-nofpu-or-sh4-nommu-nofpu.s: Regenerate.
+	* gas/sh/arch/sh2a-nofpu.s: Regenerate.
+	* gas/sh/arch/sh2a-or-sh3e.s: Regenerate.
+	* gas/sh/arch/sh2a-or-sh4.s: Regenerate.
+	* gas/sh/arch/sh2a.s: Regenerate.
+	* gas/sh/arch/sh2e.s: Regenerate.
+	* gas/sh/arch/sh3-dsp.s: Regenerate.
+	* gas/sh/arch/sh3-nommu.s: Regenerate.
+	* gas/sh/arch/sh3.s: Regenerate.
+	* gas/sh/arch/sh3e.s: Regenerate.
+	* gas/sh/arch/sh4-nofpu.s: Regenerate.
+	* gas/sh/arch/sh4-nommu-nofpu.s: Regenerate.
+	* gas/sh/arch/sh4.s: Regenerate.
+	* gas/sh/arch/sh4a-nofpu.s: Regenerate.
+	* gas/sh/arch/sh4a.s: Regenerate.
+	* gas/sh/arch/sh4al-dsp.s: Regenerate.
+	* gas/sh/arch/st40-300-nofpu-or-sh2a-nofpu.s: Regenerate.
+	* gas/sh/arch/st40-300-nofpu-or-sh4a-nofpu.s: Regenerate.
+	* gas/sh/arch/st40-300-nofpu.s: Regenerate.
+	* gas/sh/arch/st40-300-or-sh4a.s: Regenerate.
+	* gas/sh/arch/st40-300.s: Regenerate.
+
+2008-06-11  Antony King  <antony.king@st.com>
+
+	* gas/sh/arch/arch.exp: Cleanup spawned processes.
+
+2006-02-01  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* gas/sh/arch/arch.exp: Find files named st* in addition to sh*.
+	* gas/sh/arch/arch_expected.txt: Regenerate.
+	* gas/sh/arch/sh-dsp.s: Regenerate.
+	* gas/sh/arch/sh.s: Regenerate.
+	* gas/sh/arch/sh2.s: Regenerate.
+	* gas/sh/arch/sh2a-nofpu-or-sh3-nommu.s: Regenerate.
+	* gas/sh/arch/sh2a-nofpu-or-sh4-nommu-nofpu.s: Regenerate.
+	* gas/sh/arch/sh2a-nofpu.s: Regenerate.
+	* gas/sh/arch/sh2a-or-sh3e.s: Regenerate.
+	* gas/sh/arch/sh2a-or-sh4.s: Regenerate.
+	* gas/sh/arch/sh2a.s: Regenerate.
+	* gas/sh/arch/sh2e.s: Regenerate.
+	* gas/sh/arch/sh3-dsp.s: Regenerate.
+	* gas/sh/arch/sh3-nommu.s: Regenerate.
+	* gas/sh/arch/sh3.s: Regenerate.
+	* gas/sh/arch/sh3e.s: Regenerate.
+	* gas/sh/arch/sh4-nofpu.s: Regenerate.
+	* gas/sh/arch/sh4-nommu-nofpu.s: Regenerate.
+	* gas/sh/arch/sh4.s: Regenerate.
+	* gas/sh/arch/sh4a-nofpu.s: Regenerate.
+	* gas/sh/arch/sh4a.s: Regenerate.
+	* gas/sh/arch/sh4al-dsp.s: Regenerate.
+	* gas/sh/arch/st40-300-nofpu-or-sh2a-nofpu.s: Regenerate.
+	* gas/sh/arch/st40-300-nofpu-or-sh4a-nofpu.s: Regenerate.
+	* gas/sh/arch/st40-300-nofpu.s: Regenerate.
+	* gas/sh/arch/st40-300-or-sh4a.s: Regenerate.
+	* gas/sh/arch/st40-300.s: Regenerate.
Index: binutils/gas/testsuite/gas/symver/symver1.d
===================================================================
--- binutils.orig/gas/testsuite/gas/symver/symver1.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/symver/symver1.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -7,7 +7,7 @@
 [ 	]+U foo@version1
 #...
 0+0000000 D foo1@@version1
-0+00000.. d L_foo1
 0+00000.. D foo2
 0+00000.. D foo2@@version1
+0+00000.. d L_foo1
 0+00000.. d L_foo2
Index: binutils/gas/testsuite/gas/sh/sh4al-dsp.d
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/sh4al-dsp.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/sh4al-dsp.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,4 +1,4 @@
-#as: -dsp
+#as: -dsp --big
 #objdump: -fdr --prefix-addresses --show-raw-insn
 #name: SH4al DSP constructs
 
Index: binutils/gas/testsuite/gas/sh/too_large.d
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/too_large.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/too_large.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -7,3 +7,7 @@
 [ 	]*U \.L320
 [ 	]*U \.L321
 0+00100 t \.L307
+0+00104 t \.L304
+0+0011e t \.L305
+0+0012a t \.L303
+0+00136 t \.L302
Index: binutils/gas/testsuite/gas/sh/sh4a-dsp.d
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/sh4a-dsp.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/sh4a-dsp.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,4 +1,4 @@
-#as: -dsp
+#as: -dsp --big
 #objdump: -fdr --prefix-addresses --show-raw-insn
 #name: SH4al-dsp constructs shared with sh4a (and sh4)
 
Index: binutils/gas/testsuite/gas/sh/err-notas.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/err-notas.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/gas/testsuite/gas/sh/err-notas.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,8 @@
+! { dg-do assemble }
+! { dg-options "--notas" }
+	
+	.text
+	.p2align 2
+	tas.b @r0 ! { dg-error "Error: tas.b use" }
+	nop
+	
\ No newline at end of file
Index: binutils/gas/testsuite/gas/sh/arch/st40-300-nofpu.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/st40-300-nofpu.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/gas/testsuite/gas/sh/arch/st40-300-nofpu.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,200 @@
+! Generated file. DO NOT EDIT.
+!
+! This file was generated by gas/testsuite/gas/sh/arch/arch.exp .
+! This file should contain every instruction valid on
+! architecture st40-300-nofpu but no more.
+! If the tests are failing because the expected results
+! have changed then run 'make check' and copy the new file
+! from <objdir>/gas/testsuite/st40-300-nofpu.s
+! to   <srcdir>/gas/testsuite/gas/sh/arch/st40-300-nofpu.s .
+! Make sure there are no unexpected or missing instructions.
+
+	.section .text
+st40_300_nofpu:
+! Instructions introduced into st40-300-nofpu
+	mulr R1,r4                ;!/* 0100nnnn10010000 mulr R1,<REG_N> */       {"mulr",{A_R1,A_REG_N},{HEX_4,REG_N,HEX_9,HEX_0}, arch_st40_300_nofpu_up}
+	mulr R2,r4                ;!/* 0100nnnn10100000 mulr R2,<REG_N> */       {"mulr",{A_R2,A_REG_N},{HEX_4,REG_N,HEX_A,HEX_0}, arch_st40_300_nofpu_up}
+	mulr R3,r4                ;!/* 0100nnnn10110000 mulr R3,<REG_N> */       {"mulr",{A_R3,A_REG_N},{HEX_4,REG_N,HEX_B,HEX_0}, arch_st40_300_nofpu_up}
+
+! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh3 sh3-nommu sh4-nofpu sh4-nommu-nofpu st40-300-nofpu-or-sh2a-nofpu st40-300-nofpu-or-sh4a-nofpu
+	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
+	add r5,r4                 ;!/* 0011nnnnmmmm1100 add <REG_M>,<REG_N> */{"add",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_C}, arch_sh_up}
+	addc r5,r4                ;!/* 0011nnnnmmmm1110 addc <REG_M>,<REG_N>*/{"addc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_E}, arch_sh_up}
+	addv r5,r4                ;!/* 0011nnnnmmmm1111 addv <REG_M>,<REG_N>*/{"addv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_F}, arch_sh_up}
+	and #4,R0                 ;!/* 11001001i8*1.... and #<imm>,R0       */{"and",{A_IMM,A_R0},{HEX_C,HEX_9,IMM0_8}, arch_sh_up}
+	and r5,r4                 ;!/* 0010nnnnmmmm1001 and <REG_M>,<REG_N> */{"and",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_9}, arch_sh_up}
+	and.b #4,@(R0,GBR)        ;!/* 11001101i8*1.... and.b #<imm>,@(R0,GBR)*/{"and.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_D,IMM0_8}, arch_sh_up}
+	bra .+8                   ;!/* 1010i12......... bra <bdisp12>       */{"bra",{A_BDISP12},{HEX_A,BRANCH_12}, arch_sh_up}
+	bsr .+8                   ;!/* 1011i12......... bsr <bdisp12>       */{"bsr",{A_BDISP12},{HEX_B,BRANCH_12}, arch_sh_up}
+	bt .+8                    ;!/* 10001001i8p1.... bt <bdisp8>         */{"bt",{A_BDISP8},{HEX_8,HEX_9,BRANCH_8}, arch_sh_up}
+	bf .+8                    ;!/* 10001011i8p1.... bf <bdisp8>         */{"bf",{A_BDISP8},{HEX_8,HEX_B,BRANCH_8}, arch_sh_up}
+	bt.s .+8                  ;!/* 10001101i8p1.... bt.s <bdisp8>       */{"bt.s",{A_BDISP8},{HEX_8,HEX_D,BRANCH_8}, arch_sh2_up}
+	bt/s .+8                  ;!/* 10001101i8p1.... bt/s <bdisp8>       */{"bt/s",{A_BDISP8},{HEX_8,HEX_D,BRANCH_8}, arch_sh2_up}
+	bf.s .+8                  ;!/* 10001111i8p1.... bf.s <bdisp8>       */{"bf.s",{A_BDISP8},{HEX_8,HEX_F,BRANCH_8}, arch_sh2_up}
+	bf/s .+8                  ;!/* 10001111i8p1.... bf/s <bdisp8>       */{"bf/s",{A_BDISP8},{HEX_8,HEX_F,BRANCH_8}, arch_sh2_up}
+	clrmac                    ;!/* 0000000000101000 clrmac              */{"clrmac",{0},{HEX_0,HEX_0,HEX_2,HEX_8}, arch_sh_up}
+	clrs                      ;!/* 0000000001001000 clrs                */{"clrs",{0},{HEX_0,HEX_0,HEX_4,HEX_8}, arch_sh_up}
+	clrt                      ;!/* 0000000000001000 clrt                */{"clrt",{0},{HEX_0,HEX_0,HEX_0,HEX_8}, arch_sh_up}
+	cmp/eq #4,R0              ;!/* 10001000i8*1.... cmp/eq #<imm>,R0    */{"cmp/eq",{A_IMM,A_R0},{HEX_8,HEX_8,IMM0_8}, arch_sh_up}
+	cmp/eq r5,r4              ;!/* 0011nnnnmmmm0000 cmp/eq <REG_M>,<REG_N>*/{"cmp/eq",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_0}, arch_sh_up}
+	cmp/ge r5,r4              ;!/* 0011nnnnmmmm0011 cmp/ge <REG_M>,<REG_N>*/{"cmp/ge",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_3}, arch_sh_up}
+	cmp/gt r5,r4              ;!/* 0011nnnnmmmm0111 cmp/gt <REG_M>,<REG_N>*/{"cmp/gt",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_7}, arch_sh_up}
+	cmp/hi r5,r4              ;!/* 0011nnnnmmmm0110 cmp/hi <REG_M>,<REG_N>*/{"cmp/hi",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_6}, arch_sh_up}
+	cmp/hs r5,r4              ;!/* 0011nnnnmmmm0010 cmp/hs <REG_M>,<REG_N>*/{"cmp/hs",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_2}, arch_sh_up}
+	cmp/pl r4                 ;!/* 0100nnnn00010101 cmp/pl <REG_N>      */{"cmp/pl",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_5}, arch_sh_up}
+	cmp/pz r4                 ;!/* 0100nnnn00010001 cmp/pz <REG_N>      */{"cmp/pz",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_1}, arch_sh_up}
+	cmp/str r5,r4             ;!/* 0010nnnnmmmm1100 cmp/str <REG_M>,<REG_N>*/{"cmp/str",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_C}, arch_sh_up}
+	div0s r5,r4               ;!/* 0010nnnnmmmm0111 div0s <REG_M>,<REG_N>*/{"div0s",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_7}, arch_sh_up}
+	div0u                     ;!/* 0000000000011001 div0u               */{"div0u",{0},{HEX_0,HEX_0,HEX_1,HEX_9}, arch_sh_up}
+	div1 r5,r4                ;!/* 0011nnnnmmmm0100 div1 <REG_M>,<REG_N>*/{"div1",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_4}, arch_sh_up}
+	exts.b r5,r4              ;!/* 0110nnnnmmmm1110 exts.b <REG_M>,<REG_N>*/{"exts.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_E}, arch_sh_up}
+	exts.w r5,r4              ;!/* 0110nnnnmmmm1111 exts.w <REG_M>,<REG_N>*/{"exts.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_F}, arch_sh_up}
+	extu.b r5,r4              ;!/* 0110nnnnmmmm1100 extu.b <REG_M>,<REG_N>*/{"extu.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_C}, arch_sh_up}
+	extu.w r5,r4              ;!/* 0110nnnnmmmm1101 extu.w <REG_M>,<REG_N>*/{"extu.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_D}, arch_sh_up}
+	icbi @r4                  ;!/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
+	jmp @r4                   ;!/* 0100nnnn00101011 jmp @<REG_N>        */{"jmp",{A_IND_N},{HEX_4,REG_N,HEX_2,HEX_B}, arch_sh_up}
+	jsr @r4                   ;!/* 0100nnnn00001011 jsr @<REG_N>        */{"jsr",{A_IND_N},{HEX_4,REG_N,HEX_0,HEX_B}, arch_sh_up}
+	ldc r4,SR                 ;!/* 0100nnnn00001110 ldc <REG_N>,SR      */{"ldc",{A_REG_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_E}, arch_sh_up}
+	ldc r4,GBR                ;!/* 0100nnnn00011110 ldc <REG_N>,GBR     */{"ldc",{A_REG_N,A_GBR},{HEX_4,REG_N,HEX_1,HEX_E}, arch_sh_up}
+	ldc r4,SGR                ;!/* 0100nnnn00111010 ldc <REG_N>,SGR     */{"ldc",{A_REG_N,A_SGR},{HEX_4,REG_N,HEX_3,HEX_A}, arch_sh4_nommu_nofpu_up}
+	ldc r4,VBR                ;!/* 0100nnnn00101110 ldc <REG_N>,VBR     */{"ldc",{A_REG_N,A_VBR},{HEX_4,REG_N,HEX_2,HEX_E}, arch_sh_up}
+	ldc r4,SSR                ;!/* 0100nnnn00111110 ldc <REG_N>,SSR     */{"ldc",{A_REG_N,A_SSR},{HEX_4,REG_N,HEX_3,HEX_E}, arch_sh3_nommu_up}
+	ldc r4,SPC                ;!/* 0100nnnn01001110 ldc <REG_N>,SPC     */{"ldc",{A_REG_N,A_SPC},{HEX_4,REG_N,HEX_4,HEX_E}, arch_sh3_nommu_up}
+	ldc r4,DBR                ;!/* 0100nnnn11111010 ldc <REG_N>,DBR     */{"ldc",{A_REG_N,A_DBR},{HEX_4,REG_N,HEX_F,HEX_A}, arch_sh4_nommu_nofpu_up}
+	ldc r4,r1_bank            ;!/* 0100nnnn1xxx1110 ldc <REG_N>,Rn_BANK */{"ldc",{A_REG_N,A_REG_B},{HEX_4,REG_N,REG_B,HEX_E}, arch_sh3_nommu_up}
+	ldc.l @r4+,SR             ;!/* 0100nnnn00000111 ldc.l @<REG_N>+,SR  */{"ldc.l",{A_INC_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_7}, arch_sh_up}
+	ldc.l @r4+,GBR            ;!/* 0100nnnn00010111 ldc.l @<REG_N>+,GBR */{"ldc.l",{A_INC_N,A_GBR},{HEX_4,REG_N,HEX_1,HEX_7}, arch_sh_up}
+	ldc.l @r4+,VBR            ;!/* 0100nnnn00100111 ldc.l @<REG_N>+,VBR */{"ldc.l",{A_INC_N,A_VBR},{HEX_4,REG_N,HEX_2,HEX_7}, arch_sh_up}
+	ldc.l @r4+,SGR            ;!/* 0100nnnn00110110 ldc.l @<REG_N>+,SGR */{"ldc.l",{A_INC_N,A_SGR},{HEX_4,REG_N,HEX_3,HEX_6}, arch_sh4_nommu_nofpu_up}
+	ldc.l @r4+,SSR            ;!/* 0100nnnn00110111 ldc.l @<REG_N>+,SSR */{"ldc.l",{A_INC_N,A_SSR},{HEX_4,REG_N,HEX_3,HEX_7}, arch_sh3_nommu_up}
+	ldc.l @r4+,SPC            ;!/* 0100nnnn01000111 ldc.l @<REG_N>+,SPC */{"ldc.l",{A_INC_N,A_SPC},{HEX_4,REG_N,HEX_4,HEX_7}, arch_sh3_nommu_up}
+	ldc.l @r4+,DBR            ;!/* 0100nnnn11110110 ldc.l @<REG_N>+,DBR */{"ldc.l",{A_INC_N,A_DBR},{HEX_4,REG_N,HEX_F,HEX_6}, arch_sh4_nommu_nofpu_up}
+	ldc.l @r4+,r1_bank        ;!/* 0100nnnn1xxx0111 ldc.l @<REG_N>+,Rn_BANK */{"ldc.l",{A_INC_N,A_REG_B},{HEX_4,REG_N,REG_B,HEX_7}, arch_sh3_nommu_up}
+	lds r4,MACH               ;!/* 0100nnnn00001010 lds <REG_N>,MACH    */{"lds",{A_REG_N,A_MACH},{HEX_4,REG_N,HEX_0,HEX_A}, arch_sh_up}
+	lds r4,MACL               ;!/* 0100nnnn00011010 lds <REG_N>,MACL    */{"lds",{A_REG_N,A_MACL},{HEX_4,REG_N,HEX_1,HEX_A}, arch_sh_up}
+	lds r4,PR                 ;!/* 0100nnnn00101010 lds <REG_N>,PR      */{"lds",{A_REG_N,A_PR},{HEX_4,REG_N,HEX_2,HEX_A}, arch_sh_up}
+	lds.l @r4+,MACH           ;!/* 0100nnnn00000110 lds.l @<REG_N>+,MACH*/{"lds.l",{A_INC_N,A_MACH},{HEX_4,REG_N,HEX_0,HEX_6}, arch_sh_up}
+	lds.l @r4+,MACL           ;!/* 0100nnnn00010110 lds.l @<REG_N>+,MACL*/{"lds.l",{A_INC_N,A_MACL},{HEX_4,REG_N,HEX_1,HEX_6}, arch_sh_up}
+	lds.l @r4+,PR             ;!/* 0100nnnn00100110 lds.l @<REG_N>+,PR  */{"lds.l",{A_INC_N,A_PR},{HEX_4,REG_N,HEX_2,HEX_6}, arch_sh_up}
+	ldtlb                     ;!/* 0000000000111000 ldtlb               */{"ldtlb",{0},{HEX_0,HEX_0,HEX_3,HEX_8}, arch_sh3_up}
+	mac.w @r5+,@r4+           ;!/* 0100nnnnmmmm1111 mac.w @<REG_M>+,@<REG_N>+*/{"mac.w",{A_INC_M,A_INC_N},{HEX_4,REG_N,REG_M,HEX_F}, arch_sh_up}
+	mov #4,r4                 ;!/* 1110nnnni8*1.... mov #<imm>,<REG_N>  */{"mov",{A_IMM,A_REG_N},{HEX_E,REG_N,IMM0_8}, arch_sh_up}
+	mov r5,r4                 ;!/* 0110nnnnmmmm0011 mov <REG_M>,<REG_N> */{"mov",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_3}, arch_sh_up}
+	mov.b r5,@(R0,r4)         ;!/* 0000nnnnmmmm0100 mov.b <REG_M>,@(R0,<REG_N>)*/{"mov.b",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b r5,@-r4             ;!/* 0010nnnnmmmm0100 mov.b <REG_M>,@-<REG_N>*/{"mov.b",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b r5,@r4              ;!/* 0010nnnnmmmm0000 mov.b <REG_M>,@<REG_N>*/{"mov.b",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_0}, arch_sh_up}
+	mov.b @(8,r5),R0          ;!/* 10000100mmmmi4*1 mov.b @(<disp>,<REG_M>),R0*/{"mov.b",{A_DISP_REG_M,A_R0},{HEX_8,HEX_4,REG_M,IMM0_4}, arch_sh_up}
+	mov.b @(8,GBR),R0         ;!/* 11000100i8*1.... mov.b @(<disp>,GBR),R0*/{"mov.b",{A_DISP_GBR,A_R0},{HEX_C,HEX_4,IMM0_8}, arch_sh_up}
+	mov.b @(R0,r5),r4         ;!/* 0000nnnnmmmm1100 mov.b @(R0,<REG_M>),<REG_N>*/{"mov.b",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_C}, arch_sh_up}
+	mov.b @r5+,r4             ;!/* 0110nnnnmmmm0100 mov.b @<REG_M>+,<REG_N>*/{"mov.b",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b @r5,r4              ;!/* 0110nnnnmmmm0000 mov.b @<REG_M>,<REG_N>*/{"mov.b",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_0}, arch_sh_up}
+	mov.b R0,@(8,r5)          ;!/* 10000000mmmmi4*1 mov.b R0,@(<disp>,<REG_M>)*/{"mov.b",{A_R0,A_DISP_REG_M},{HEX_8,HEX_0,REG_M,IMM1_4}, arch_sh_up}
+	mov.b R0,@(8,GBR)         ;!/* 11000000i8*1.... mov.b R0,@(<disp>,GBR)*/{"mov.b",{A_R0,A_DISP_GBR},{HEX_C,HEX_0,IMM1_8}, arch_sh_up}
+	mov.l r5,@(8,r4)          ;!/* 0001nnnnmmmmi4*4 mov.l <REG_M>,@(<disp>,<REG_N>)*/{"mov.l",{ A_REG_M,A_DISP_REG_N},{HEX_1,REG_N,REG_M,IMM1_4BY4}, arch_sh_up}
+	mov.l r5,@(R0,r4)         ;!/* 0000nnnnmmmm0110 mov.l <REG_M>,@(R0,<REG_N>)*/{"mov.l",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l r5,@-r4             ;!/* 0010nnnnmmmm0110 mov.l <REG_M>,@-<REG_N>*/{"mov.l",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l r5,@r4              ;!/* 0010nnnnmmmm0010 mov.l <REG_M>,@<REG_N>*/{"mov.l",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_2}, arch_sh_up}
+	mov.l @(8,r5),r4          ;!/* 0101nnnnmmmmi4*4 mov.l @(<disp>,<REG_M>),<REG_N>*/{"mov.l",{A_DISP_REG_M,A_REG_N},{HEX_5,REG_N,REG_M,IMM0_4BY4}, arch_sh_up}
+	mov.l @(8,GBR),R0         ;!/* 11000110i8*4.... mov.l @(<disp>,GBR),R0*/{"mov.l",{A_DISP_GBR,A_R0},{HEX_C,HEX_6,IMM0_8BY4}, arch_sh_up}
+	.align 2
+	mov.l @(8,PC),r4 ;!/* 1101nnnni8p4.... mov.l @(<disp>,PC),<REG_N>*/{"mov.l",{A_DISP_PC,A_REG_N},{HEX_D,REG_N,PCRELIMM_8BY4}, arch_sh_up}
+	mov.l @(R0,r5),r4         ;!/* 0000nnnnmmmm1110 mov.l @(R0,<REG_M>),<REG_N>*/{"mov.l",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_E}, arch_sh_up}
+	mov.l @r5+,r4             ;!/* 0110nnnnmmmm0110 mov.l @<REG_M>+,<REG_N>*/{"mov.l",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l @r5,r4              ;!/* 0110nnnnmmmm0010 mov.l @<REG_M>,<REG_N>*/{"mov.l",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_2}, arch_sh_up}
+	mov.l R0,@(8,GBR)         ;!/* 11000010i8*4.... mov.l R0,@(<disp>,GBR)*/{"mov.l",{A_R0,A_DISP_GBR},{HEX_C,HEX_2,IMM1_8BY4}, arch_sh_up}
+	mov.w r5,@(R0,r4)         ;!/* 0000nnnnmmmm0101 mov.w <REG_M>,@(R0,<REG_N>)*/{"mov.w",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w r5,@-r4             ;!/* 0010nnnnmmmm0101 mov.w <REG_M>,@-<REG_N>*/{"mov.w",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w r5,@r4              ;!/* 0010nnnnmmmm0001 mov.w <REG_M>,@<REG_N>*/{"mov.w",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_1}, arch_sh_up}
+	mov.w @(8,r5),R0          ;!/* 10000101mmmmi4*2 mov.w @(<disp>,<REG_M>),R0*/{"mov.w",{A_DISP_REG_M,A_R0},{HEX_8,HEX_5,REG_M,IMM0_4BY2}, arch_sh_up}
+	mov.w @(8,GBR),R0         ;!/* 11000101i8*2.... mov.w @(<disp>,GBR),R0*/{"mov.w",{A_DISP_GBR,A_R0},{HEX_C,HEX_5,IMM0_8BY2}, arch_sh_up}
+	mov.w @(8,PC),r4          ;!/* 1001nnnni8p2.... mov.w @(<disp>,PC),<REG_N>*/{"mov.w",{A_DISP_PC,A_REG_N},{HEX_9,REG_N,PCRELIMM_8BY2}, arch_sh_up}
+	mov.w @(R0,r5),r4         ;!/* 0000nnnnmmmm1101 mov.w @(R0,<REG_M>),<REG_N>*/{"mov.w",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_D}, arch_sh_up}
+	mov.w @r5+,r4             ;!/* 0110nnnnmmmm0101 mov.w @<REG_M>+,<REG_N>*/{"mov.w",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w @r5,r4              ;!/* 0110nnnnmmmm0001 mov.w @<REG_M>,<REG_N>*/{"mov.w",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_1}, arch_sh_up}
+	mov.w R0,@(8,r5)          ;!/* 10000001mmmmi4*2 mov.w R0,@(<disp>,<REG_M>)*/{"mov.w",{A_R0,A_DISP_REG_M},{HEX_8,HEX_1,REG_M,IMM1_4BY2}, arch_sh_up}
+	mov.w R0,@(8,GBR)         ;!/* 11000001i8*2.... mov.w R0,@(<disp>,GBR)*/{"mov.w",{A_R0,A_DISP_GBR},{HEX_C,HEX_1,IMM1_8BY2}, arch_sh_up}
+	.align 2
+	mova @(8,PC),R0 ;!/* 11000111i8p4.... mova @(<disp>,PC),R0*/{"mova",{A_DISP_PC,A_R0},{HEX_C,HEX_7,PCRELIMM_8BY4}, arch_sh_up}
+	movca.l R0,@r4            ;!/* 0000nnnn11000011 movca.l R0,@<REG_N> */{"movca.l",{A_R0,A_IND_N},{HEX_0,REG_N,HEX_C,HEX_3}, arch_sh4_nommu_nofpu_up}
+	movt r4                   ;!/* 0000nnnn00101001 movt <REG_N>        */{"movt",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_9}, arch_sh_up}
+	muls.w r5,r4              ;!/* 0010nnnnmmmm1111 muls.w <REG_M>,<REG_N>*/{"muls.w",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_F}, arch_sh_up}
+	muls r5,r4                ;!/* 0010nnnnmmmm1111 muls <REG_M>,<REG_N>*/{"muls",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_F}, arch_sh_up}
+	mul.l r5,r4               ;!/* 0000nnnnmmmm0111 mul.l <REG_M>,<REG_N>*/{"mul.l",{ A_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_7}, arch_sh2_up}
+	mulu.w r5,r4              ;!/* 0010nnnnmmmm1110 mulu.w <REG_M>,<REG_N>*/{"mulu.w",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_E}, arch_sh_up}
+	mulu r5,r4                ;!/* 0010nnnnmmmm1110 mulu <REG_M>,<REG_N>*/{"mulu",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_E}, arch_sh_up}
+	neg r5,r4                 ;!/* 0110nnnnmmmm1011 neg <REG_M>,<REG_N> */{"neg",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_B}, arch_sh_up}
+	negc r5,r4                ;!/* 0110nnnnmmmm1010 negc <REG_M>,<REG_N>*/{"negc",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_A}, arch_sh_up}
+	nop                       ;!/* 0000000000001001 nop                 */{"nop",{0},{HEX_0,HEX_0,HEX_0,HEX_9}, arch_sh_up}
+	not r5,r4                 ;!/* 0110nnnnmmmm0111 not <REG_M>,<REG_N> */{"not",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_7}, arch_sh_up}
+	ocbi @r4                  ;!/* 0000nnnn10010011 ocbi @<REG_N>       */{"ocbi",{A_IND_N},{HEX_0,REG_N,HEX_9,HEX_3}, arch_sh4_nommu_nofpu_up}
+	ocbp @r4                  ;!/* 0000nnnn10100011 ocbp @<REG_N>       */{"ocbp",{A_IND_N},{HEX_0,REG_N,HEX_A,HEX_3}, arch_sh4_nommu_nofpu_up}
+	ocbwb @r4                 ;!/* 0000nnnn10110011 ocbwb @<REG_N>      */{"ocbwb",{A_IND_N},{HEX_0,REG_N,HEX_B,HEX_3}, arch_sh4_nommu_nofpu_up}
+	or #4,R0                  ;!/* 11001011i8*1.... or #<imm>,R0        */{"or",{A_IMM,A_R0},{HEX_C,HEX_B,IMM0_8}, arch_sh_up}
+	or r5,r4                  ;!/* 0010nnnnmmmm1011 or <REG_M>,<REG_N>  */{"or",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_B}, arch_sh_up}
+	or.b #4,@(R0,GBR)         ;!/* 11001111i8*1.... or.b #<imm>,@(R0,GBR)*/{"or.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_F,IMM0_8}, arch_sh_up}
+	pref @r4                  ;!/* 0000nnnn10000011 pref @<REG_N>       */{"pref",{A_IND_N},{HEX_0,REG_N,HEX_8,HEX_3}, arch_sh2a_nofpu_or_sh4_nommu_nofpu_up}
+	rotcl r4                  ;!/* 0100nnnn00100100 rotcl <REG_N>       */{"rotcl",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_4}, arch_sh_up}
+	rotcr r4                  ;!/* 0100nnnn00100101 rotcr <REG_N>       */{"rotcr",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_5}, arch_sh_up}
+	rotl r4                   ;!/* 0100nnnn00000100 rotl <REG_N>        */{"rotl",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_4}, arch_sh_up}
+	rotr r4                   ;!/* 0100nnnn00000101 rotr <REG_N>        */{"rotr",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_5}, arch_sh_up}
+	rte                       ;!/* 0000000000101011 rte                 */{"rte",{0},{HEX_0,HEX_0,HEX_2,HEX_B}, arch_sh_up}
+	rts                       ;!/* 0000000000001011 rts                 */{"rts",{0},{HEX_0,HEX_0,HEX_0,HEX_B}, arch_sh_up}
+	sets                      ;!/* 0000000001011000 sets                */{"sets",{0},{HEX_0,HEX_0,HEX_5,HEX_8}, arch_sh_up}
+	sett                      ;!/* 0000000000011000 sett                */{"sett",{0},{HEX_0,HEX_0,HEX_1,HEX_8}, arch_sh_up}
+	shad r5,r4                ;!/* 0100nnnnmmmm1100 shad <REG_M>,<REG_N>*/{"shad",{ A_REG_M,A_REG_N},{HEX_4,REG_N,REG_M,HEX_C}, arch_sh2a_nofpu_or_sh3_nommu_up}
+	shld r5,r4                ;!/* 0100nnnnmmmm1101 shld <REG_M>,<REG_N>*/{"shld",{ A_REG_M,A_REG_N},{HEX_4,REG_N,REG_M,HEX_D}, arch_sh2a_nofpu_or_sh3_nommu_up}
+	shal r4                   ;!/* 0100nnnn00100000 shal <REG_N>        */{"shal",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_0}, arch_sh_up}
+	shar r4                   ;!/* 0100nnnn00100001 shar <REG_N>        */{"shar",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_1}, arch_sh_up}
+	shll r4                   ;!/* 0100nnnn00000000 shll <REG_N>        */{"shll",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_0}, arch_sh_up}
+	shll16 r4                 ;!/* 0100nnnn00101000 shll16 <REG_N>      */{"shll16",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_8}, arch_sh_up}
+	shll2 r4                  ;!/* 0100nnnn00001000 shll2 <REG_N>       */{"shll2",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_8}, arch_sh_up}
+	shll8 r4                  ;!/* 0100nnnn00011000 shll8 <REG_N>       */{"shll8",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_8}, arch_sh_up}
+	shlr r4                   ;!/* 0100nnnn00000001 shlr <REG_N>        */{"shlr",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_1}, arch_sh_up}
+	shlr16 r4                 ;!/* 0100nnnn00101001 shlr16 <REG_N>      */{"shlr16",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_9}, arch_sh_up}
+	shlr2 r4                  ;!/* 0100nnnn00001001 shlr2 <REG_N>       */{"shlr2",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_9}, arch_sh_up}
+	shlr8 r4                  ;!/* 0100nnnn00011001 shlr8 <REG_N>       */{"shlr8",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_9}, arch_sh_up}
+	sleep                     ;!/* 0000000000011011 sleep               */{"sleep",{0},{HEX_0,HEX_0,HEX_1,HEX_B}, arch_sh_up}
+	stc SR,r4                 ;!/* 0000nnnn00000010 stc SR,<REG_N>      */{"stc",{A_SR,A_REG_N},{HEX_0,REG_N,HEX_0,HEX_2}, arch_sh_up}
+	stc GBR,r4                ;!/* 0000nnnn00010010 stc GBR,<REG_N>     */{"stc",{A_GBR,A_REG_N},{HEX_0,REG_N,HEX_1,HEX_2}, arch_sh_up}
+	stc VBR,r4                ;!/* 0000nnnn00100010 stc VBR,<REG_N>     */{"stc",{A_VBR,A_REG_N},{HEX_0,REG_N,HEX_2,HEX_2}, arch_sh_up}
+	stc SSR,r4                ;!/* 0000nnnn00110010 stc SSR,<REG_N>     */{"stc",{A_SSR,A_REG_N},{HEX_0,REG_N,HEX_3,HEX_2}, arch_sh3_nommu_up}
+	stc SPC,r4                ;!/* 0000nnnn01000010 stc SPC,<REG_N>     */{"stc",{A_SPC,A_REG_N},{HEX_0,REG_N,HEX_4,HEX_2}, arch_sh3_nommu_up}
+	stc SGR,r4                ;!/* 0000nnnn00111010 stc SGR,<REG_N>     */{"stc",{A_SGR,A_REG_N},{HEX_0,REG_N,HEX_3,HEX_A}, arch_sh4_nommu_nofpu_up}
+	stc DBR,r4                ;!/* 0000nnnn11111010 stc DBR,<REG_N>     */{"stc",{A_DBR,A_REG_N},{HEX_0,REG_N,HEX_F,HEX_A}, arch_sh4_nommu_nofpu_up}
+	stc r1_bank,r4            ;!/* 0000nnnn1xxx0010 stc Rn_BANK,<REG_N> */{"stc",{A_REG_B,A_REG_N},{HEX_0,REG_N,REG_B,HEX_2}, arch_sh3_nommu_up}
+	stc.l SR,@-r4             ;!/* 0100nnnn00000011 stc.l SR,@-<REG_N>  */{"stc.l",{A_SR,A_DEC_N},{HEX_4,REG_N,HEX_0,HEX_3}, arch_sh_up}
+	stc.l VBR,@-r4            ;!/* 0100nnnn00100011 stc.l VBR,@-<REG_N> */{"stc.l",{A_VBR,A_DEC_N},{HEX_4,REG_N,HEX_2,HEX_3}, arch_sh_up}
+	stc.l SSR,@-r4            ;!/* 0100nnnn00110011 stc.l SSR,@-<REG_N> */{"stc.l",{A_SSR,A_DEC_N},{HEX_4,REG_N,HEX_3,HEX_3}, arch_sh3_nommu_up}
+	stc.l SPC,@-r4            ;!/* 0100nnnn01000011 stc.l SPC,@-<REG_N> */{"stc.l",{A_SPC,A_DEC_N},{HEX_4,REG_N,HEX_4,HEX_3}, arch_sh3_nommu_up}
+	stc.l GBR,@-r4            ;!/* 0100nnnn00010011 stc.l GBR,@-<REG_N> */{"stc.l",{A_GBR,A_DEC_N},{HEX_4,REG_N,HEX_1,HEX_3}, arch_sh_up}
+	stc.l SGR,@-r4            ;!/* 0100nnnn00110010 stc.l SGR,@-<REG_N> */{"stc.l",{A_SGR,A_DEC_N},{HEX_4,REG_N,HEX_3,HEX_2}, arch_sh4_nommu_nofpu_up}
+	stc.l DBR,@-r4            ;!/* 0100nnnn11110010 stc.l DBR,@-<REG_N> */{"stc.l",{A_DBR,A_DEC_N},{HEX_4,REG_N,HEX_F,HEX_2}, arch_sh4_nommu_nofpu_up}
+	stc.l r1_bank,@-r4        ;!/* 0100nnnn1xxx0011 stc.l Rn_BANK,@-<REG_N> */{"stc.l",{A_REG_B,A_DEC_N},{HEX_4,REG_N,REG_B,HEX_3}, arch_sh3_nommu_up}
+	sts MACH,r4               ;!/* 0000nnnn00001010 sts MACH,<REG_N>    */{"sts",{A_MACH,A_REG_N},{HEX_0,REG_N,HEX_0,HEX_A}, arch_sh_up}
+	sts MACL,r4               ;!/* 0000nnnn00011010 sts MACL,<REG_N>    */{"sts",{A_MACL,A_REG_N},{HEX_0,REG_N,HEX_1,HEX_A}, arch_sh_up}
+	sts PR,r4                 ;!/* 0000nnnn00101010 sts PR,<REG_N>      */{"sts",{A_PR,A_REG_N},{HEX_0,REG_N,HEX_2,HEX_A}, arch_sh_up}
+	sts.l MACH,@-r4           ;!/* 0100nnnn00000010 sts.l MACH,@-<REG_N>*/{"sts.l",{A_MACH,A_DEC_N},{HEX_4,REG_N,HEX_0,HEX_2}, arch_sh_up}
+	sts.l MACL,@-r4           ;!/* 0100nnnn00010010 sts.l MACL,@-<REG_N>*/{"sts.l",{A_MACL,A_DEC_N},{HEX_4,REG_N,HEX_1,HEX_2}, arch_sh_up}
+	sts.l PR,@-r4             ;!/* 0100nnnn00100010 sts.l PR,@-<REG_N>  */{"sts.l",{A_PR,A_DEC_N},{HEX_4,REG_N,HEX_2,HEX_2}, arch_sh_up}
+	sub r5,r4                 ;!/* 0011nnnnmmmm1000 sub <REG_M>,<REG_N> */{"sub",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_8}, arch_sh_up}
+	subc r5,r4                ;!/* 0011nnnnmmmm1010 subc <REG_M>,<REG_N>*/{"subc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_A}, arch_sh_up}
+	subv r5,r4                ;!/* 0011nnnnmmmm1011 subv <REG_M>,<REG_N>*/{"subv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_B}, arch_sh_up}
+	swap.b r5,r4              ;!/* 0110nnnnmmmm1000 swap.b <REG_M>,<REG_N>*/{"swap.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_8}, arch_sh_up}
+	swap.w r5,r4              ;!/* 0110nnnnmmmm1001 swap.w <REG_M>,<REG_N>*/{"swap.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_9}, arch_sh_up}
+	synco                     ;!/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
+	tas.b @r4                 ;!/* 0100nnnn00011011 tas.b @<REG_N>      */{"tas.b",{A_IND_N},{HEX_4,REG_N,HEX_1,HEX_B}, arch_sh_up}
+	trapa #4                  ;!/* 11000011i8*1.... trapa #<imm>        */{"trapa",{A_IMM},{HEX_C,HEX_3,IMM0_8}, arch_sh_up}
+	tst #4,R0                 ;!/* 11001000i8*1.... tst #<imm>,R0       */{"tst",{A_IMM,A_R0},{HEX_C,HEX_8,IMM0_8}, arch_sh_up}
+	tst r5,r4                 ;!/* 0010nnnnmmmm1000 tst <REG_M>,<REG_N> */{"tst",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_8}, arch_sh_up}
+	tst.b #4,@(R0,GBR)        ;!/* 11001100i8*1.... tst.b #<imm>,@(R0,GBR)*/{"tst.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_C,IMM0_8}, arch_sh_up}
+	xor #4,R0                 ;!/* 11001010i8*1.... xor #<imm>,R0       */{"xor",{A_IMM,A_R0},{HEX_C,HEX_A,IMM0_8}, arch_sh_up}
+	xor r5,r4                 ;!/* 0010nnnnmmmm1010 xor <REG_M>,<REG_N> */{"xor",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_A}, arch_sh_up}
+	xor.b #4,@(R0,GBR)        ;!/* 11001110i8*1.... xor.b #<imm>,@(R0,GBR)*/{"xor.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_E,IMM0_8}, arch_sh_up}
+	xtrct r5,r4               ;!/* 0010nnnnmmmm1101 xtrct <REG_M>,<REG_N>*/{"xtrct",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_D}, arch_sh_up}
+	dt r4                     ;!/* 0100nnnn00010000 dt <REG_N>          */{"dt",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_0}, arch_sh2_up}
+	dmuls.l r5,r4             ;!/* 0011nnnnmmmm1101 dmuls.l <REG_M>,<REG_N>*/{"dmuls.l",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_D}, arch_sh2_up}
+	dmulu.l r5,r4             ;!/* 0011nnnnmmmm0101 dmulu.l <REG_M>,<REG_N>*/{"dmulu.l",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_5}, arch_sh2_up}
+	mac.l @r5+,@r4+           ;!/* 0000nnnnmmmm1111 mac.l @<REG_M>+,@<REG_N>+*/{"mac.l",{A_INC_M,A_INC_N},{HEX_0,REG_N,REG_M,HEX_F}, arch_sh2_up}
+	braf r4                   ;!/* 0000nnnn00100011 braf <REG_N>       */{"braf",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_3}, arch_sh2_up}
+	bsrf r4                   ;!/* 0000nnnn00000011 bsrf <REG_N>       */{"bsrf",{A_REG_N},{HEX_0,REG_N,HEX_0,HEX_3}, arch_sh2_up}
+	mulr R0,r4                ;!/* 0100nnnn10000000 mulr R0,<REG_N> */       {"mulr",{A_R0,A_REG_N},{HEX_4,REG_N,HEX_8,HEX_0}, arch_st40_300_nofpu_or_sh2a_nofpu_up}
Index: binutils/gas/testsuite/gas/sh/arch/st40-300-nofpu-or-sh4a-nofpu.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/st40-300-nofpu-or-sh4a-nofpu.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/gas/testsuite/gas/sh/arch/st40-300-nofpu-or-sh4a-nofpu.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,196 @@
+! Generated file. DO NOT EDIT.
+!
+! This file was generated by gas/testsuite/gas/sh/arch/arch.exp .
+! This file should contain every instruction valid on
+! architecture st40-300-nofpu-or-sh4a-nofpu but no more.
+! If the tests are failing because the expected results
+! have changed then run 'make check' and copy the new file
+! from <objdir>/gas/testsuite/st40-300-nofpu-or-sh4a-nofpu.s
+! to   <srcdir>/gas/testsuite/gas/sh/arch/st40-300-nofpu-or-sh4a-nofpu.s .
+! Make sure there are no unexpected or missing instructions.
+
+	.section .text
+st40_300_nofpu_or_sh4a_nofpu:
+! Instructions introduced into st40-300-nofpu-or-sh4a-nofpu
+	icbi @r4                  ;!/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
+	synco                     ;!/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
+
+! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh3 sh3-nommu sh4-nofpu sh4-nommu-nofpu
+	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
+	add r5,r4                 ;!/* 0011nnnnmmmm1100 add <REG_M>,<REG_N> */{"add",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_C}, arch_sh_up}
+	addc r5,r4                ;!/* 0011nnnnmmmm1110 addc <REG_M>,<REG_N>*/{"addc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_E}, arch_sh_up}
+	addv r5,r4                ;!/* 0011nnnnmmmm1111 addv <REG_M>,<REG_N>*/{"addv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_F}, arch_sh_up}
+	and #4,R0                 ;!/* 11001001i8*1.... and #<imm>,R0       */{"and",{A_IMM,A_R0},{HEX_C,HEX_9,IMM0_8}, arch_sh_up}
+	and r5,r4                 ;!/* 0010nnnnmmmm1001 and <REG_M>,<REG_N> */{"and",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_9}, arch_sh_up}
+	and.b #4,@(R0,GBR)        ;!/* 11001101i8*1.... and.b #<imm>,@(R0,GBR)*/{"and.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_D,IMM0_8}, arch_sh_up}
+	bra .+8                   ;!/* 1010i12......... bra <bdisp12>       */{"bra",{A_BDISP12},{HEX_A,BRANCH_12}, arch_sh_up}
+	bsr .+8                   ;!/* 1011i12......... bsr <bdisp12>       */{"bsr",{A_BDISP12},{HEX_B,BRANCH_12}, arch_sh_up}
+	bt .+8                    ;!/* 10001001i8p1.... bt <bdisp8>         */{"bt",{A_BDISP8},{HEX_8,HEX_9,BRANCH_8}, arch_sh_up}
+	bf .+8                    ;!/* 10001011i8p1.... bf <bdisp8>         */{"bf",{A_BDISP8},{HEX_8,HEX_B,BRANCH_8}, arch_sh_up}
+	bt.s .+8                  ;!/* 10001101i8p1.... bt.s <bdisp8>       */{"bt.s",{A_BDISP8},{HEX_8,HEX_D,BRANCH_8}, arch_sh2_up}
+	bt/s .+8                  ;!/* 10001101i8p1.... bt/s <bdisp8>       */{"bt/s",{A_BDISP8},{HEX_8,HEX_D,BRANCH_8}, arch_sh2_up}
+	bf.s .+8                  ;!/* 10001111i8p1.... bf.s <bdisp8>       */{"bf.s",{A_BDISP8},{HEX_8,HEX_F,BRANCH_8}, arch_sh2_up}
+	bf/s .+8                  ;!/* 10001111i8p1.... bf/s <bdisp8>       */{"bf/s",{A_BDISP8},{HEX_8,HEX_F,BRANCH_8}, arch_sh2_up}
+	clrmac                    ;!/* 0000000000101000 clrmac              */{"clrmac",{0},{HEX_0,HEX_0,HEX_2,HEX_8}, arch_sh_up}
+	clrs                      ;!/* 0000000001001000 clrs                */{"clrs",{0},{HEX_0,HEX_0,HEX_4,HEX_8}, arch_sh_up}
+	clrt                      ;!/* 0000000000001000 clrt                */{"clrt",{0},{HEX_0,HEX_0,HEX_0,HEX_8}, arch_sh_up}
+	cmp/eq #4,R0              ;!/* 10001000i8*1.... cmp/eq #<imm>,R0    */{"cmp/eq",{A_IMM,A_R0},{HEX_8,HEX_8,IMM0_8}, arch_sh_up}
+	cmp/eq r5,r4              ;!/* 0011nnnnmmmm0000 cmp/eq <REG_M>,<REG_N>*/{"cmp/eq",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_0}, arch_sh_up}
+	cmp/ge r5,r4              ;!/* 0011nnnnmmmm0011 cmp/ge <REG_M>,<REG_N>*/{"cmp/ge",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_3}, arch_sh_up}
+	cmp/gt r5,r4              ;!/* 0011nnnnmmmm0111 cmp/gt <REG_M>,<REG_N>*/{"cmp/gt",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_7}, arch_sh_up}
+	cmp/hi r5,r4              ;!/* 0011nnnnmmmm0110 cmp/hi <REG_M>,<REG_N>*/{"cmp/hi",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_6}, arch_sh_up}
+	cmp/hs r5,r4              ;!/* 0011nnnnmmmm0010 cmp/hs <REG_M>,<REG_N>*/{"cmp/hs",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_2}, arch_sh_up}
+	cmp/pl r4                 ;!/* 0100nnnn00010101 cmp/pl <REG_N>      */{"cmp/pl",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_5}, arch_sh_up}
+	cmp/pz r4                 ;!/* 0100nnnn00010001 cmp/pz <REG_N>      */{"cmp/pz",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_1}, arch_sh_up}
+	cmp/str r5,r4             ;!/* 0010nnnnmmmm1100 cmp/str <REG_M>,<REG_N>*/{"cmp/str",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_C}, arch_sh_up}
+	div0s r5,r4               ;!/* 0010nnnnmmmm0111 div0s <REG_M>,<REG_N>*/{"div0s",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_7}, arch_sh_up}
+	div0u                     ;!/* 0000000000011001 div0u               */{"div0u",{0},{HEX_0,HEX_0,HEX_1,HEX_9}, arch_sh_up}
+	div1 r5,r4                ;!/* 0011nnnnmmmm0100 div1 <REG_M>,<REG_N>*/{"div1",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_4}, arch_sh_up}
+	exts.b r5,r4              ;!/* 0110nnnnmmmm1110 exts.b <REG_M>,<REG_N>*/{"exts.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_E}, arch_sh_up}
+	exts.w r5,r4              ;!/* 0110nnnnmmmm1111 exts.w <REG_M>,<REG_N>*/{"exts.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_F}, arch_sh_up}
+	extu.b r5,r4              ;!/* 0110nnnnmmmm1100 extu.b <REG_M>,<REG_N>*/{"extu.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_C}, arch_sh_up}
+	extu.w r5,r4              ;!/* 0110nnnnmmmm1101 extu.w <REG_M>,<REG_N>*/{"extu.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_D}, arch_sh_up}
+	jmp @r4                   ;!/* 0100nnnn00101011 jmp @<REG_N>        */{"jmp",{A_IND_N},{HEX_4,REG_N,HEX_2,HEX_B}, arch_sh_up}
+	jsr @r4                   ;!/* 0100nnnn00001011 jsr @<REG_N>        */{"jsr",{A_IND_N},{HEX_4,REG_N,HEX_0,HEX_B}, arch_sh_up}
+	ldc r4,SR                 ;!/* 0100nnnn00001110 ldc <REG_N>,SR      */{"ldc",{A_REG_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_E}, arch_sh_up}
+	ldc r4,GBR                ;!/* 0100nnnn00011110 ldc <REG_N>,GBR     */{"ldc",{A_REG_N,A_GBR},{HEX_4,REG_N,HEX_1,HEX_E}, arch_sh_up}
+	ldc r4,SGR                ;!/* 0100nnnn00111010 ldc <REG_N>,SGR     */{"ldc",{A_REG_N,A_SGR},{HEX_4,REG_N,HEX_3,HEX_A}, arch_sh4_nommu_nofpu_up}
+	ldc r4,VBR                ;!/* 0100nnnn00101110 ldc <REG_N>,VBR     */{"ldc",{A_REG_N,A_VBR},{HEX_4,REG_N,HEX_2,HEX_E}, arch_sh_up}
+	ldc r4,SSR                ;!/* 0100nnnn00111110 ldc <REG_N>,SSR     */{"ldc",{A_REG_N,A_SSR},{HEX_4,REG_N,HEX_3,HEX_E}, arch_sh3_nommu_up}
+	ldc r4,SPC                ;!/* 0100nnnn01001110 ldc <REG_N>,SPC     */{"ldc",{A_REG_N,A_SPC},{HEX_4,REG_N,HEX_4,HEX_E}, arch_sh3_nommu_up}
+	ldc r4,DBR                ;!/* 0100nnnn11111010 ldc <REG_N>,DBR     */{"ldc",{A_REG_N,A_DBR},{HEX_4,REG_N,HEX_F,HEX_A}, arch_sh4_nommu_nofpu_up}
+	ldc r4,r1_bank            ;!/* 0100nnnn1xxx1110 ldc <REG_N>,Rn_BANK */{"ldc",{A_REG_N,A_REG_B},{HEX_4,REG_N,REG_B,HEX_E}, arch_sh3_nommu_up}
+	ldc.l @r4+,SR             ;!/* 0100nnnn00000111 ldc.l @<REG_N>+,SR  */{"ldc.l",{A_INC_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_7}, arch_sh_up}
+	ldc.l @r4+,GBR            ;!/* 0100nnnn00010111 ldc.l @<REG_N>+,GBR */{"ldc.l",{A_INC_N,A_GBR},{HEX_4,REG_N,HEX_1,HEX_7}, arch_sh_up}
+	ldc.l @r4+,VBR            ;!/* 0100nnnn00100111 ldc.l @<REG_N>+,VBR */{"ldc.l",{A_INC_N,A_VBR},{HEX_4,REG_N,HEX_2,HEX_7}, arch_sh_up}
+	ldc.l @r4+,SGR            ;!/* 0100nnnn00110110 ldc.l @<REG_N>+,SGR */{"ldc.l",{A_INC_N,A_SGR},{HEX_4,REG_N,HEX_3,HEX_6}, arch_sh4_nommu_nofpu_up}
+	ldc.l @r4+,SSR            ;!/* 0100nnnn00110111 ldc.l @<REG_N>+,SSR */{"ldc.l",{A_INC_N,A_SSR},{HEX_4,REG_N,HEX_3,HEX_7}, arch_sh3_nommu_up}
+	ldc.l @r4+,SPC            ;!/* 0100nnnn01000111 ldc.l @<REG_N>+,SPC */{"ldc.l",{A_INC_N,A_SPC},{HEX_4,REG_N,HEX_4,HEX_7}, arch_sh3_nommu_up}
+	ldc.l @r4+,DBR            ;!/* 0100nnnn11110110 ldc.l @<REG_N>+,DBR */{"ldc.l",{A_INC_N,A_DBR},{HEX_4,REG_N,HEX_F,HEX_6}, arch_sh4_nommu_nofpu_up}
+	ldc.l @r4+,r1_bank        ;!/* 0100nnnn1xxx0111 ldc.l @<REG_N>+,Rn_BANK */{"ldc.l",{A_INC_N,A_REG_B},{HEX_4,REG_N,REG_B,HEX_7}, arch_sh3_nommu_up}
+	lds r4,MACH               ;!/* 0100nnnn00001010 lds <REG_N>,MACH    */{"lds",{A_REG_N,A_MACH},{HEX_4,REG_N,HEX_0,HEX_A}, arch_sh_up}
+	lds r4,MACL               ;!/* 0100nnnn00011010 lds <REG_N>,MACL    */{"lds",{A_REG_N,A_MACL},{HEX_4,REG_N,HEX_1,HEX_A}, arch_sh_up}
+	lds r4,PR                 ;!/* 0100nnnn00101010 lds <REG_N>,PR      */{"lds",{A_REG_N,A_PR},{HEX_4,REG_N,HEX_2,HEX_A}, arch_sh_up}
+	lds.l @r4+,MACH           ;!/* 0100nnnn00000110 lds.l @<REG_N>+,MACH*/{"lds.l",{A_INC_N,A_MACH},{HEX_4,REG_N,HEX_0,HEX_6}, arch_sh_up}
+	lds.l @r4+,MACL           ;!/* 0100nnnn00010110 lds.l @<REG_N>+,MACL*/{"lds.l",{A_INC_N,A_MACL},{HEX_4,REG_N,HEX_1,HEX_6}, arch_sh_up}
+	lds.l @r4+,PR             ;!/* 0100nnnn00100110 lds.l @<REG_N>+,PR  */{"lds.l",{A_INC_N,A_PR},{HEX_4,REG_N,HEX_2,HEX_6}, arch_sh_up}
+	ldtlb                     ;!/* 0000000000111000 ldtlb               */{"ldtlb",{0},{HEX_0,HEX_0,HEX_3,HEX_8}, arch_sh3_up}
+	mac.w @r5+,@r4+           ;!/* 0100nnnnmmmm1111 mac.w @<REG_M>+,@<REG_N>+*/{"mac.w",{A_INC_M,A_INC_N},{HEX_4,REG_N,REG_M,HEX_F}, arch_sh_up}
+	mov #4,r4                 ;!/* 1110nnnni8*1.... mov #<imm>,<REG_N>  */{"mov",{A_IMM,A_REG_N},{HEX_E,REG_N,IMM0_8}, arch_sh_up}
+	mov r5,r4                 ;!/* 0110nnnnmmmm0011 mov <REG_M>,<REG_N> */{"mov",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_3}, arch_sh_up}
+	mov.b r5,@(R0,r4)         ;!/* 0000nnnnmmmm0100 mov.b <REG_M>,@(R0,<REG_N>)*/{"mov.b",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b r5,@-r4             ;!/* 0010nnnnmmmm0100 mov.b <REG_M>,@-<REG_N>*/{"mov.b",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b r5,@r4              ;!/* 0010nnnnmmmm0000 mov.b <REG_M>,@<REG_N>*/{"mov.b",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_0}, arch_sh_up}
+	mov.b @(8,r5),R0          ;!/* 10000100mmmmi4*1 mov.b @(<disp>,<REG_M>),R0*/{"mov.b",{A_DISP_REG_M,A_R0},{HEX_8,HEX_4,REG_M,IMM0_4}, arch_sh_up}
+	mov.b @(8,GBR),R0         ;!/* 11000100i8*1.... mov.b @(<disp>,GBR),R0*/{"mov.b",{A_DISP_GBR,A_R0},{HEX_C,HEX_4,IMM0_8}, arch_sh_up}
+	mov.b @(R0,r5),r4         ;!/* 0000nnnnmmmm1100 mov.b @(R0,<REG_M>),<REG_N>*/{"mov.b",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_C}, arch_sh_up}
+	mov.b @r5+,r4             ;!/* 0110nnnnmmmm0100 mov.b @<REG_M>+,<REG_N>*/{"mov.b",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b @r5,r4              ;!/* 0110nnnnmmmm0000 mov.b @<REG_M>,<REG_N>*/{"mov.b",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_0}, arch_sh_up}
+	mov.b R0,@(8,r5)          ;!/* 10000000mmmmi4*1 mov.b R0,@(<disp>,<REG_M>)*/{"mov.b",{A_R0,A_DISP_REG_M},{HEX_8,HEX_0,REG_M,IMM1_4}, arch_sh_up}
+	mov.b R0,@(8,GBR)         ;!/* 11000000i8*1.... mov.b R0,@(<disp>,GBR)*/{"mov.b",{A_R0,A_DISP_GBR},{HEX_C,HEX_0,IMM1_8}, arch_sh_up}
+	mov.l r5,@(8,r4)          ;!/* 0001nnnnmmmmi4*4 mov.l <REG_M>,@(<disp>,<REG_N>)*/{"mov.l",{ A_REG_M,A_DISP_REG_N},{HEX_1,REG_N,REG_M,IMM1_4BY4}, arch_sh_up}
+	mov.l r5,@(R0,r4)         ;!/* 0000nnnnmmmm0110 mov.l <REG_M>,@(R0,<REG_N>)*/{"mov.l",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l r5,@-r4             ;!/* 0010nnnnmmmm0110 mov.l <REG_M>,@-<REG_N>*/{"mov.l",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l r5,@r4              ;!/* 0010nnnnmmmm0010 mov.l <REG_M>,@<REG_N>*/{"mov.l",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_2}, arch_sh_up}
+	mov.l @(8,r5),r4          ;!/* 0101nnnnmmmmi4*4 mov.l @(<disp>,<REG_M>),<REG_N>*/{"mov.l",{A_DISP_REG_M,A_REG_N},{HEX_5,REG_N,REG_M,IMM0_4BY4}, arch_sh_up}
+	mov.l @(8,GBR),R0         ;!/* 11000110i8*4.... mov.l @(<disp>,GBR),R0*/{"mov.l",{A_DISP_GBR,A_R0},{HEX_C,HEX_6,IMM0_8BY4}, arch_sh_up}
+	.align 2
+	mov.l @(8,PC),r4 ;!/* 1101nnnni8p4.... mov.l @(<disp>,PC),<REG_N>*/{"mov.l",{A_DISP_PC,A_REG_N},{HEX_D,REG_N,PCRELIMM_8BY4}, arch_sh_up}
+	mov.l @(R0,r5),r4         ;!/* 0000nnnnmmmm1110 mov.l @(R0,<REG_M>),<REG_N>*/{"mov.l",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_E}, arch_sh_up}
+	mov.l @r5+,r4             ;!/* 0110nnnnmmmm0110 mov.l @<REG_M>+,<REG_N>*/{"mov.l",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l @r5,r4              ;!/* 0110nnnnmmmm0010 mov.l @<REG_M>,<REG_N>*/{"mov.l",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_2}, arch_sh_up}
+	mov.l R0,@(8,GBR)         ;!/* 11000010i8*4.... mov.l R0,@(<disp>,GBR)*/{"mov.l",{A_R0,A_DISP_GBR},{HEX_C,HEX_2,IMM1_8BY4}, arch_sh_up}
+	mov.w r5,@(R0,r4)         ;!/* 0000nnnnmmmm0101 mov.w <REG_M>,@(R0,<REG_N>)*/{"mov.w",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w r5,@-r4             ;!/* 0010nnnnmmmm0101 mov.w <REG_M>,@-<REG_N>*/{"mov.w",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w r5,@r4              ;!/* 0010nnnnmmmm0001 mov.w <REG_M>,@<REG_N>*/{"mov.w",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_1}, arch_sh_up}
+	mov.w @(8,r5),R0          ;!/* 10000101mmmmi4*2 mov.w @(<disp>,<REG_M>),R0*/{"mov.w",{A_DISP_REG_M,A_R0},{HEX_8,HEX_5,REG_M,IMM0_4BY2}, arch_sh_up}
+	mov.w @(8,GBR),R0         ;!/* 11000101i8*2.... mov.w @(<disp>,GBR),R0*/{"mov.w",{A_DISP_GBR,A_R0},{HEX_C,HEX_5,IMM0_8BY2}, arch_sh_up}
+	mov.w @(8,PC),r4          ;!/* 1001nnnni8p2.... mov.w @(<disp>,PC),<REG_N>*/{"mov.w",{A_DISP_PC,A_REG_N},{HEX_9,REG_N,PCRELIMM_8BY2}, arch_sh_up}
+	mov.w @(R0,r5),r4         ;!/* 0000nnnnmmmm1101 mov.w @(R0,<REG_M>),<REG_N>*/{"mov.w",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_D}, arch_sh_up}
+	mov.w @r5+,r4             ;!/* 0110nnnnmmmm0101 mov.w @<REG_M>+,<REG_N>*/{"mov.w",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w @r5,r4              ;!/* 0110nnnnmmmm0001 mov.w @<REG_M>,<REG_N>*/{"mov.w",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_1}, arch_sh_up}
+	mov.w R0,@(8,r5)          ;!/* 10000001mmmmi4*2 mov.w R0,@(<disp>,<REG_M>)*/{"mov.w",{A_R0,A_DISP_REG_M},{HEX_8,HEX_1,REG_M,IMM1_4BY2}, arch_sh_up}
+	mov.w R0,@(8,GBR)         ;!/* 11000001i8*2.... mov.w R0,@(<disp>,GBR)*/{"mov.w",{A_R0,A_DISP_GBR},{HEX_C,HEX_1,IMM1_8BY2}, arch_sh_up}
+	.align 2
+	mova @(8,PC),R0 ;!/* 11000111i8p4.... mova @(<disp>,PC),R0*/{"mova",{A_DISP_PC,A_R0},{HEX_C,HEX_7,PCRELIMM_8BY4}, arch_sh_up}
+	movca.l R0,@r4            ;!/* 0000nnnn11000011 movca.l R0,@<REG_N> */{"movca.l",{A_R0,A_IND_N},{HEX_0,REG_N,HEX_C,HEX_3}, arch_sh4_nommu_nofpu_up}
+	movt r4                   ;!/* 0000nnnn00101001 movt <REG_N>        */{"movt",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_9}, arch_sh_up}
+	muls.w r5,r4              ;!/* 0010nnnnmmmm1111 muls.w <REG_M>,<REG_N>*/{"muls.w",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_F}, arch_sh_up}
+	muls r5,r4                ;!/* 0010nnnnmmmm1111 muls <REG_M>,<REG_N>*/{"muls",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_F}, arch_sh_up}
+	mul.l r5,r4               ;!/* 0000nnnnmmmm0111 mul.l <REG_M>,<REG_N>*/{"mul.l",{ A_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_7}, arch_sh2_up}
+	mulu.w r5,r4              ;!/* 0010nnnnmmmm1110 mulu.w <REG_M>,<REG_N>*/{"mulu.w",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_E}, arch_sh_up}
+	mulu r5,r4                ;!/* 0010nnnnmmmm1110 mulu <REG_M>,<REG_N>*/{"mulu",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_E}, arch_sh_up}
+	neg r5,r4                 ;!/* 0110nnnnmmmm1011 neg <REG_M>,<REG_N> */{"neg",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_B}, arch_sh_up}
+	negc r5,r4                ;!/* 0110nnnnmmmm1010 negc <REG_M>,<REG_N>*/{"negc",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_A}, arch_sh_up}
+	nop                       ;!/* 0000000000001001 nop                 */{"nop",{0},{HEX_0,HEX_0,HEX_0,HEX_9}, arch_sh_up}
+	not r5,r4                 ;!/* 0110nnnnmmmm0111 not <REG_M>,<REG_N> */{"not",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_7}, arch_sh_up}
+	ocbi @r4                  ;!/* 0000nnnn10010011 ocbi @<REG_N>       */{"ocbi",{A_IND_N},{HEX_0,REG_N,HEX_9,HEX_3}, arch_sh4_nommu_nofpu_up}
+	ocbp @r4                  ;!/* 0000nnnn10100011 ocbp @<REG_N>       */{"ocbp",{A_IND_N},{HEX_0,REG_N,HEX_A,HEX_3}, arch_sh4_nommu_nofpu_up}
+	ocbwb @r4                 ;!/* 0000nnnn10110011 ocbwb @<REG_N>      */{"ocbwb",{A_IND_N},{HEX_0,REG_N,HEX_B,HEX_3}, arch_sh4_nommu_nofpu_up}
+	or #4,R0                  ;!/* 11001011i8*1.... or #<imm>,R0        */{"or",{A_IMM,A_R0},{HEX_C,HEX_B,IMM0_8}, arch_sh_up}
+	or r5,r4                  ;!/* 0010nnnnmmmm1011 or <REG_M>,<REG_N>  */{"or",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_B}, arch_sh_up}
+	or.b #4,@(R0,GBR)         ;!/* 11001111i8*1.... or.b #<imm>,@(R0,GBR)*/{"or.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_F,IMM0_8}, arch_sh_up}
+	pref @r4                  ;!/* 0000nnnn10000011 pref @<REG_N>       */{"pref",{A_IND_N},{HEX_0,REG_N,HEX_8,HEX_3}, arch_sh2a_nofpu_or_sh4_nommu_nofpu_up}
+	rotcl r4                  ;!/* 0100nnnn00100100 rotcl <REG_N>       */{"rotcl",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_4}, arch_sh_up}
+	rotcr r4                  ;!/* 0100nnnn00100101 rotcr <REG_N>       */{"rotcr",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_5}, arch_sh_up}
+	rotl r4                   ;!/* 0100nnnn00000100 rotl <REG_N>        */{"rotl",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_4}, arch_sh_up}
+	rotr r4                   ;!/* 0100nnnn00000101 rotr <REG_N>        */{"rotr",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_5}, arch_sh_up}
+	rte                       ;!/* 0000000000101011 rte                 */{"rte",{0},{HEX_0,HEX_0,HEX_2,HEX_B}, arch_sh_up}
+	rts                       ;!/* 0000000000001011 rts                 */{"rts",{0},{HEX_0,HEX_0,HEX_0,HEX_B}, arch_sh_up}
+	sets                      ;!/* 0000000001011000 sets                */{"sets",{0},{HEX_0,HEX_0,HEX_5,HEX_8}, arch_sh_up}
+	sett                      ;!/* 0000000000011000 sett                */{"sett",{0},{HEX_0,HEX_0,HEX_1,HEX_8}, arch_sh_up}
+	shad r5,r4                ;!/* 0100nnnnmmmm1100 shad <REG_M>,<REG_N>*/{"shad",{ A_REG_M,A_REG_N},{HEX_4,REG_N,REG_M,HEX_C}, arch_sh2a_nofpu_or_sh3_nommu_up}
+	shld r5,r4                ;!/* 0100nnnnmmmm1101 shld <REG_M>,<REG_N>*/{"shld",{ A_REG_M,A_REG_N},{HEX_4,REG_N,REG_M,HEX_D}, arch_sh2a_nofpu_or_sh3_nommu_up}
+	shal r4                   ;!/* 0100nnnn00100000 shal <REG_N>        */{"shal",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_0}, arch_sh_up}
+	shar r4                   ;!/* 0100nnnn00100001 shar <REG_N>        */{"shar",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_1}, arch_sh_up}
+	shll r4                   ;!/* 0100nnnn00000000 shll <REG_N>        */{"shll",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_0}, arch_sh_up}
+	shll16 r4                 ;!/* 0100nnnn00101000 shll16 <REG_N>      */{"shll16",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_8}, arch_sh_up}
+	shll2 r4                  ;!/* 0100nnnn00001000 shll2 <REG_N>       */{"shll2",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_8}, arch_sh_up}
+	shll8 r4                  ;!/* 0100nnnn00011000 shll8 <REG_N>       */{"shll8",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_8}, arch_sh_up}
+	shlr r4                   ;!/* 0100nnnn00000001 shlr <REG_N>        */{"shlr",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_1}, arch_sh_up}
+	shlr16 r4                 ;!/* 0100nnnn00101001 shlr16 <REG_N>      */{"shlr16",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_9}, arch_sh_up}
+	shlr2 r4                  ;!/* 0100nnnn00001001 shlr2 <REG_N>       */{"shlr2",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_9}, arch_sh_up}
+	shlr8 r4                  ;!/* 0100nnnn00011001 shlr8 <REG_N>       */{"shlr8",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_9}, arch_sh_up}
+	sleep                     ;!/* 0000000000011011 sleep               */{"sleep",{0},{HEX_0,HEX_0,HEX_1,HEX_B}, arch_sh_up}
+	stc SR,r4                 ;!/* 0000nnnn00000010 stc SR,<REG_N>      */{"stc",{A_SR,A_REG_N},{HEX_0,REG_N,HEX_0,HEX_2}, arch_sh_up}
+	stc GBR,r4                ;!/* 0000nnnn00010010 stc GBR,<REG_N>     */{"stc",{A_GBR,A_REG_N},{HEX_0,REG_N,HEX_1,HEX_2}, arch_sh_up}
+	stc VBR,r4                ;!/* 0000nnnn00100010 stc VBR,<REG_N>     */{"stc",{A_VBR,A_REG_N},{HEX_0,REG_N,HEX_2,HEX_2}, arch_sh_up}
+	stc SSR,r4                ;!/* 0000nnnn00110010 stc SSR,<REG_N>     */{"stc",{A_SSR,A_REG_N},{HEX_0,REG_N,HEX_3,HEX_2}, arch_sh3_nommu_up}
+	stc SPC,r4                ;!/* 0000nnnn01000010 stc SPC,<REG_N>     */{"stc",{A_SPC,A_REG_N},{HEX_0,REG_N,HEX_4,HEX_2}, arch_sh3_nommu_up}
+	stc SGR,r4                ;!/* 0000nnnn00111010 stc SGR,<REG_N>     */{"stc",{A_SGR,A_REG_N},{HEX_0,REG_N,HEX_3,HEX_A}, arch_sh4_nommu_nofpu_up}
+	stc DBR,r4                ;!/* 0000nnnn11111010 stc DBR,<REG_N>     */{"stc",{A_DBR,A_REG_N},{HEX_0,REG_N,HEX_F,HEX_A}, arch_sh4_nommu_nofpu_up}
+	stc r1_bank,r4            ;!/* 0000nnnn1xxx0010 stc Rn_BANK,<REG_N> */{"stc",{A_REG_B,A_REG_N},{HEX_0,REG_N,REG_B,HEX_2}, arch_sh3_nommu_up}
+	stc.l SR,@-r4             ;!/* 0100nnnn00000011 stc.l SR,@-<REG_N>  */{"stc.l",{A_SR,A_DEC_N},{HEX_4,REG_N,HEX_0,HEX_3}, arch_sh_up}
+	stc.l VBR,@-r4            ;!/* 0100nnnn00100011 stc.l VBR,@-<REG_N> */{"stc.l",{A_VBR,A_DEC_N},{HEX_4,REG_N,HEX_2,HEX_3}, arch_sh_up}
+	stc.l SSR,@-r4            ;!/* 0100nnnn00110011 stc.l SSR,@-<REG_N> */{"stc.l",{A_SSR,A_DEC_N},{HEX_4,REG_N,HEX_3,HEX_3}, arch_sh3_nommu_up}
+	stc.l SPC,@-r4            ;!/* 0100nnnn01000011 stc.l SPC,@-<REG_N> */{"stc.l",{A_SPC,A_DEC_N},{HEX_4,REG_N,HEX_4,HEX_3}, arch_sh3_nommu_up}
+	stc.l GBR,@-r4            ;!/* 0100nnnn00010011 stc.l GBR,@-<REG_N> */{"stc.l",{A_GBR,A_DEC_N},{HEX_4,REG_N,HEX_1,HEX_3}, arch_sh_up}
+	stc.l SGR,@-r4            ;!/* 0100nnnn00110010 stc.l SGR,@-<REG_N> */{"stc.l",{A_SGR,A_DEC_N},{HEX_4,REG_N,HEX_3,HEX_2}, arch_sh4_nommu_nofpu_up}
+	stc.l DBR,@-r4            ;!/* 0100nnnn11110010 stc.l DBR,@-<REG_N> */{"stc.l",{A_DBR,A_DEC_N},{HEX_4,REG_N,HEX_F,HEX_2}, arch_sh4_nommu_nofpu_up}
+	stc.l r1_bank,@-r4        ;!/* 0100nnnn1xxx0011 stc.l Rn_BANK,@-<REG_N> */{"stc.l",{A_REG_B,A_DEC_N},{HEX_4,REG_N,REG_B,HEX_3}, arch_sh3_nommu_up}
+	sts MACH,r4               ;!/* 0000nnnn00001010 sts MACH,<REG_N>    */{"sts",{A_MACH,A_REG_N},{HEX_0,REG_N,HEX_0,HEX_A}, arch_sh_up}
+	sts MACL,r4               ;!/* 0000nnnn00011010 sts MACL,<REG_N>    */{"sts",{A_MACL,A_REG_N},{HEX_0,REG_N,HEX_1,HEX_A}, arch_sh_up}
+	sts PR,r4                 ;!/* 0000nnnn00101010 sts PR,<REG_N>      */{"sts",{A_PR,A_REG_N},{HEX_0,REG_N,HEX_2,HEX_A}, arch_sh_up}
+	sts.l MACH,@-r4           ;!/* 0100nnnn00000010 sts.l MACH,@-<REG_N>*/{"sts.l",{A_MACH,A_DEC_N},{HEX_4,REG_N,HEX_0,HEX_2}, arch_sh_up}
+	sts.l MACL,@-r4           ;!/* 0100nnnn00010010 sts.l MACL,@-<REG_N>*/{"sts.l",{A_MACL,A_DEC_N},{HEX_4,REG_N,HEX_1,HEX_2}, arch_sh_up}
+	sts.l PR,@-r4             ;!/* 0100nnnn00100010 sts.l PR,@-<REG_N>  */{"sts.l",{A_PR,A_DEC_N},{HEX_4,REG_N,HEX_2,HEX_2}, arch_sh_up}
+	sub r5,r4                 ;!/* 0011nnnnmmmm1000 sub <REG_M>,<REG_N> */{"sub",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_8}, arch_sh_up}
+	subc r5,r4                ;!/* 0011nnnnmmmm1010 subc <REG_M>,<REG_N>*/{"subc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_A}, arch_sh_up}
+	subv r5,r4                ;!/* 0011nnnnmmmm1011 subv <REG_M>,<REG_N>*/{"subv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_B}, arch_sh_up}
+	swap.b r5,r4              ;!/* 0110nnnnmmmm1000 swap.b <REG_M>,<REG_N>*/{"swap.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_8}, arch_sh_up}
+	swap.w r5,r4              ;!/* 0110nnnnmmmm1001 swap.w <REG_M>,<REG_N>*/{"swap.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_9}, arch_sh_up}
+	tas.b @r4                 ;!/* 0100nnnn00011011 tas.b @<REG_N>      */{"tas.b",{A_IND_N},{HEX_4,REG_N,HEX_1,HEX_B}, arch_sh_up}
+	trapa #4                  ;!/* 11000011i8*1.... trapa #<imm>        */{"trapa",{A_IMM},{HEX_C,HEX_3,IMM0_8}, arch_sh_up}
+	tst #4,R0                 ;!/* 11001000i8*1.... tst #<imm>,R0       */{"tst",{A_IMM,A_R0},{HEX_C,HEX_8,IMM0_8}, arch_sh_up}
+	tst r5,r4                 ;!/* 0010nnnnmmmm1000 tst <REG_M>,<REG_N> */{"tst",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_8}, arch_sh_up}
+	tst.b #4,@(R0,GBR)        ;!/* 11001100i8*1.... tst.b #<imm>,@(R0,GBR)*/{"tst.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_C,IMM0_8}, arch_sh_up}
+	xor #4,R0                 ;!/* 11001010i8*1.... xor #<imm>,R0       */{"xor",{A_IMM,A_R0},{HEX_C,HEX_A,IMM0_8}, arch_sh_up}
+	xor r5,r4                 ;!/* 0010nnnnmmmm1010 xor <REG_M>,<REG_N> */{"xor",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_A}, arch_sh_up}
+	xor.b #4,@(R0,GBR)        ;!/* 11001110i8*1.... xor.b #<imm>,@(R0,GBR)*/{"xor.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_E,IMM0_8}, arch_sh_up}
+	xtrct r5,r4               ;!/* 0010nnnnmmmm1101 xtrct <REG_M>,<REG_N>*/{"xtrct",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_D}, arch_sh_up}
+	dt r4                     ;!/* 0100nnnn00010000 dt <REG_N>          */{"dt",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_0}, arch_sh2_up}
+	dmuls.l r5,r4             ;!/* 0011nnnnmmmm1101 dmuls.l <REG_M>,<REG_N>*/{"dmuls.l",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_D}, arch_sh2_up}
+	dmulu.l r5,r4             ;!/* 0011nnnnmmmm0101 dmulu.l <REG_M>,<REG_N>*/{"dmulu.l",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_5}, arch_sh2_up}
+	mac.l @r5+,@r4+           ;!/* 0000nnnnmmmm1111 mac.l @<REG_M>+,@<REG_N>+*/{"mac.l",{A_INC_M,A_INC_N},{HEX_0,REG_N,REG_M,HEX_F}, arch_sh2_up}
+	braf r4                   ;!/* 0000nnnn00100011 braf <REG_N>       */{"braf",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_3}, arch_sh2_up}
+	bsrf r4                   ;!/* 0000nnnn00000011 bsrf <REG_N>       */{"bsrf",{A_REG_N},{HEX_0,REG_N,HEX_0,HEX_3}, arch_sh2_up}
Index: binutils/gas/testsuite/gas/sh/arch/sh3-dsp.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/sh3-dsp.s	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/arch/sh3-dsp.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -252,36 +252,36 @@ sh3_dsp:
 	movy.w a1,@r6+            ;!/* *n*m*1**10 movy.w <DSP_REG_M>,@<REG_N>+ */   {"movy.w",{DSP_REG_A_M,AY_INC_N},{PPI,MOVY,HEX_A}, arch_sh_dsp_up}
 	movy.w a1,@r6+r9          ;!/* *n*m*1**11 movy.w <DSP_REG_M>,@<REG_N>+r9 */ {"movy.w",{DSP_REG_A_M,AY_PMOD_N},{PPI,MOVY,HEX_B}, arch_sh_dsp_up}
 	pmuls x0,y0,m0            ;!/* 01aaeeffxxyyggnn pmuls Se,Sf,Dg */ {"pmuls",{DSP_REG_E,DSP_REG_F,DSP_REG_G},{PPI,PMUL}, arch_sh_dsp_up}
-	psubc x1,y0,m0            ;!/* 10100000xxyynnnn psubc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"psubc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_0}, arch_sh_dsp_up}
-	paddc x1,y0,m0            ;!/* 10110000xxyynnnn paddc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"paddc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_0}, arch_sh_dsp_up}
-	pcmp x1,y0                ;!/* 10000100xxyynnnn pcmp <DSP_REG_X>,<DSP_REG_Y> */  {"pcmp", {DSP_REG_X,DSP_REG_Y},{PPI,PPI3,HEX_8,HEX_4}, arch_sh_dsp_up}
-	pwsb x1,y0,m0             ;!/* 10100100xxyynnnn pwsb <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pwsb", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_4}, arch_sh_dsp_up}
-	pwad x1,y0,m0             ;!/* 10110100xxyynnnn pwad <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pwad", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_4}, arch_sh_dsp_up}
-	pabs x1,m0                ;!/* 10001000xxyynnnn pabs <DSP_REG_X>,<DSP_REG_N> */  {"pabs", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_8,HEX_8}, arch_sh_dsp_up}
-	pabs y0,m0                ;!/* 10101000xxyynnnn pabs <DSP_REG_Y>,<DSP_REG_N> */  {"pabs", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_A,HEX_8}, arch_sh_dsp_up}
-	prnd x1,m0                ;!/* 10011000xxyynnnn prnd <DSP_REG_X>,<DSP_REG_N> */  {"prnd", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_9,HEX_8}, arch_sh_dsp_up}
-	prnd y0,m0                ;!/* 10111000xxyynnnn prnd <DSP_REG_Y>,<DSP_REG_N> */  {"prnd", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_B,HEX_8}, arch_sh_dsp_up}
-	dct pshl x1,y0,m0         ;!/* 10000001xxyynnnn pshl <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pshl", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_1}, arch_sh_dsp_up}
+	psubc x1,y0,m0            ;!/* 10100000xxyynnnn psubc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"psubc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_0}, arch_sh_dsp_up}
+	paddc x1,y0,m0            ;!/* 10110000xxyynnnn paddc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"paddc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_0}, arch_sh_dsp_up}
+	pcmp x1,y0                ;!/* 10000100xxyynnnn pcmp <DSP_REG_X>,<DSP_REG_Y> */ {"pcmp", {DSP_REG_X,DSP_REG_Y},{PPI,PPI3,HEX_8,HEX_4}, arch_sh_dsp_up}
+	pwsb x1,y0,m0             ;!/* 10100100xxyynnnn pwsb <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pwsb", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_4}, arch_sh_dsp_up}
+	pwad x1,y0,m0             ;!/* 10110100xxyynnnn pwad <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pwad", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_4}, arch_sh_dsp_up}
+	pabs x1,m0                ;!/* 10001000xxyynnnn pabs <DSP_REG_X>,<DSP_REG_N> */ {"pabs", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_8,HEX_8}, arch_sh_dsp_up}
+	pabs y0,m0                ;!/* 10101000xxyynnnn pabs <DSP_REG_Y>,<DSP_REG_N> */ {"pabs", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_A,HEX_8}, arch_sh_dsp_up}
+	prnd x1,m0                ;!/* 10011000xxyynnnn prnd <DSP_REG_X>,<DSP_REG_N> */ {"prnd", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_9,HEX_8}, arch_sh_dsp_up}
+	prnd y0,m0                ;!/* 10111000xxyynnnn prnd <DSP_REG_Y>,<DSP_REG_N> */ {"prnd", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_B,HEX_8}, arch_sh_dsp_up}
+	dct pshl x1,y0,m0         ;!/* 10000001xxyynnnn pshl <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pshl", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_1}, arch_sh_dsp_up}
 	pshl #4,m0                ;!/* 00000iiiiiiinnnn pshl #<imm>,<DSP_REG_N> */ {"pshl",{A_IMM,DSP_REG_N},{PPI,PSH,HEX_0}, arch_sh_dsp_up}
-	dct psha x1,y0,m0         ;!/* 10010001xxyynnnn psha <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"psha", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_1}, arch_sh_dsp_up}
+	dct psha x1,y0,m0         ;!/* 10010001xxyynnnn psha <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"psha", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_1}, arch_sh_dsp_up}
 	psha #4,m0                ;!/* 00010iiiiiiinnnn psha #<imm>,<DSP_REG_N> */ {"psha",{A_IMM,DSP_REG_N},{PPI,PSH,HEX_1}, arch_sh_dsp_up}
-	dct psub x1,y0,m0         ;!/* 10100001xxyynnnn psub <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"psub", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_1}, arch_sh_dsp_up}
-	dct padd x1,y0,m0         ;!/* 10110001xxyynnnn padd <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"padd", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_1}, arch_sh_dsp_up}
-	dct pand x1,y0,m0         ;!/* 10010101xxyynnnn pand <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pand", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_5}, arch_sh_dsp_up}
-	dct pxor x1,y0,m0         ;!/* 10100101xxyynnnn pxor <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pxor", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_5}, arch_sh_dsp_up}
-	dct por  x1,y0,m0         ;!/* 10110101xxyynnnn por  <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"por",  {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_5}, arch_sh_dsp_up}
-	dct pdec x1,m0            ;!/* 10001001xxyynnnn pdec <DSP_REG_X>,<DSP_REG_N> */  {"pdec", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_9}, arch_sh_dsp_up}
-	dct pdec y0,m0            ;!/* 10101001xxyynnnn pdec <DSP_REG_Y>,<DSP_REG_N> */  {"pdec", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_9}, arch_sh_dsp_up}
-	dct pinc x1,m0            ;!/* 10011001xx00nnnn pinc <DSP_REG_X>,<DSP_REG_N> */  {"pinc", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_9,HEX_XX00}, arch_sh_dsp_up}
-	dct pinc y0,m0            ;!/* 1011100100yynnnn pinc <DSP_REG_Y>,<DSP_REG_N> */  {"pinc", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_9,HEX_00YY}, arch_sh_dsp_up}
-	dct pclr m0               ;!/* 10001101xxyynnnn pclr <DSP_REG_N> */  {"pclr", {DSP_REG_N},{PPI,PPIC,HEX_8,HEX_D}, arch_sh_dsp_up}
-	dct pdmsb x1,m0           ;!/* 10011101xx00nnnn pdmsb <DSP_REG_X>,<DSP_REG_N> */  {"pdmsb", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_D,HEX_XX00}, arch_sh_dsp_up}
-	dct pdmsb y0,m0           ;!/* 1011110100yynnnn pdmsb <DSP_REG_Y>,<DSP_REG_N> */  {"pdmsb", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_D,HEX_00YY}, arch_sh_dsp_up}
-	dct pneg  x1,m0           ;!/* 11001001xxyynnnn pneg  <DSP_REG_X>,<DSP_REG_N> */  {"pneg",  {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_9}, arch_sh_dsp_up}
-	dct pneg  y0,m0           ;!/* 11101001xxyynnnn pneg  <DSP_REG_Y>,<DSP_REG_N> */  {"pneg",  {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_E,HEX_9}, arch_sh_dsp_up}
-	dct pcopy x1,m0           ;!/* 11011001xxyynnnn pcopy <DSP_REG_X>,<DSP_REG_N> */  {"pcopy", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_9}, arch_sh_dsp_up}
-	dct pcopy y0,m0           ;!/* 11111001xxyynnnn pcopy <DSP_REG_Y>,<DSP_REG_N> */  {"pcopy", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_F,HEX_9}, arch_sh_dsp_up}
-	dct psts MACH,m0          ;!/* 11001101xxyynnnn psts MACH,<DSP_REG_N> */  {"psts", {A_MACH,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_D}, arch_sh_dsp_up}
-	dct psts MACL,m0          ;!/* 11011101xxyynnnn psts MACL,<DSP_REG_N> */  {"psts", {A_MACL,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_D}, arch_sh_dsp_up}
-	dct plds m0,MACH          ;!/* 11101101xxyynnnn plds <DSP_REG_N>,MACH */  {"plds", {DSP_REG_N,A_MACH},{PPI,PPIC,HEX_E,HEX_D}, arch_sh_dsp_up}
-	dct plds m0,MACL          ;!/* 11111101xxyynnnn plds <DSP_REG_N>,MACL */  {"plds", {DSP_REG_N,A_MACL},{PPI,PPIC,HEX_F,HEX_D}, arch_sh_dsp_up}
+	dct psub x1,y0,m0         ;!/* 10100001xxyynnnn psub <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"psub", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_1}, arch_sh_dsp_up}
+	dct padd x1,y0,m0         ;!/* 10110001xxyynnnn padd <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"padd", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_1}, arch_sh_dsp_up}
+	dct pand x1,y0,m0         ;!/* 10010101xxyynnnn pand <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pand", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_5}, arch_sh_dsp_up}
+	dct pxor x1,y0,m0         ;!/* 10100101xxyynnnn pxor <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pxor", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_5}, arch_sh_dsp_up}
+	dct por  x1,y0,m0         ;!/* 10110101xxyynnnn por  <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"por",  {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_5}, arch_sh_dsp_up}
+	dct pdec x1,m0            ;!/* 10001001xxyynnnn pdec <DSP_REG_X>,<DSP_REG_N> */ {"pdec", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_9}, arch_sh_dsp_up}
+	dct pdec y0,m0            ;!/* 10101001xxyynnnn pdec <DSP_REG_Y>,<DSP_REG_N> */ {"pdec", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_9}, arch_sh_dsp_up}
+	dct pinc x1,m0            ;!/* 10011001xx00nnnn pinc <DSP_REG_X>,<DSP_REG_N> */ {"pinc", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_9,HEX_XX00}, arch_sh_dsp_up}
+	dct pinc y0,m0            ;!/* 1011100100yynnnn pinc <DSP_REG_Y>,<DSP_REG_N> */ {"pinc", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_9,HEX_00YY}, arch_sh_dsp_up}
+	dct pclr m0               ;!/* 10001101xxyynnnn pclr <DSP_REG_N> */ {"pclr", {DSP_REG_N},{PPI,PPIC,HEX_8,HEX_D}, arch_sh_dsp_up}
+	dct pdmsb x1,m0           ;!/* 10011101xx00nnnn pdmsb <DSP_REG_X>,<DSP_REG_N> */ {"pdmsb", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_D,HEX_XX00}, arch_sh_dsp_up}
+	dct pdmsb y0,m0           ;!/* 1011110100yynnnn pdmsb <DSP_REG_Y>,<DSP_REG_N> */ {"pdmsb", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_D,HEX_00YY}, arch_sh_dsp_up}
+	dct pneg  x1,m0           ;!/* 11001001xxyynnnn pneg  <DSP_REG_X>,<DSP_REG_N> */ {"pneg",  {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_9}, arch_sh_dsp_up}
+	dct pneg  y0,m0           ;!/* 11101001xxyynnnn pneg  <DSP_REG_Y>,<DSP_REG_N> */ {"pneg",  {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_E,HEX_9}, arch_sh_dsp_up}
+	dct pcopy x1,m0           ;!/* 11011001xxyynnnn pcopy <DSP_REG_X>,<DSP_REG_N> */ {"pcopy", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_9}, arch_sh_dsp_up}
+	dct pcopy y0,m0           ;!/* 11111001xxyynnnn pcopy <DSP_REG_Y>,<DSP_REG_N> */ {"pcopy", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_F,HEX_9}, arch_sh_dsp_up}
+	dct psts MACH,m0          ;!/* 11001101xxyynnnn psts MACH,<DSP_REG_N> */ {"psts", {A_MACH,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_D}, arch_sh_dsp_up}
+	dct psts MACL,m0          ;!/* 11011101xxyynnnn psts MACL,<DSP_REG_N> */ {"psts", {A_MACL,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_D}, arch_sh_dsp_up}
+	dct plds m0,MACH          ;!/* 11101101xxyynnnn plds <DSP_REG_N>,MACH */ {"plds", {DSP_REG_N,A_MACH},{PPI,PPIC,HEX_E,HEX_D}, arch_sh_dsp_up}
+	dct plds m0,MACL          ;!/* 11111101xxyynnnn plds <DSP_REG_N>,MACL */ {"plds", {DSP_REG_N,A_MACL},{PPI,PPIC,HEX_F,HEX_D}, arch_sh_dsp_up}
Index: binutils/gas/testsuite/gas/sh/arch/sh2a-nofpu.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/sh2a-nofpu.s	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/arch/sh2a-nofpu.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -15,25 +15,25 @@ sh2a_nofpu:
 	ldc r5,TBR                ;!/* 0100mmmm01001010 ldc <REG_M>,TBR     */{"ldc",{A_REG_M,A_TBR},{HEX_4,REG_M,HEX_4,HEX_A}, arch_sh2a_nofpu_up}
 	mov.b R0,@r4+             ;!/* 0100nnnn10001011 mov.b R0,@<REG_N>+ */{"mov.b",{A_R0,A_INC_N},{HEX_4,REG_N,HEX_8,HEX_B}, arch_sh2a_nofpu_up}
 	mov.b @-r5,R0             ;!/* 0100nnnn11001011 mov.b @-<REG_M>,R0 */{"mov.b",{A_DEC_M,A_R0},{HEX_4,REG_M,HEX_C,HEX_B}, arch_sh2a_nofpu_up}
-	mov.b r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0000dddddddddddd mov.b <REG_M>,@(<DISP12>,<REG_N>) */  {"mov.b",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_0,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	mov.b @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0100dddddddddddd mov.b @(<DISP12>,<REG_M>),<REG_N> */  {"mov.b",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_4,DISP0_12}, arch_sh2a_nofpu_up | arch_op32}
+	mov.b r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0000dddddddddddd mov.b <REG_M>,@(<DISP12>,<REG_N>) */ {"mov.b",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_0,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	mov.b @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0100dddddddddddd mov.b @(<DISP12>,<REG_M>),<REG_N> */ {"mov.b",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_4,DISP0_12}, arch_sh2a_nofpu_up | arch_op32}
 	mov.l R0,@r4+             ;!/* 0100nnnn10101011 mov.l R0,@<REG_N>+ */{"mov.l",{A_R0,A_INC_N},{HEX_4,REG_N,HEX_A,HEX_B}, arch_sh2a_nofpu_up}
 	mov.l @-r5,R0             ;!/* 0100nnnn11001011 mov.l @-<REG_M>,R0 */{"mov.l",{A_DEC_M,A_R0},{HEX_4,REG_M,HEX_E,HEX_B}, arch_sh2a_nofpu_up}
-	mov.l r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0010dddddddddddd mov.l <REG_M>,@(<DISP12>,<REG_N>) */  {"mov.l",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_2,DISP1_12BY4}, arch_sh2a_nofpu_up | arch_op32}
-	mov.l @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0110dddddddddddd mov.l @(<DISP12>,<REG_M>),<REG_N> */  {"mov.l",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_6,DISP0_12BY4}, arch_sh2a_nofpu_up | arch_op32}
+	mov.l r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0010dddddddddddd mov.l <REG_M>,@(<DISP12>,<REG_N>) */ {"mov.l",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_2,DISP1_12BY4}, arch_sh2a_nofpu_up | arch_op32}
+	mov.l @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0110dddddddddddd mov.l @(<DISP12>,<REG_M>),<REG_N> */ {"mov.l",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_6,DISP0_12BY4}, arch_sh2a_nofpu_up | arch_op32}
 	mov.w R0,@r4+             ;!/* 0100nnnn10011011 mov.w R0,@<REG_N>+ */{"mov.w",{A_R0,A_INC_N},{HEX_4,REG_N,HEX_9,HEX_B}, arch_sh2a_nofpu_up}
 	mov.w @-r5,R0             ;!/* 0100nnnn11011011 mov.w @-<REG_M>,R0 */{"mov.w",{A_DEC_M,A_R0},{HEX_4,REG_M,HEX_D,HEX_B}, arch_sh2a_nofpu_up}
-	mov.w r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0001dddddddddddd mov.w <REG_M>,@(<DISP12>,<REG_N>) */  {"mov.w",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_1,DISP1_12BY2}, arch_sh2a_nofpu_up | arch_op32}
-	mov.w @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0101dddddddddddd mov.w @(<DISP12>,<REG_M>),<REG_N> */  {"mov.w",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_5,DISP0_12BY2}, arch_sh2a_nofpu_up | arch_op32}
+	mov.w r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0001dddddddddddd mov.w <REG_M>,@(<DISP12>,<REG_N>) */ {"mov.w",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_1,DISP1_12BY2}, arch_sh2a_nofpu_up | arch_op32}
+	mov.w @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0101dddddddddddd mov.w @(<DISP12>,<REG_M>),<REG_N> */ {"mov.w",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_5,DISP0_12BY2}, arch_sh2a_nofpu_up | arch_op32}
 	stc TBR,r4                ;!/* 0000nnnn01001010 stc TBR,<REG_N> */ {"stc",{A_TBR,A_REG_N},{HEX_0,REG_N,HEX_4,HEX_A}, arch_sh2a_nofpu_up}
 	bclr #4, r4               ;!/* 10000110nnnn0iii bclr #<imm>, <REG_N> */  {"bclr",{A_IMM, A_REG_N},{HEX_8,HEX_6,REG_N,IMM0_3c}, arch_sh2a_nofpu_up}
-	bclr.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0000dddddddddddd bclr.b #<imm>,@(<DISP12>,<REG_N>) */  {"bclr.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_0,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bclr.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0000dddddddddddd bclr.b #<imm>,@(<DISP12>,<REG_N>) */ {"bclr.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_0,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
 	bld #4, r4                ;!/* 10000111nnnn1iii bld #<imm>, <REG_N> */   {"bld",{A_IMM, A_REG_N},{HEX_8,HEX_7,REG_N,IMM0_3s}, arch_sh2a_nofpu_up}
-	bld.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0011dddddddddddd bld.b #<imm>,@(<DISP12>,<REG_N>) */  {"bld.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_3,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bld.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0011dddddddddddd bld.b #<imm>,@(<DISP12>,<REG_N>) */ {"bld.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_3,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
 	bset #4, r4               ;!/* 10000110nnnn1iii bset #<imm>, <REG_N> */  {"bset",{A_IMM, A_REG_N},{HEX_8,HEX_6,REG_N,IMM0_3s}, arch_sh2a_nofpu_up}
-	bset.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0001dddddddddddd bset.b #<imm>,@(<DISP12>,<REG_N>) */  {"bset.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_1,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bset.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0001dddddddddddd bset.b #<imm>,@(<DISP12>,<REG_N>) */ {"bset.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_1,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
 	bst #4, r4                ;!/* 10000111nnnn0iii bst #<imm>, <REG_N> */   {"bst",{A_IMM, A_REG_N},{HEX_8,HEX_7,REG_N,IMM0_3c}, arch_sh2a_nofpu_up}
-	bst.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0010dddddddddddd bst.b #<imm>,@(<DISP12>,<REG_N>) */  {"bst.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_2,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bst.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0010dddddddddddd bst.b #<imm>,@(<DISP12>,<REG_N>) */ {"bst.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_2,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
 	clips.b r4                ;!/* 0100nnnn10010001 clips.b <REG_N> */       {"clips.b",{A_REG_N},{HEX_4,REG_N,HEX_9,HEX_1}, arch_sh2a_nofpu_up}
 	clips.w r4                ;!/* 0100nnnn10010101 clips.w <REG_N> */       {"clips.w",{A_REG_N},{HEX_4,REG_N,HEX_9,HEX_5}, arch_sh2a_nofpu_up}
 	clipu.b r4                ;!/* 0100nnnn10000001 clipu.b <REG_N> */       {"clipu.b",{A_REG_N},{HEX_4,REG_N,HEX_8,HEX_1}, arch_sh2a_nofpu_up}
@@ -48,24 +48,23 @@ sh2a_nofpu:
 	movml.l r5,@-R15          ;!/* 0100mmmm11110000 movml.l <REG_M>,@-R15 */ {"movmu.l",{A_REG_M,A_DEC_R15},{HEX_4,REG_M,HEX_F,HEX_0}, arch_sh2a_nofpu_up}
 	movml.l @R15+,r5          ;!/* 0100mmmm11110100 movml.l @R15+,<REG_M> */ {"movmu.l",{A_INC_R15,A_REG_M},{HEX_4,REG_M,HEX_F,HEX_4}, arch_sh2a_nofpu_up}
 	movrt r4                  ;!/* 0000nnnn00111001 movrt <REG_N> */         {"movrt",{A_REG_N},{HEX_0,REG_N,HEX_3,HEX_9}, arch_sh2a_nofpu_up}
-	mulr R0,r4                ;!/* 0100nnnn10000000 mulr R0,<REG_N> */       {"mulr",{A_R0,A_REG_N},{HEX_4,REG_N,HEX_8,HEX_0}, arch_sh2a_nofpu_up}
 	nott                      ;!/* 0000000001101000 nott */                  {"nott",{A_END},{HEX_0,HEX_0,HEX_6,HEX_8}, arch_sh2a_nofpu_up}
 	resbank                   ;!/* 0000000001011011 resbank */               {"resbank",{A_END},{HEX_0,HEX_0,HEX_5,HEX_B}, arch_sh2a_nofpu_up}
 	rts/n                     ;!/* 0000000001101011 rts/n */                 {"rts/n",{A_END},{HEX_0,HEX_0,HEX_6,HEX_B}, arch_sh2a_nofpu_up}
 	rtv/n r5                  ;!/* 0000mmmm01111011 rtv/n <REG_M>*/          {"rtv/n",{A_REG_M},{HEX_0,REG_M,HEX_7,HEX_B}, arch_sh2a_nofpu_up}
 	stbank R0,@r4             ;!/* 0100nnnn11100001 stbank R0,@<REG_N>*/     {"stbank",{A_R0,A_IND_N},{HEX_4,REG_N,HEX_E,HEX_1}, arch_sh2a_nofpu_up}
-	band.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0100dddddddddddd band.b #<imm>,@(<DISP12>,<REG_N>) */  {"band.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_4,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	bandnot.b #4,@(2048,r4)   ;!/* 0011nnnn0iii1001 1100dddddddddddd bandnot.b #<imm>,@(<DISP12>,<REG_N>) */  {"bandnot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_C,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	bldnot.b #4,@(2048,r4)    ;!/* 0011nnnn0iii1001 1011dddddddddddd bldnot.b #<imm>,@(<DISP12>,<REG_N>) */  {"bldnot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_B,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	bor.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0101dddddddddddd bor.b #<imm>,@(<DISP12>,<REG_N>) */  {"bor.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_5,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	bornot.b #4,@(2048,r4)    ;!/* 0011nnnn0iii1001 1101dddddddddddd bornot.b #<imm>,@(<DISP12>,<REG_N>) */  {"bornot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_D,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	bxor.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0110dddddddddddd bxor.b #<imm>,@(<DISP12>,<REG_N>) */  {"bxor.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_6,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	movi20 #4,r4              ;!/* 0000nnnniiii0000 iiiiiiiiiiiiiiii movi20 #<imm>,<REG_N> */  {"movi20",{A_IMM,A_REG_N},{HEX_0,REG_N,IMM0_20_4,HEX_0,IMM0_20}, arch_sh2a_nofpu_up | arch_op32}
-	movi20s #1024,r4          ;!/* 0000nnnniiii0001 iiiiiiiiiiiiiiii movi20s #<imm>,<REG_N> */  {"movi20s",{A_IMM,A_REG_N},{HEX_0,REG_N,IMM0_20_4,HEX_1,IMM0_20BY8}, arch_sh2a_nofpu_up | arch_op32}
-	movu.b @(2048,r5),r4      ;!/* 0011nnnnmmmm0001 1000dddddddddddd movu.b @(<DISP12>,<REG_M>),<REG_N> */  {"movu.b",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_8,DISP0_12}, arch_sh2a_nofpu_up | arch_op32}
-	movu.w @(2048,r5),r4      ;!/* 0011nnnnmmmm0001 1001dddddddddddd movu.w @(<DISP12>,<REG_M>),<REG_N> */  {"movu.w",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_9,DISP0_12BY2}, arch_sh2a_nofpu_up | arch_op32}
+	band.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0100dddddddddddd band.b #<imm>,@(<DISP12>,<REG_N>) */ {"band.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_4,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bandnot.b #4,@(2048,r4)   ;!/* 0011nnnn0iii1001 1100dddddddddddd bandnot.b #<imm>,@(<DISP12>,<REG_N>) */ {"bandnot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_C,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bldnot.b #4,@(2048,r4)    ;!/* 0011nnnn0iii1001 1011dddddddddddd bldnot.b #<imm>,@(<DISP12>,<REG_N>) */ {"bldnot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_B,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bor.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0101dddddddddddd bor.b #<imm>,@(<DISP12>,<REG_N>) */ {"bor.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_5,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bornot.b #4,@(2048,r4)    ;!/* 0011nnnn0iii1001 1101dddddddddddd bornot.b #<imm>,@(<DISP12>,<REG_N>) */ {"bornot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_D,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bxor.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0110dddddddddddd bxor.b #<imm>,@(<DISP12>,<REG_N>) */ {"bxor.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_6,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	movi20 #4,r4              ;!/* 0000nnnniiii0000 iiiiiiiiiiiiiiii movi20 #<imm>,<REG_N> */ {"movi20",{A_IMM,A_REG_N},{HEX_0,REG_N,IMM0_20_4,HEX_0,IMM0_20}, arch_sh2a_nofpu_up | arch_op32}
+	movi20s #1024,r4          ;!/* 0000nnnniiii0001 iiiiiiiiiiiiiiii movi20s #<imm>,<REG_N> */ {"movi20s",{A_IMM,A_REG_N},{HEX_0,REG_N,IMM0_20_4,HEX_1,IMM0_20BY8}, arch_sh2a_nofpu_up | arch_op32}
+	movu.b @(2048,r5),r4      ;!/* 0011nnnnmmmm0001 1000dddddddddddd movu.b @(<DISP12>,<REG_M>),<REG_N> */ {"movu.b",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_8,DISP0_12}, arch_sh2a_nofpu_up | arch_op32}
+	movu.w @(2048,r5),r4      ;!/* 0011nnnnmmmm0001 1001dddddddddddd movu.w @(<DISP12>,<REG_M>),<REG_N> */ {"movu.w",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_9,DISP0_12BY2}, arch_sh2a_nofpu_up | arch_op32}
 
-! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu
+! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu st40-300-nofpu-or-sh2a-nofpu
 	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
 	add r5,r4                 ;!/* 0011nnnnmmmm1100 add <REG_M>,<REG_N> */{"add",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_C}, arch_sh_up}
 	addc r5,r4                ;!/* 0011nnnnmmmm1110 addc <REG_M>,<REG_N>*/{"addc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_E}, arch_sh_up}
@@ -219,3 +218,4 @@ sh2a_nofpu:
 	mac.l @r5+,@r4+           ;!/* 0000nnnnmmmm1111 mac.l @<REG_M>+,@<REG_N>+*/{"mac.l",{A_INC_M,A_INC_N},{HEX_0,REG_N,REG_M,HEX_F}, arch_sh2_up}
 	braf r4                   ;!/* 0000nnnn00100011 braf <REG_N>       */{"braf",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_3}, arch_sh2_up}
 	bsrf r4                   ;!/* 0000nnnn00000011 bsrf <REG_N>       */{"bsrf",{A_REG_N},{HEX_0,REG_N,HEX_0,HEX_3}, arch_sh2_up}
+	mulr R0,r4                ;!/* 0100nnnn10000000 mulr R0,<REG_N> */       {"mulr",{A_R0,A_REG_N},{HEX_4,REG_N,HEX_8,HEX_0}, arch_st40_300_nofpu_or_sh2a_nofpu_up}
Index: binutils/gas/testsuite/gas/sh/arch/sh4a-nofpu.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/sh4a-nofpu.s	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/arch/sh4a-nofpu.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -12,15 +12,13 @@
 	.section .text
 sh4a_nofpu:
 ! Instructions introduced into sh4a-nofpu
-	icbi @r4                  ;!/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_sh4a_nofpu_up}
 	movco.l r0,@r4            ;!/* 0000nnnn01110011 movco.l r0,@<REG_N> */{"movco.l",{A_R0,A_IND_N},{HEX_0,REG_N,HEX_7,HEX_3}, arch_sh4a_nofpu_up}
 	movli.l @r5,r0            ;!/* 0000mmmm01100011 movli.l @<REG_M>,r0 */{"movli.l",{A_IND_M,A_R0},{HEX_0,REG_M,HEX_6,HEX_3}, arch_sh4a_nofpu_up}
 	movua.l @r5,r0            ;!/* 0100mmmm10101001 movua.l @<REG_M>,r0 */{"movua.l",{A_IND_M,A_R0},{HEX_4,REG_M,HEX_A,HEX_9}, arch_sh4a_nofpu_up}
 	movua.l @r5+,r0           ;!/* 0100mmmm11101001 movua.l @<REG_M>+,r0 */{"movua.l",{A_INC_M,A_R0},{HEX_4,REG_M,HEX_E,HEX_9}, arch_sh4a_nofpu_up}
 	prefi @r4                 ;!/* 0000nnnn11010011 prefi @<REG_N>      */{"prefi",{A_IND_N},{HEX_0,REG_N,HEX_D,HEX_3}, arch_sh4a_nofpu_up}
-	synco                     ;!/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_sh4a_nofpu_up}
 
-! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh3 sh3-nommu sh4-nofpu sh4-nommu-nofpu
+! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh3 sh3-nommu sh4-nofpu sh4-nommu-nofpu st40-300-nofpu-or-sh4a-nofpu
 	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
 	add r5,r4                 ;!/* 0011nnnnmmmm1100 add <REG_M>,<REG_N> */{"add",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_C}, arch_sh_up}
 	addc r5,r4                ;!/* 0011nnnnmmmm1110 addc <REG_M>,<REG_N>*/{"addc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_E}, arch_sh_up}
@@ -55,6 +53,7 @@ sh4a_nofpu:
 	exts.w r5,r4              ;!/* 0110nnnnmmmm1111 exts.w <REG_M>,<REG_N>*/{"exts.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_F}, arch_sh_up}
 	extu.b r5,r4              ;!/* 0110nnnnmmmm1100 extu.b <REG_M>,<REG_N>*/{"extu.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_C}, arch_sh_up}
 	extu.w r5,r4              ;!/* 0110nnnnmmmm1101 extu.w <REG_M>,<REG_N>*/{"extu.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_D}, arch_sh_up}
+	icbi @r4                  ;!/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
 	jmp @r4                   ;!/* 0100nnnn00101011 jmp @<REG_N>        */{"jmp",{A_IND_N},{HEX_4,REG_N,HEX_2,HEX_B}, arch_sh_up}
 	jsr @r4                   ;!/* 0100nnnn00001011 jsr @<REG_N>        */{"jsr",{A_IND_N},{HEX_4,REG_N,HEX_0,HEX_B}, arch_sh_up}
 	ldc r4,SR                 ;!/* 0100nnnn00001110 ldc <REG_N>,SR      */{"ldc",{A_REG_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_E}, arch_sh_up}
@@ -184,6 +183,7 @@ sh4a_nofpu:
 	subv r5,r4                ;!/* 0011nnnnmmmm1011 subv <REG_M>,<REG_N>*/{"subv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_B}, arch_sh_up}
 	swap.b r5,r4              ;!/* 0110nnnnmmmm1000 swap.b <REG_M>,<REG_N>*/{"swap.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_8}, arch_sh_up}
 	swap.w r5,r4              ;!/* 0110nnnnmmmm1001 swap.w <REG_M>,<REG_N>*/{"swap.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_9}, arch_sh_up}
+	synco                     ;!/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
 	tas.b @r4                 ;!/* 0100nnnn00011011 tas.b @<REG_N>      */{"tas.b",{A_IND_N},{HEX_4,REG_N,HEX_1,HEX_B}, arch_sh_up}
 	trapa #4                  ;!/* 11000011i8*1.... trapa #<imm>        */{"trapa",{A_IMM},{HEX_C,HEX_3,IMM0_8}, arch_sh_up}
 	tst #4,R0                 ;!/* 11001000i8*1.... tst #<imm>,R0       */{"tst",{A_IMM,A_R0},{HEX_C,HEX_8,IMM0_8}, arch_sh_up}
Index: binutils/gas/testsuite/gas/sh/arch/st40-300.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/st40-300.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/gas/testsuite/gas/sh/arch/st40-300.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,270 @@
+! Generated file. DO NOT EDIT.
+!
+! This file was generated by gas/testsuite/gas/sh/arch/arch.exp .
+! This file should contain every instruction valid on
+! architecture st40-300 but no more.
+! If the tests are failing because the expected results
+! have changed then run 'make check' and copy the new file
+! from <objdir>/gas/testsuite/st40-300.s
+! to   <srcdir>/gas/testsuite/gas/sh/arch/st40-300.s .
+! Make sure there are no unexpected or missing instructions.
+
+	.section .text
+st40_300:
+! Instructions introduced into st40-300
+
+! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh2a-or-sh3e sh2a-or-sh4 sh2e sh3 sh3-nommu sh3e sh4 sh4-nofpu sh4-nommu-nofpu st40-300-nofpu st40-300-nofpu-or-sh2a-nofpu st40-300-nofpu-or-sh4a-nofpu st40-300-or-sh4a
+	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
+	add r5,r4                 ;!/* 0011nnnnmmmm1100 add <REG_M>,<REG_N> */{"add",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_C}, arch_sh_up}
+	addc r5,r4                ;!/* 0011nnnnmmmm1110 addc <REG_M>,<REG_N>*/{"addc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_E}, arch_sh_up}
+	addv r5,r4                ;!/* 0011nnnnmmmm1111 addv <REG_M>,<REG_N>*/{"addv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_F}, arch_sh_up}
+	and #4,R0                 ;!/* 11001001i8*1.... and #<imm>,R0       */{"and",{A_IMM,A_R0},{HEX_C,HEX_9,IMM0_8}, arch_sh_up}
+	and r5,r4                 ;!/* 0010nnnnmmmm1001 and <REG_M>,<REG_N> */{"and",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_9}, arch_sh_up}
+	and.b #4,@(R0,GBR)        ;!/* 11001101i8*1.... and.b #<imm>,@(R0,GBR)*/{"and.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_D,IMM0_8}, arch_sh_up}
+	bra .+8                   ;!/* 1010i12......... bra <bdisp12>       */{"bra",{A_BDISP12},{HEX_A,BRANCH_12}, arch_sh_up}
+	bsr .+8                   ;!/* 1011i12......... bsr <bdisp12>       */{"bsr",{A_BDISP12},{HEX_B,BRANCH_12}, arch_sh_up}
+	bt .+8                    ;!/* 10001001i8p1.... bt <bdisp8>         */{"bt",{A_BDISP8},{HEX_8,HEX_9,BRANCH_8}, arch_sh_up}
+	bf .+8                    ;!/* 10001011i8p1.... bf <bdisp8>         */{"bf",{A_BDISP8},{HEX_8,HEX_B,BRANCH_8}, arch_sh_up}
+	bt.s .+8                  ;!/* 10001101i8p1.... bt.s <bdisp8>       */{"bt.s",{A_BDISP8},{HEX_8,HEX_D,BRANCH_8}, arch_sh2_up}
+	bt/s .+8                  ;!/* 10001101i8p1.... bt/s <bdisp8>       */{"bt/s",{A_BDISP8},{HEX_8,HEX_D,BRANCH_8}, arch_sh2_up}
+	bf.s .+8                  ;!/* 10001111i8p1.... bf.s <bdisp8>       */{"bf.s",{A_BDISP8},{HEX_8,HEX_F,BRANCH_8}, arch_sh2_up}
+	bf/s .+8                  ;!/* 10001111i8p1.... bf/s <bdisp8>       */{"bf/s",{A_BDISP8},{HEX_8,HEX_F,BRANCH_8}, arch_sh2_up}
+	clrmac                    ;!/* 0000000000101000 clrmac              */{"clrmac",{0},{HEX_0,HEX_0,HEX_2,HEX_8}, arch_sh_up}
+	clrs                      ;!/* 0000000001001000 clrs                */{"clrs",{0},{HEX_0,HEX_0,HEX_4,HEX_8}, arch_sh_up}
+	clrt                      ;!/* 0000000000001000 clrt                */{"clrt",{0},{HEX_0,HEX_0,HEX_0,HEX_8}, arch_sh_up}
+	cmp/eq #4,R0              ;!/* 10001000i8*1.... cmp/eq #<imm>,R0    */{"cmp/eq",{A_IMM,A_R0},{HEX_8,HEX_8,IMM0_8}, arch_sh_up}
+	cmp/eq r5,r4              ;!/* 0011nnnnmmmm0000 cmp/eq <REG_M>,<REG_N>*/{"cmp/eq",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_0}, arch_sh_up}
+	cmp/ge r5,r4              ;!/* 0011nnnnmmmm0011 cmp/ge <REG_M>,<REG_N>*/{"cmp/ge",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_3}, arch_sh_up}
+	cmp/gt r5,r4              ;!/* 0011nnnnmmmm0111 cmp/gt <REG_M>,<REG_N>*/{"cmp/gt",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_7}, arch_sh_up}
+	cmp/hi r5,r4              ;!/* 0011nnnnmmmm0110 cmp/hi <REG_M>,<REG_N>*/{"cmp/hi",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_6}, arch_sh_up}
+	cmp/hs r5,r4              ;!/* 0011nnnnmmmm0010 cmp/hs <REG_M>,<REG_N>*/{"cmp/hs",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_2}, arch_sh_up}
+	cmp/pl r4                 ;!/* 0100nnnn00010101 cmp/pl <REG_N>      */{"cmp/pl",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_5}, arch_sh_up}
+	cmp/pz r4                 ;!/* 0100nnnn00010001 cmp/pz <REG_N>      */{"cmp/pz",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_1}, arch_sh_up}
+	cmp/str r5,r4             ;!/* 0010nnnnmmmm1100 cmp/str <REG_M>,<REG_N>*/{"cmp/str",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_C}, arch_sh_up}
+	div0s r5,r4               ;!/* 0010nnnnmmmm0111 div0s <REG_M>,<REG_N>*/{"div0s",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_7}, arch_sh_up}
+	div0u                     ;!/* 0000000000011001 div0u               */{"div0u",{0},{HEX_0,HEX_0,HEX_1,HEX_9}, arch_sh_up}
+	div1 r5,r4                ;!/* 0011nnnnmmmm0100 div1 <REG_M>,<REG_N>*/{"div1",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_4}, arch_sh_up}
+	exts.b r5,r4              ;!/* 0110nnnnmmmm1110 exts.b <REG_M>,<REG_N>*/{"exts.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_E}, arch_sh_up}
+	exts.w r5,r4              ;!/* 0110nnnnmmmm1111 exts.w <REG_M>,<REG_N>*/{"exts.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_F}, arch_sh_up}
+	extu.b r5,r4              ;!/* 0110nnnnmmmm1100 extu.b <REG_M>,<REG_N>*/{"extu.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_C}, arch_sh_up}
+	extu.w r5,r4              ;!/* 0110nnnnmmmm1101 extu.w <REG_M>,<REG_N>*/{"extu.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_D}, arch_sh_up}
+	icbi @r4                  ;!/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
+	jmp @r4                   ;!/* 0100nnnn00101011 jmp @<REG_N>        */{"jmp",{A_IND_N},{HEX_4,REG_N,HEX_2,HEX_B}, arch_sh_up}
+	jsr @r4                   ;!/* 0100nnnn00001011 jsr @<REG_N>        */{"jsr",{A_IND_N},{HEX_4,REG_N,HEX_0,HEX_B}, arch_sh_up}
+	ldc r4,SR                 ;!/* 0100nnnn00001110 ldc <REG_N>,SR      */{"ldc",{A_REG_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_E}, arch_sh_up}
+	ldc r4,GBR                ;!/* 0100nnnn00011110 ldc <REG_N>,GBR     */{"ldc",{A_REG_N,A_GBR},{HEX_4,REG_N,HEX_1,HEX_E}, arch_sh_up}
+	ldc r4,SGR                ;!/* 0100nnnn00111010 ldc <REG_N>,SGR     */{"ldc",{A_REG_N,A_SGR},{HEX_4,REG_N,HEX_3,HEX_A}, arch_sh4_nommu_nofpu_up}
+	ldc r4,VBR                ;!/* 0100nnnn00101110 ldc <REG_N>,VBR     */{"ldc",{A_REG_N,A_VBR},{HEX_4,REG_N,HEX_2,HEX_E}, arch_sh_up}
+	ldc r4,SSR                ;!/* 0100nnnn00111110 ldc <REG_N>,SSR     */{"ldc",{A_REG_N,A_SSR},{HEX_4,REG_N,HEX_3,HEX_E}, arch_sh3_nommu_up}
+	ldc r4,SPC                ;!/* 0100nnnn01001110 ldc <REG_N>,SPC     */{"ldc",{A_REG_N,A_SPC},{HEX_4,REG_N,HEX_4,HEX_E}, arch_sh3_nommu_up}
+	ldc r4,DBR                ;!/* 0100nnnn11111010 ldc <REG_N>,DBR     */{"ldc",{A_REG_N,A_DBR},{HEX_4,REG_N,HEX_F,HEX_A}, arch_sh4_nommu_nofpu_up}
+	ldc r4,r1_bank            ;!/* 0100nnnn1xxx1110 ldc <REG_N>,Rn_BANK */{"ldc",{A_REG_N,A_REG_B},{HEX_4,REG_N,REG_B,HEX_E}, arch_sh3_nommu_up}
+	ldc.l @r4+,SR             ;!/* 0100nnnn00000111 ldc.l @<REG_N>+,SR  */{"ldc.l",{A_INC_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_7}, arch_sh_up}
+	ldc.l @r4+,GBR            ;!/* 0100nnnn00010111 ldc.l @<REG_N>+,GBR */{"ldc.l",{A_INC_N,A_GBR},{HEX_4,REG_N,HEX_1,HEX_7}, arch_sh_up}
+	ldc.l @r4+,VBR            ;!/* 0100nnnn00100111 ldc.l @<REG_N>+,VBR */{"ldc.l",{A_INC_N,A_VBR},{HEX_4,REG_N,HEX_2,HEX_7}, arch_sh_up}
+	ldc.l @r4+,SGR            ;!/* 0100nnnn00110110 ldc.l @<REG_N>+,SGR */{"ldc.l",{A_INC_N,A_SGR},{HEX_4,REG_N,HEX_3,HEX_6}, arch_sh4_nommu_nofpu_up}
+	ldc.l @r4+,SSR            ;!/* 0100nnnn00110111 ldc.l @<REG_N>+,SSR */{"ldc.l",{A_INC_N,A_SSR},{HEX_4,REG_N,HEX_3,HEX_7}, arch_sh3_nommu_up}
+	ldc.l @r4+,SPC            ;!/* 0100nnnn01000111 ldc.l @<REG_N>+,SPC */{"ldc.l",{A_INC_N,A_SPC},{HEX_4,REG_N,HEX_4,HEX_7}, arch_sh3_nommu_up}
+	ldc.l @r4+,DBR            ;!/* 0100nnnn11110110 ldc.l @<REG_N>+,DBR */{"ldc.l",{A_INC_N,A_DBR},{HEX_4,REG_N,HEX_F,HEX_6}, arch_sh4_nommu_nofpu_up}
+	ldc.l @r4+,r1_bank        ;!/* 0100nnnn1xxx0111 ldc.l @<REG_N>+,Rn_BANK */{"ldc.l",{A_INC_N,A_REG_B},{HEX_4,REG_N,REG_B,HEX_7}, arch_sh3_nommu_up}
+	lds r4,MACH               ;!/* 0100nnnn00001010 lds <REG_N>,MACH    */{"lds",{A_REG_N,A_MACH},{HEX_4,REG_N,HEX_0,HEX_A}, arch_sh_up}
+	lds r4,MACL               ;!/* 0100nnnn00011010 lds <REG_N>,MACL    */{"lds",{A_REG_N,A_MACL},{HEX_4,REG_N,HEX_1,HEX_A}, arch_sh_up}
+	lds r4,PR                 ;!/* 0100nnnn00101010 lds <REG_N>,PR      */{"lds",{A_REG_N,A_PR},{HEX_4,REG_N,HEX_2,HEX_A}, arch_sh_up}
+	lds r4,FPUL               ;!/* 0100nnnn01011010 lds <REG_N>,FPUL    */{"lds",{A_REG_M,FPUL_N},{HEX_4,REG_M,HEX_5,HEX_A}, arch_sh2e_up}
+	lds r5,FPSCR              ;!/* 0100nnnn01101010 lds <REG_M>,FPSCR   */{"lds",{A_REG_M,FPSCR_N},{HEX_4,REG_M,HEX_6,HEX_A}, arch_sh2e_up}
+	lds.l @r4+,MACH           ;!/* 0100nnnn00000110 lds.l @<REG_N>+,MACH*/{"lds.l",{A_INC_N,A_MACH},{HEX_4,REG_N,HEX_0,HEX_6}, arch_sh_up}
+	lds.l @r4+,MACL           ;!/* 0100nnnn00010110 lds.l @<REG_N>+,MACL*/{"lds.l",{A_INC_N,A_MACL},{HEX_4,REG_N,HEX_1,HEX_6}, arch_sh_up}
+	lds.l @r4+,PR             ;!/* 0100nnnn00100110 lds.l @<REG_N>+,PR  */{"lds.l",{A_INC_N,A_PR},{HEX_4,REG_N,HEX_2,HEX_6}, arch_sh_up}
+	lds.l @r5+,FPUL           ;!/* 0100nnnn01010110 lds.l @<REG_M>+,FPUL*/{"lds.l",{A_INC_M,FPUL_N},{HEX_4,REG_M,HEX_5,HEX_6}, arch_sh2e_up}
+	lds.l @r5+,FPSCR          ;!/* 0100nnnn01100110 lds.l @<REG_M>+,FPSCR*/{"lds.l",{A_INC_M,FPSCR_N},{HEX_4,REG_M,HEX_6,HEX_6}, arch_sh2e_up}
+	ldtlb                     ;!/* 0000000000111000 ldtlb               */{"ldtlb",{0},{HEX_0,HEX_0,HEX_3,HEX_8}, arch_sh3_up}
+	mac.w @r5+,@r4+           ;!/* 0100nnnnmmmm1111 mac.w @<REG_M>+,@<REG_N>+*/{"mac.w",{A_INC_M,A_INC_N},{HEX_4,REG_N,REG_M,HEX_F}, arch_sh_up}
+	mov #4,r4                 ;!/* 1110nnnni8*1.... mov #<imm>,<REG_N>  */{"mov",{A_IMM,A_REG_N},{HEX_E,REG_N,IMM0_8}, arch_sh_up}
+	mov r5,r4                 ;!/* 0110nnnnmmmm0011 mov <REG_M>,<REG_N> */{"mov",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_3}, arch_sh_up}
+	mov.b r5,@(R0,r4)         ;!/* 0000nnnnmmmm0100 mov.b <REG_M>,@(R0,<REG_N>)*/{"mov.b",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b r5,@-r4             ;!/* 0010nnnnmmmm0100 mov.b <REG_M>,@-<REG_N>*/{"mov.b",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b r5,@r4              ;!/* 0010nnnnmmmm0000 mov.b <REG_M>,@<REG_N>*/{"mov.b",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_0}, arch_sh_up}
+	mov.b @(8,r5),R0          ;!/* 10000100mmmmi4*1 mov.b @(<disp>,<REG_M>),R0*/{"mov.b",{A_DISP_REG_M,A_R0},{HEX_8,HEX_4,REG_M,IMM0_4}, arch_sh_up}
+	mov.b @(8,GBR),R0         ;!/* 11000100i8*1.... mov.b @(<disp>,GBR),R0*/{"mov.b",{A_DISP_GBR,A_R0},{HEX_C,HEX_4,IMM0_8}, arch_sh_up}
+	mov.b @(R0,r5),r4         ;!/* 0000nnnnmmmm1100 mov.b @(R0,<REG_M>),<REG_N>*/{"mov.b",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_C}, arch_sh_up}
+	mov.b @r5+,r4             ;!/* 0110nnnnmmmm0100 mov.b @<REG_M>+,<REG_N>*/{"mov.b",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b @r5,r4              ;!/* 0110nnnnmmmm0000 mov.b @<REG_M>,<REG_N>*/{"mov.b",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_0}, arch_sh_up}
+	mov.b R0,@(8,r5)          ;!/* 10000000mmmmi4*1 mov.b R0,@(<disp>,<REG_M>)*/{"mov.b",{A_R0,A_DISP_REG_M},{HEX_8,HEX_0,REG_M,IMM1_4}, arch_sh_up}
+	mov.b R0,@(8,GBR)         ;!/* 11000000i8*1.... mov.b R0,@(<disp>,GBR)*/{"mov.b",{A_R0,A_DISP_GBR},{HEX_C,HEX_0,IMM1_8}, arch_sh_up}
+	mov.l r5,@(8,r4)          ;!/* 0001nnnnmmmmi4*4 mov.l <REG_M>,@(<disp>,<REG_N>)*/{"mov.l",{ A_REG_M,A_DISP_REG_N},{HEX_1,REG_N,REG_M,IMM1_4BY4}, arch_sh_up}
+	mov.l r5,@(R0,r4)         ;!/* 0000nnnnmmmm0110 mov.l <REG_M>,@(R0,<REG_N>)*/{"mov.l",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l r5,@-r4             ;!/* 0010nnnnmmmm0110 mov.l <REG_M>,@-<REG_N>*/{"mov.l",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l r5,@r4              ;!/* 0010nnnnmmmm0010 mov.l <REG_M>,@<REG_N>*/{"mov.l",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_2}, arch_sh_up}
+	mov.l @(8,r5),r4          ;!/* 0101nnnnmmmmi4*4 mov.l @(<disp>,<REG_M>),<REG_N>*/{"mov.l",{A_DISP_REG_M,A_REG_N},{HEX_5,REG_N,REG_M,IMM0_4BY4}, arch_sh_up}
+	mov.l @(8,GBR),R0         ;!/* 11000110i8*4.... mov.l @(<disp>,GBR),R0*/{"mov.l",{A_DISP_GBR,A_R0},{HEX_C,HEX_6,IMM0_8BY4}, arch_sh_up}
+	.align 2
+	mov.l @(8,PC),r4 ;!/* 1101nnnni8p4.... mov.l @(<disp>,PC),<REG_N>*/{"mov.l",{A_DISP_PC,A_REG_N},{HEX_D,REG_N,PCRELIMM_8BY4}, arch_sh_up}
+	mov.l @(R0,r5),r4         ;!/* 0000nnnnmmmm1110 mov.l @(R0,<REG_M>),<REG_N>*/{"mov.l",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_E}, arch_sh_up}
+	mov.l @r5+,r4             ;!/* 0110nnnnmmmm0110 mov.l @<REG_M>+,<REG_N>*/{"mov.l",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l @r5,r4              ;!/* 0110nnnnmmmm0010 mov.l @<REG_M>,<REG_N>*/{"mov.l",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_2}, arch_sh_up}
+	mov.l R0,@(8,GBR)         ;!/* 11000010i8*4.... mov.l R0,@(<disp>,GBR)*/{"mov.l",{A_R0,A_DISP_GBR},{HEX_C,HEX_2,IMM1_8BY4}, arch_sh_up}
+	mov.w r5,@(R0,r4)         ;!/* 0000nnnnmmmm0101 mov.w <REG_M>,@(R0,<REG_N>)*/{"mov.w",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w r5,@-r4             ;!/* 0010nnnnmmmm0101 mov.w <REG_M>,@-<REG_N>*/{"mov.w",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w r5,@r4              ;!/* 0010nnnnmmmm0001 mov.w <REG_M>,@<REG_N>*/{"mov.w",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_1}, arch_sh_up}
+	mov.w @(8,r5),R0          ;!/* 10000101mmmmi4*2 mov.w @(<disp>,<REG_M>),R0*/{"mov.w",{A_DISP_REG_M,A_R0},{HEX_8,HEX_5,REG_M,IMM0_4BY2}, arch_sh_up}
+	mov.w @(8,GBR),R0         ;!/* 11000101i8*2.... mov.w @(<disp>,GBR),R0*/{"mov.w",{A_DISP_GBR,A_R0},{HEX_C,HEX_5,IMM0_8BY2}, arch_sh_up}
+	mov.w @(8,PC),r4          ;!/* 1001nnnni8p2.... mov.w @(<disp>,PC),<REG_N>*/{"mov.w",{A_DISP_PC,A_REG_N},{HEX_9,REG_N,PCRELIMM_8BY2}, arch_sh_up}
+	mov.w @(R0,r5),r4         ;!/* 0000nnnnmmmm1101 mov.w @(R0,<REG_M>),<REG_N>*/{"mov.w",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_D}, arch_sh_up}
+	mov.w @r5+,r4             ;!/* 0110nnnnmmmm0101 mov.w @<REG_M>+,<REG_N>*/{"mov.w",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w @r5,r4              ;!/* 0110nnnnmmmm0001 mov.w @<REG_M>,<REG_N>*/{"mov.w",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_1}, arch_sh_up}
+	mov.w R0,@(8,r5)          ;!/* 10000001mmmmi4*2 mov.w R0,@(<disp>,<REG_M>)*/{"mov.w",{A_R0,A_DISP_REG_M},{HEX_8,HEX_1,REG_M,IMM1_4BY2}, arch_sh_up}
+	mov.w R0,@(8,GBR)         ;!/* 11000001i8*2.... mov.w R0,@(<disp>,GBR)*/{"mov.w",{A_R0,A_DISP_GBR},{HEX_C,HEX_1,IMM1_8BY2}, arch_sh_up}
+	.align 2
+	mova @(8,PC),R0 ;!/* 11000111i8p4.... mova @(<disp>,PC),R0*/{"mova",{A_DISP_PC,A_R0},{HEX_C,HEX_7,PCRELIMM_8BY4}, arch_sh_up}
+	movca.l R0,@r4            ;!/* 0000nnnn11000011 movca.l R0,@<REG_N> */{"movca.l",{A_R0,A_IND_N},{HEX_0,REG_N,HEX_C,HEX_3}, arch_sh4_nommu_nofpu_up}
+	movt r4                   ;!/* 0000nnnn00101001 movt <REG_N>        */{"movt",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_9}, arch_sh_up}
+	muls.w r5,r4              ;!/* 0010nnnnmmmm1111 muls.w <REG_M>,<REG_N>*/{"muls.w",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_F}, arch_sh_up}
+	muls r5,r4                ;!/* 0010nnnnmmmm1111 muls <REG_M>,<REG_N>*/{"muls",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_F}, arch_sh_up}
+	mul.l r5,r4               ;!/* 0000nnnnmmmm0111 mul.l <REG_M>,<REG_N>*/{"mul.l",{ A_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_7}, arch_sh2_up}
+	mulu.w r5,r4              ;!/* 0010nnnnmmmm1110 mulu.w <REG_M>,<REG_N>*/{"mulu.w",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_E}, arch_sh_up}
+	mulu r5,r4                ;!/* 0010nnnnmmmm1110 mulu <REG_M>,<REG_N>*/{"mulu",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_E}, arch_sh_up}
+	neg r5,r4                 ;!/* 0110nnnnmmmm1011 neg <REG_M>,<REG_N> */{"neg",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_B}, arch_sh_up}
+	negc r5,r4                ;!/* 0110nnnnmmmm1010 negc <REG_M>,<REG_N>*/{"negc",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_A}, arch_sh_up}
+	nop                       ;!/* 0000000000001001 nop                 */{"nop",{0},{HEX_0,HEX_0,HEX_0,HEX_9}, arch_sh_up}
+	not r5,r4                 ;!/* 0110nnnnmmmm0111 not <REG_M>,<REG_N> */{"not",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_7}, arch_sh_up}
+	ocbi @r4                  ;!/* 0000nnnn10010011 ocbi @<REG_N>       */{"ocbi",{A_IND_N},{HEX_0,REG_N,HEX_9,HEX_3}, arch_sh4_nommu_nofpu_up}
+	ocbp @r4                  ;!/* 0000nnnn10100011 ocbp @<REG_N>       */{"ocbp",{A_IND_N},{HEX_0,REG_N,HEX_A,HEX_3}, arch_sh4_nommu_nofpu_up}
+	ocbwb @r4                 ;!/* 0000nnnn10110011 ocbwb @<REG_N>      */{"ocbwb",{A_IND_N},{HEX_0,REG_N,HEX_B,HEX_3}, arch_sh4_nommu_nofpu_up}
+	or #4,R0                  ;!/* 11001011i8*1.... or #<imm>,R0        */{"or",{A_IMM,A_R0},{HEX_C,HEX_B,IMM0_8}, arch_sh_up}
+	or r5,r4                  ;!/* 0010nnnnmmmm1011 or <REG_M>,<REG_N>  */{"or",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_B}, arch_sh_up}
+	or.b #4,@(R0,GBR)         ;!/* 11001111i8*1.... or.b #<imm>,@(R0,GBR)*/{"or.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_F,IMM0_8}, arch_sh_up}
+	pref @r4                  ;!/* 0000nnnn10000011 pref @<REG_N>       */{"pref",{A_IND_N},{HEX_0,REG_N,HEX_8,HEX_3}, arch_sh2a_nofpu_or_sh4_nommu_nofpu_up}
+	rotcl r4                  ;!/* 0100nnnn00100100 rotcl <REG_N>       */{"rotcl",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_4}, arch_sh_up}
+	rotcr r4                  ;!/* 0100nnnn00100101 rotcr <REG_N>       */{"rotcr",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_5}, arch_sh_up}
+	rotl r4                   ;!/* 0100nnnn00000100 rotl <REG_N>        */{"rotl",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_4}, arch_sh_up}
+	rotr r4                   ;!/* 0100nnnn00000101 rotr <REG_N>        */{"rotr",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_5}, arch_sh_up}
+	rte                       ;!/* 0000000000101011 rte                 */{"rte",{0},{HEX_0,HEX_0,HEX_2,HEX_B}, arch_sh_up}
+	rts                       ;!/* 0000000000001011 rts                 */{"rts",{0},{HEX_0,HEX_0,HEX_0,HEX_B}, arch_sh_up}
+	sets                      ;!/* 0000000001011000 sets                */{"sets",{0},{HEX_0,HEX_0,HEX_5,HEX_8}, arch_sh_up}
+	sett                      ;!/* 0000000000011000 sett                */{"sett",{0},{HEX_0,HEX_0,HEX_1,HEX_8}, arch_sh_up}
+	shad r5,r4                ;!/* 0100nnnnmmmm1100 shad <REG_M>,<REG_N>*/{"shad",{ A_REG_M,A_REG_N},{HEX_4,REG_N,REG_M,HEX_C}, arch_sh2a_nofpu_or_sh3_nommu_up}
+	shld r5,r4                ;!/* 0100nnnnmmmm1101 shld <REG_M>,<REG_N>*/{"shld",{ A_REG_M,A_REG_N},{HEX_4,REG_N,REG_M,HEX_D}, arch_sh2a_nofpu_or_sh3_nommu_up}
+	shal r4                   ;!/* 0100nnnn00100000 shal <REG_N>        */{"shal",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_0}, arch_sh_up}
+	shar r4                   ;!/* 0100nnnn00100001 shar <REG_N>        */{"shar",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_1}, arch_sh_up}
+	shll r4                   ;!/* 0100nnnn00000000 shll <REG_N>        */{"shll",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_0}, arch_sh_up}
+	shll16 r4                 ;!/* 0100nnnn00101000 shll16 <REG_N>      */{"shll16",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_8}, arch_sh_up}
+	shll2 r4                  ;!/* 0100nnnn00001000 shll2 <REG_N>       */{"shll2",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_8}, arch_sh_up}
+	shll8 r4                  ;!/* 0100nnnn00011000 shll8 <REG_N>       */{"shll8",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_8}, arch_sh_up}
+	shlr r4                   ;!/* 0100nnnn00000001 shlr <REG_N>        */{"shlr",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_1}, arch_sh_up}
+	shlr16 r4                 ;!/* 0100nnnn00101001 shlr16 <REG_N>      */{"shlr16",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_9}, arch_sh_up}
+	shlr2 r4                  ;!/* 0100nnnn00001001 shlr2 <REG_N>       */{"shlr2",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_9}, arch_sh_up}
+	shlr8 r4                  ;!/* 0100nnnn00011001 shlr8 <REG_N>       */{"shlr8",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_9}, arch_sh_up}
+	sleep                     ;!/* 0000000000011011 sleep               */{"sleep",{0},{HEX_0,HEX_0,HEX_1,HEX_B}, arch_sh_up}
+	stc SR,r4                 ;!/* 0000nnnn00000010 stc SR,<REG_N>      */{"stc",{A_SR,A_REG_N},{HEX_0,REG_N,HEX_0,HEX_2}, arch_sh_up}
+	stc GBR,r4                ;!/* 0000nnnn00010010 stc GBR,<REG_N>     */{"stc",{A_GBR,A_REG_N},{HEX_0,REG_N,HEX_1,HEX_2}, arch_sh_up}
+	stc VBR,r4                ;!/* 0000nnnn00100010 stc VBR,<REG_N>     */{"stc",{A_VBR,A_REG_N},{HEX_0,REG_N,HEX_2,HEX_2}, arch_sh_up}
+	stc SSR,r4                ;!/* 0000nnnn00110010 stc SSR,<REG_N>     */{"stc",{A_SSR,A_REG_N},{HEX_0,REG_N,HEX_3,HEX_2}, arch_sh3_nommu_up}
+	stc SPC,r4                ;!/* 0000nnnn01000010 stc SPC,<REG_N>     */{"stc",{A_SPC,A_REG_N},{HEX_0,REG_N,HEX_4,HEX_2}, arch_sh3_nommu_up}
+	stc SGR,r4                ;!/* 0000nnnn00111010 stc SGR,<REG_N>     */{"stc",{A_SGR,A_REG_N},{HEX_0,REG_N,HEX_3,HEX_A}, arch_sh4_nommu_nofpu_up}
+	stc DBR,r4                ;!/* 0000nnnn11111010 stc DBR,<REG_N>     */{"stc",{A_DBR,A_REG_N},{HEX_0,REG_N,HEX_F,HEX_A}, arch_sh4_nommu_nofpu_up}
+	stc r1_bank,r4            ;!/* 0000nnnn1xxx0010 stc Rn_BANK,<REG_N> */{"stc",{A_REG_B,A_REG_N},{HEX_0,REG_N,REG_B,HEX_2}, arch_sh3_nommu_up}
+	stc.l SR,@-r4             ;!/* 0100nnnn00000011 stc.l SR,@-<REG_N>  */{"stc.l",{A_SR,A_DEC_N},{HEX_4,REG_N,HEX_0,HEX_3}, arch_sh_up}
+	stc.l VBR,@-r4            ;!/* 0100nnnn00100011 stc.l VBR,@-<REG_N> */{"stc.l",{A_VBR,A_DEC_N},{HEX_4,REG_N,HEX_2,HEX_3}, arch_sh_up}
+	stc.l SSR,@-r4            ;!/* 0100nnnn00110011 stc.l SSR,@-<REG_N> */{"stc.l",{A_SSR,A_DEC_N},{HEX_4,REG_N,HEX_3,HEX_3}, arch_sh3_nommu_up}
+	stc.l SPC,@-r4            ;!/* 0100nnnn01000011 stc.l SPC,@-<REG_N> */{"stc.l",{A_SPC,A_DEC_N},{HEX_4,REG_N,HEX_4,HEX_3}, arch_sh3_nommu_up}
+	stc.l GBR,@-r4            ;!/* 0100nnnn00010011 stc.l GBR,@-<REG_N> */{"stc.l",{A_GBR,A_DEC_N},{HEX_4,REG_N,HEX_1,HEX_3}, arch_sh_up}
+	stc.l SGR,@-r4            ;!/* 0100nnnn00110010 stc.l SGR,@-<REG_N> */{"stc.l",{A_SGR,A_DEC_N},{HEX_4,REG_N,HEX_3,HEX_2}, arch_sh4_nommu_nofpu_up}
+	stc.l DBR,@-r4            ;!/* 0100nnnn11110010 stc.l DBR,@-<REG_N> */{"stc.l",{A_DBR,A_DEC_N},{HEX_4,REG_N,HEX_F,HEX_2}, arch_sh4_nommu_nofpu_up}
+	stc.l r1_bank,@-r4        ;!/* 0100nnnn1xxx0011 stc.l Rn_BANK,@-<REG_N> */{"stc.l",{A_REG_B,A_DEC_N},{HEX_4,REG_N,REG_B,HEX_3}, arch_sh3_nommu_up}
+	sts MACH,r4               ;!/* 0000nnnn00001010 sts MACH,<REG_N>    */{"sts",{A_MACH,A_REG_N},{HEX_0,REG_N,HEX_0,HEX_A}, arch_sh_up}
+	sts MACL,r4               ;!/* 0000nnnn00011010 sts MACL,<REG_N>    */{"sts",{A_MACL,A_REG_N},{HEX_0,REG_N,HEX_1,HEX_A}, arch_sh_up}
+	sts PR,r4                 ;!/* 0000nnnn00101010 sts PR,<REG_N>      */{"sts",{A_PR,A_REG_N},{HEX_0,REG_N,HEX_2,HEX_A}, arch_sh_up}
+	sts FPUL,r4               ;!/* 0000nnnn01011010 sts FPUL,<REG_N>    */{"sts",{FPUL_M,A_REG_N},{HEX_0,REG_N,HEX_5,HEX_A}, arch_sh2e_up}
+	sts FPSCR,r4              ;!/* 0000nnnn01101010 sts FPSCR,<REG_N>   */{"sts",{FPSCR_M,A_REG_N},{HEX_0,REG_N,HEX_6,HEX_A}, arch_sh2e_up}
+	sts.l MACH,@-r4           ;!/* 0100nnnn00000010 sts.l MACH,@-<REG_N>*/{"sts.l",{A_MACH,A_DEC_N},{HEX_4,REG_N,HEX_0,HEX_2}, arch_sh_up}
+	sts.l MACL,@-r4           ;!/* 0100nnnn00010010 sts.l MACL,@-<REG_N>*/{"sts.l",{A_MACL,A_DEC_N},{HEX_4,REG_N,HEX_1,HEX_2}, arch_sh_up}
+	sts.l PR,@-r4             ;!/* 0100nnnn00100010 sts.l PR,@-<REG_N>  */{"sts.l",{A_PR,A_DEC_N},{HEX_4,REG_N,HEX_2,HEX_2}, arch_sh_up}
+	sts.l FPUL,@-r4           ;!/* 0100nnnn01010010 sts.l FPUL,@-<REG_N>*/{"sts.l",{FPUL_M,A_DEC_N},{HEX_4,REG_N,HEX_5,HEX_2}, arch_sh2e_up}
+	sts.l FPSCR,@-r4          ;!/* 0100nnnn01100010 sts.l FPSCR,@-<REG_N>*/{"sts.l",{FPSCR_M,A_DEC_N},{HEX_4,REG_N,HEX_6,HEX_2}, arch_sh2e_up}
+	sub r5,r4                 ;!/* 0011nnnnmmmm1000 sub <REG_M>,<REG_N> */{"sub",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_8}, arch_sh_up}
+	subc r5,r4                ;!/* 0011nnnnmmmm1010 subc <REG_M>,<REG_N>*/{"subc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_A}, arch_sh_up}
+	subv r5,r4                ;!/* 0011nnnnmmmm1011 subv <REG_M>,<REG_N>*/{"subv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_B}, arch_sh_up}
+	swap.b r5,r4              ;!/* 0110nnnnmmmm1000 swap.b <REG_M>,<REG_N>*/{"swap.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_8}, arch_sh_up}
+	swap.w r5,r4              ;!/* 0110nnnnmmmm1001 swap.w <REG_M>,<REG_N>*/{"swap.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_9}, arch_sh_up}
+	synco                     ;!/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
+	tas.b @r4                 ;!/* 0100nnnn00011011 tas.b @<REG_N>      */{"tas.b",{A_IND_N},{HEX_4,REG_N,HEX_1,HEX_B}, arch_sh_up}
+	trapa #4                  ;!/* 11000011i8*1.... trapa #<imm>        */{"trapa",{A_IMM},{HEX_C,HEX_3,IMM0_8}, arch_sh_up}
+	tst #4,R0                 ;!/* 11001000i8*1.... tst #<imm>,R0       */{"tst",{A_IMM,A_R0},{HEX_C,HEX_8,IMM0_8}, arch_sh_up}
+	tst r5,r4                 ;!/* 0010nnnnmmmm1000 tst <REG_M>,<REG_N> */{"tst",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_8}, arch_sh_up}
+	tst.b #4,@(R0,GBR)        ;!/* 11001100i8*1.... tst.b #<imm>,@(R0,GBR)*/{"tst.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_C,IMM0_8}, arch_sh_up}
+	xor #4,R0                 ;!/* 11001010i8*1.... xor #<imm>,R0       */{"xor",{A_IMM,A_R0},{HEX_C,HEX_A,IMM0_8}, arch_sh_up}
+	xor r5,r4                 ;!/* 0010nnnnmmmm1010 xor <REG_M>,<REG_N> */{"xor",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_A}, arch_sh_up}
+	xor.b #4,@(R0,GBR)        ;!/* 11001110i8*1.... xor.b #<imm>,@(R0,GBR)*/{"xor.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_E,IMM0_8}, arch_sh_up}
+	xtrct r5,r4               ;!/* 0010nnnnmmmm1101 xtrct <REG_M>,<REG_N>*/{"xtrct",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_D}, arch_sh_up}
+	dt r4                     ;!/* 0100nnnn00010000 dt <REG_N>          */{"dt",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_0}, arch_sh2_up}
+	dmuls.l r5,r4             ;!/* 0011nnnnmmmm1101 dmuls.l <REG_M>,<REG_N>*/{"dmuls.l",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_D}, arch_sh2_up}
+	dmulu.l r5,r4             ;!/* 0011nnnnmmmm0101 dmulu.l <REG_M>,<REG_N>*/{"dmulu.l",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_5}, arch_sh2_up}
+	mac.l @r5+,@r4+           ;!/* 0000nnnnmmmm1111 mac.l @<REG_M>+,@<REG_N>+*/{"mac.l",{A_INC_M,A_INC_N},{HEX_0,REG_N,REG_M,HEX_F}, arch_sh2_up}
+	braf r4                   ;!/* 0000nnnn00100011 braf <REG_N>       */{"braf",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_3}, arch_sh2_up}
+	bsrf r4                   ;!/* 0000nnnn00000011 bsrf <REG_N>       */{"bsrf",{A_REG_N},{HEX_0,REG_N,HEX_0,HEX_3}, arch_sh2_up}
+	fabs fr1                  ;!/* 1111nnnn01011101 fabs <F_REG_N>     */{"fabs",{F_REG_N},{HEX_F,REG_N,HEX_5,HEX_D}, arch_sh2e_up}
+	fabs dr2                  ;!/* 1111nnn001011101 fabs <D_REG_N>     */{"fabs",{D_REG_N},{HEX_F,REG_N,HEX_5,HEX_D}, arch_sh2a_or_sh4_up}
+	fadd fr2,fr1              ;!/* 1111nnnnmmmm0000 fadd <F_REG_M>,<F_REG_N>*/{"fadd",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_0}, arch_sh2e_up}
+	fadd dr4,dr2              ;!/* 1111nnn0mmm00000 fadd <D_REG_M>,<D_REG_N>*/{"fadd",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_0}, arch_sh2a_or_sh4_up}
+	fcmp/eq fr2,fr1           ;!/* 1111nnnnmmmm0100 fcmp/eq <F_REG_M>,<F_REG_N>*/{"fcmp/eq",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_4}, arch_sh2e_up}
+	fcmp/eq dr4,dr2           ;!/* 1111nnn0mmm00100 fcmp/eq <D_REG_M>,<D_REG_N>*/{"fcmp/eq",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_4}, arch_sh2a_or_sh4_up}
+	fcmp/gt fr2,fr1           ;!/* 1111nnnnmmmm0101 fcmp/gt <F_REG_M>,<F_REG_N>*/{"fcmp/gt",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_5}, arch_sh2e_up}
+	fcmp/gt dr4,dr2           ;!/* 1111nnn0mmm00101 fcmp/gt <D_REG_M>,<D_REG_N>*/{"fcmp/gt",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_5}, arch_sh2a_or_sh4_up}
+	fcnvds dr2,FPUL           ;!/* 1111nnn010111101 fcnvds <D_REG_N>,FPUL*/{"fcnvds",{D_REG_N,FPUL_M},{HEX_F,REG_N_D,HEX_B,HEX_D}, arch_sh2a_or_sh4_up}
+	fcnvsd FPUL,dr2           ;!/* 1111nnn010101101 fcnvsd FPUL,<D_REG_N>*/{"fcnvsd",{FPUL_M,D_REG_N},{HEX_F,REG_N_D,HEX_A,HEX_D}, arch_sh2a_or_sh4_up}
+	fdiv fr2,fr1              ;!/* 1111nnnnmmmm0011 fdiv <F_REG_M>,<F_REG_N>*/{"fdiv",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_3}, arch_sh2e_up}
+	fdiv dr4,dr2              ;!/* 1111nnn0mmm00011 fdiv <D_REG_M>,<D_REG_N>*/{"fdiv",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_3}, arch_sh2a_or_sh4_up}
+	fipr fv4,fv0              ;!/* 1111nnmm11101101 fipr <V_REG_M>,<V_REG_N>*/{"fipr",{V_REG_M,V_REG_N},{HEX_F,REG_NM,HEX_E,HEX_D}, arch_sh4_up}
+	fldi0 fr1                 ;!/* 1111nnnn10001101 fldi0 <F_REG_N>    */{"fldi0",{F_REG_N},{HEX_F,REG_N,HEX_8,HEX_D}, arch_sh2e_up}
+	fldi1 fr1                 ;!/* 1111nnnn10011101 fldi1 <F_REG_N>    */{"fldi1",{F_REG_N},{HEX_F,REG_N,HEX_9,HEX_D}, arch_sh2e_up}
+	flds fr1,FPUL             ;!/* 1111nnnn00011101 flds <F_REG_N>,FPUL*/{"flds",{F_REG_N,FPUL_M},{HEX_F,REG_N,HEX_1,HEX_D}, arch_sh2e_up}
+	float FPUL,fr1            ;!/* 1111nnnn00101101 float FPUL,<F_REG_N>*/{"float",{FPUL_M,F_REG_N},{HEX_F,REG_N,HEX_2,HEX_D}, arch_sh2e_up}
+	float FPUL,dr2            ;!/* 1111nnn000101101 float FPUL,<D_REG_N>*/{"float",{FPUL_M,D_REG_N},{HEX_F,REG_N,HEX_2,HEX_D}, arch_sh2a_or_sh4_up}
+	fmac FR0,fr2,fr1          ;!/* 1111nnnnmmmm1110 fmac FR0,<F_REG_M>,<F_REG_N>*/{"fmac",{F_FR0,F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_E}, arch_sh2e_up}
+	fmov fr2,fr1              ;!/* 1111nnnnmmmm1100 fmov <F_REG_M>,<F_REG_N>*/{"fmov",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_C}, arch_sh2e_up}
+	fmov xd4,xd2              ;!/* 1111nnn1mmmm1100 fmov <DX_REG_M>,<DX_REG_N>*/{"fmov",{DX_REG_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_C}, arch_sh2a_or_sh4_up}
+	fmov @r5,fr1              ;!/* 1111nnnnmmmm1000 fmov @<REG_M>,<F_REG_N>*/{"fmov",{A_IND_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_8}, arch_sh2e_up}
+	fmov @r5,xd2              ;!/* 1111nnn1mmmm1000 fmov @<REG_M>,<DX_REG_N>*/{"fmov",{A_IND_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_8}, arch_sh2a_or_sh4_up}
+	fmov fr2,@r4              ;!/* 1111nnnnmmmm1010 fmov <F_REG_M>,@<REG_N>*/{"fmov",{F_REG_M,A_IND_N},{HEX_F,REG_N,REG_M,HEX_A}, arch_sh2e_up}
+	fmov xd4,@r4              ;!/* 1111nnnnmmm11010 fmov <DX_REG_M>,@<REG_N>*/{"fmov",{DX_REG_M,A_IND_N},{HEX_F,REG_N,REG_M,HEX_A}, arch_sh2a_or_sh4_up}
+	fmov @r5+,fr1             ;!/* 1111nnnnmmmm1001 fmov @<REG_M>+,<F_REG_N>*/{"fmov",{A_INC_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_9}, arch_sh2e_up}
+	fmov @r5+,xd2             ;!/* 1111nnn1mmmm1001 fmov @<REG_M>+,<DX_REG_N>*/{"fmov",{A_INC_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_9}, arch_sh2a_or_sh4_up}
+	fmov fr2,@-r4             ;!/* 1111nnnnmmmm1011 fmov <F_REG_M>,@-<REG_N>*/{"fmov",{F_REG_M,A_DEC_N},{HEX_F,REG_N,REG_M,HEX_B}, arch_sh2e_up}
+	fmov xd4,@-r4             ;!/* 1111nnnnmmm11011 fmov <DX_REG_M>,@-<REG_N>*/{"fmov",{DX_REG_M,A_DEC_N},{HEX_F,REG_N,REG_M,HEX_B}, arch_sh2a_or_sh4_up}
+	fmov @(R0,r5),fr1         ;!/* 1111nnnnmmmm0110 fmov @(R0,<REG_M>),<F_REG_N>*/{"fmov",{A_IND_R0_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_6}, arch_sh2e_up}
+	fmov @(R0,r5),xd2         ;!/* 1111nnn1mmmm0110 fmov @(R0,<REG_M>),<DX_REG_N>*/{"fmov",{A_IND_R0_REG_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_6}, arch_sh2a_or_sh4_up}
+	fmov fr2,@(R0,r4)         ;!/* 1111nnnnmmmm0111 fmov <F_REG_M>,@(R0,<REG_N>)*/{"fmov",{F_REG_M,A_IND_R0_REG_N},{HEX_F,REG_N,REG_M,HEX_7}, arch_sh2e_up}
+	fmov xd4,@(R0,r4)         ;!/* 1111nnnnmmm10111 fmov <DX_REG_M>,@(R0,<REG_N>)*/{"fmov",{DX_REG_M,A_IND_R0_REG_N},{HEX_F,REG_N,REG_M,HEX_7}, arch_sh2a_or_sh4_up}
+	fmov.d @r5,xd2            ;!/* 1111nnn1mmmm1000 fmov.d @<REG_M>,<DX_REG_N>*/{"fmov.d",{A_IND_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_8}, arch_sh2a_or_sh4_up}
+	fmov.d xd4,@r4            ;!/* 1111nnnnmmm11010 fmov.d <DX_REG_M>,@<REG_N>*/{"fmov.d",{DX_REG_M,A_IND_N},{HEX_F,REG_N,REG_M,HEX_A}, arch_sh2a_or_sh4_up}
+	fmov.d @r5+,xd2           ;!/* 1111nnn1mmmm1001 fmov.d @<REG_M>+,<DX_REG_N>*/{"fmov.d",{A_INC_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_9}, arch_sh2a_or_sh4_up}
+	fmov.d xd4,@-r4           ;!/* 1111nnnnmmm11011 fmov.d <DX_REG_M>,@-<REG_N>*/{"fmov.d",{DX_REG_M,A_DEC_N},{HEX_F,REG_N,REG_M,HEX_B}, arch_sh2a_or_sh4_up}
+	fmov.d @(R0,r5),xd2       ;!/* 1111nnn1mmmm0110 fmov.d @(R0,<REG_M>),<DX_REG_N>*/{"fmov.d",{A_IND_R0_REG_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_6}, arch_sh2a_or_sh4_up}
+	fmov.d xd4,@(R0,r4)       ;!/* 1111nnnnmmm10111 fmov.d <DX_REG_M>,@(R0,<REG_N>)*/{"fmov.d",{DX_REG_M,A_IND_R0_REG_N},{HEX_F,REG_N,REG_M,HEX_7}, arch_sh2a_or_sh4_up}
+	fmov.s @r5,fr1            ;!/* 1111nnnnmmmm1000 fmov.s @<REG_M>,<F_REG_N>*/{"fmov.s",{A_IND_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_8}, arch_sh2e_up}
+	fmov.s fr2,@r4            ;!/* 1111nnnnmmmm1010 fmov.s <F_REG_M>,@<REG_N>*/{"fmov.s",{F_REG_M,A_IND_N},{HEX_F,REG_N,REG_M,HEX_A}, arch_sh2e_up}
+	fmov.s @r5+,fr1           ;!/* 1111nnnnmmmm1001 fmov.s @<REG_M>+,<F_REG_N>*/{"fmov.s",{A_INC_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_9}, arch_sh2e_up}
+	fmov.s fr2,@-r4           ;!/* 1111nnnnmmmm1011 fmov.s <F_REG_M>,@-<REG_N>*/{"fmov.s",{F_REG_M,A_DEC_N},{HEX_F,REG_N,REG_M,HEX_B}, arch_sh2e_up}
+	fmov.s @(R0,r5),fr1       ;!/* 1111nnnnmmmm0110 fmov.s @(R0,<REG_M>),<F_REG_N>*/{"fmov.s",{A_IND_R0_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_6}, arch_sh2e_up}
+	fmov.s fr2,@(R0,r4)       ;!/* 1111nnnnmmmm0111 fmov.s <F_REG_M>,@(R0,<REG_N>)*/{"fmov.s",{F_REG_M,A_IND_R0_REG_N},{HEX_F,REG_N,REG_M,HEX_7}, arch_sh2e_up}
+	fmul fr2,fr1              ;!/* 1111nnnnmmmm0010 fmul <F_REG_M>,<F_REG_N>*/{"fmul",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_2}, arch_sh2e_up}
+	fmul dr4,dr2              ;!/* 1111nnn0mmm00010 fmul <D_REG_M>,<D_REG_N>*/{"fmul",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_2}, arch_sh2a_or_sh4_up}
+	fneg fr1                  ;!/* 1111nnnn01001101 fneg <F_REG_N>     */{"fneg",{F_REG_N},{HEX_F,REG_N,HEX_4,HEX_D}, arch_sh2e_up}
+	fneg dr2                  ;!/* 1111nnn001001101 fneg <D_REG_N>     */{"fneg",{D_REG_N},{HEX_F,REG_N,HEX_4,HEX_D}, arch_sh2a_or_sh4_up}
+	fpchg                     ;!/* 1111011111111101 fpchg               */{"fpchg",{0},{HEX_F,HEX_7,HEX_F,HEX_D}, arch_st40_300_or_sh4a_up}
+	frchg                     ;!/* 1111101111111101 frchg               */{"frchg",{0},{HEX_F,HEX_B,HEX_F,HEX_D}, arch_sh4_up}
+	fsca FPUL,dr2             ;!/* 1111nnn011111101 fsca FPUL,<D_REG_N> */{"fsca",{FPUL_M,D_REG_N},{HEX_F,REG_N_D,HEX_F,HEX_D}, arch_sh4_up}
+	fschg                     ;!/* 1111001111111101 fschg               */{"fschg",{0},{HEX_F,HEX_3,HEX_F,HEX_D}, arch_sh2a_or_sh4_up}
+	fsqrt fr1                 ;!/* 1111nnnn01101101 fsqrt <F_REG_N>    */{"fsqrt",{F_REG_N},{HEX_F,REG_N,HEX_6,HEX_D}, arch_sh2a_or_sh3e_up}
+	fsqrt dr2                 ;!/* 1111nnn001101101 fsqrt <D_REG_N>    */{"fsqrt",{D_REG_N},{HEX_F,REG_N,HEX_6,HEX_D}, arch_sh2a_or_sh4_up}
+	fsrra fr1                 ;!/* 1111nnnn01111101 fsrra <F_REG_N>    */{"fsrra",{F_REG_N},{HEX_F,REG_N,HEX_7,HEX_D}, arch_sh4_up}
+	fsts FPUL,fr1             ;!/* 1111nnnn00001101 fsts FPUL,<F_REG_N>*/{"fsts",{FPUL_M,F_REG_N},{HEX_F,REG_N,HEX_0,HEX_D}, arch_sh2e_up}
+	fsub fr2,fr1              ;!/* 1111nnnnmmmm0001 fsub <F_REG_M>,<F_REG_N>*/{"fsub",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_1}, arch_sh2e_up}
+	fsub dr4,dr2              ;!/* 1111nnn0mmm00001 fsub <D_REG_M>,<D_REG_N>*/{"fsub",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_1}, arch_sh2a_or_sh4_up}
+	ftrc fr1,FPUL             ;!/* 1111nnnn00111101 ftrc <F_REG_N>,FPUL*/{"ftrc",{F_REG_N,FPUL_M},{HEX_F,REG_N,HEX_3,HEX_D}, arch_sh2e_up}
+	ftrc dr2,FPUL             ;!/* 1111nnnn00111101 ftrc <D_REG_N>,FPUL*/{"ftrc",{D_REG_N,FPUL_M},{HEX_F,REG_N,HEX_3,HEX_D}, arch_sh2a_or_sh4_up}
+	ftrv xmtrx,fv0            ;!/* 1111nn0111111101 ftrv XMTRX_M4,<V_REG_n>*/{"ftrv",{XMTRX_M4,V_REG_N},{HEX_F,REG_N_B01,HEX_F,HEX_D}, arch_sh4_up}
+	mulr R0,r4                ;!/* 0100nnnn10000000 mulr R0,<REG_N> */       {"mulr",{A_R0,A_REG_N},{HEX_4,REG_N,HEX_8,HEX_0}, arch_st40_300_nofpu_or_sh2a_nofpu_up}
+	mulr R1,r4                ;!/* 0100nnnn10010000 mulr R1,<REG_N> */       {"mulr",{A_R1,A_REG_N},{HEX_4,REG_N,HEX_9,HEX_0}, arch_st40_300_nofpu_up}
+	mulr R2,r4                ;!/* 0100nnnn10100000 mulr R2,<REG_N> */       {"mulr",{A_R2,A_REG_N},{HEX_4,REG_N,HEX_A,HEX_0}, arch_st40_300_nofpu_up}
+	mulr R3,r4                ;!/* 0100nnnn10110000 mulr R3,<REG_N> */       {"mulr",{A_R3,A_REG_N},{HEX_4,REG_N,HEX_B,HEX_0}, arch_st40_300_nofpu_up}
Index: binutils/gas/testsuite/gas/sh/arch/sh2a.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/sh2a.s	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/arch/sh2a.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -12,12 +12,12 @@
 	.section .text
 sh2a:
 ! Instructions introduced into sh2a
-	fmov.d xd4,@(2048,r4)     ;!/* 0011nnnnmmmm0001 0011dddddddddddd fmov.d <DX_REG_M>,@(<DISP12>,<REG_N>) */  {"fmov.d",{DX_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_3,DISP1_12BY8}, arch_sh2a_up | arch_op32}
-	fmov.d @(2048,r5),xd2     ;!/* 0011nnnnmmmm0001 0111dddddddddddd fmov.d @(<DISP12>,<REG_M>),<DX_REG_N> */  {"fmov.d",{A_DISP_REG_M,DX_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_7,DISP0_12BY8}, arch_sh2a_up | arch_op32}
-	fmov.s fr2,@(2048,r4)     ;!/* 0011nnnnmmmm0001 0011dddddddddddd fmov.s <F_REG_M>,@(<DISP12>,<REG_N>) */  {"fmov.s",{F_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_3,DISP1_12BY4}, arch_sh2a_up | arch_op32}
-	fmov.s @(2048,r5),fr1     ;!/* 0011nnnnmmmm0001 0111dddddddddddd fmov.s @(<DISP12>,<REG_M>),<F_REG_N> */  {"fmov.s",{A_DISP_REG_M,F_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_7,DISP0_12BY4}, arch_sh2a_up | arch_op32}
+	fmov.d xd4,@(2048,r4)     ;!/* 0011nnnnmmmm0001 0011dddddddddddd fmov.d <DX_REG_M>,@(<DISP12>,<REG_N>) */ {"fmov.d",{DX_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_3,DISP1_12BY8}, arch_sh2a_up | arch_op32}
+	fmov.d @(2048,r5),xd2     ;!/* 0011nnnnmmmm0001 0111dddddddddddd fmov.d @(<DISP12>,<REG_M>),<DX_REG_N> */ {"fmov.d",{A_DISP_REG_M,DX_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_7,DISP0_12BY8}, arch_sh2a_up | arch_op32}
+	fmov.s fr2,@(2048,r4)     ;!/* 0011nnnnmmmm0001 0011dddddddddddd fmov.s <F_REG_M>,@(<DISP12>,<REG_N>) */ {"fmov.s",{F_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_3,DISP1_12BY4}, arch_sh2a_up | arch_op32}
+	fmov.s @(2048,r5),fr1     ;!/* 0011nnnnmmmm0001 0111dddddddddddd fmov.s @(<DISP12>,<REG_M>),<F_REG_N> */ {"fmov.s",{A_DISP_REG_M,F_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_7,DISP0_12BY4}, arch_sh2a_up | arch_op32}
 
-! Instructions inherited from ancestors: sh sh2 sh2a-nofpu sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh2a-or-sh3e sh2a-or-sh4 sh2e
+! Instructions inherited from ancestors: sh sh2 sh2a-nofpu sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh2a-or-sh3e sh2a-or-sh4 sh2e st40-300-nofpu-or-sh2a-nofpu
 	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
 	add r5,r4                 ;!/* 0011nnnnmmmm1100 add <REG_M>,<REG_N> */{"add",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_C}, arch_sh_up}
 	addc r5,r4                ;!/* 0011nnnnmmmm1110 addc <REG_M>,<REG_N>*/{"addc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_E}, arch_sh_up}
@@ -86,8 +86,8 @@ sh2a:
 	mov.b R0,@(8,GBR)         ;!/* 11000000i8*1.... mov.b R0,@(<disp>,GBR)*/{"mov.b",{A_R0,A_DISP_GBR},{HEX_C,HEX_0,IMM1_8}, arch_sh_up}
 	mov.b R0,@r4+             ;!/* 0100nnnn10001011 mov.b R0,@<REG_N>+ */{"mov.b",{A_R0,A_INC_N},{HEX_4,REG_N,HEX_8,HEX_B}, arch_sh2a_nofpu_up}
 	mov.b @-r5,R0             ;!/* 0100nnnn11001011 mov.b @-<REG_M>,R0 */{"mov.b",{A_DEC_M,A_R0},{HEX_4,REG_M,HEX_C,HEX_B}, arch_sh2a_nofpu_up}
-	mov.b r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0000dddddddddddd mov.b <REG_M>,@(<DISP12>,<REG_N>) */  {"mov.b",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_0,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	mov.b @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0100dddddddddddd mov.b @(<DISP12>,<REG_M>),<REG_N> */  {"mov.b",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_4,DISP0_12}, arch_sh2a_nofpu_up | arch_op32}
+	mov.b r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0000dddddddddddd mov.b <REG_M>,@(<DISP12>,<REG_N>) */ {"mov.b",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_0,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	mov.b @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0100dddddddddddd mov.b @(<DISP12>,<REG_M>),<REG_N> */ {"mov.b",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_4,DISP0_12}, arch_sh2a_nofpu_up | arch_op32}
 	mov.l r5,@(8,r4)          ;!/* 0001nnnnmmmmi4*4 mov.l <REG_M>,@(<disp>,<REG_N>)*/{"mov.l",{ A_REG_M,A_DISP_REG_N},{HEX_1,REG_N,REG_M,IMM1_4BY4}, arch_sh_up}
 	mov.l r5,@(R0,r4)         ;!/* 0000nnnnmmmm0110 mov.l <REG_M>,@(R0,<REG_N>)*/{"mov.l",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_6}, arch_sh_up}
 	mov.l r5,@-r4             ;!/* 0010nnnnmmmm0110 mov.l <REG_M>,@-<REG_N>*/{"mov.l",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_6}, arch_sh_up}
@@ -102,8 +102,8 @@ sh2a:
 	mov.l R0,@(8,GBR)         ;!/* 11000010i8*4.... mov.l R0,@(<disp>,GBR)*/{"mov.l",{A_R0,A_DISP_GBR},{HEX_C,HEX_2,IMM1_8BY4}, arch_sh_up}
 	mov.l R0,@r4+             ;!/* 0100nnnn10101011 mov.l R0,@<REG_N>+ */{"mov.l",{A_R0,A_INC_N},{HEX_4,REG_N,HEX_A,HEX_B}, arch_sh2a_nofpu_up}
 	mov.l @-r5,R0             ;!/* 0100nnnn11001011 mov.l @-<REG_M>,R0 */{"mov.l",{A_DEC_M,A_R0},{HEX_4,REG_M,HEX_E,HEX_B}, arch_sh2a_nofpu_up}
-	mov.l r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0010dddddddddddd mov.l <REG_M>,@(<DISP12>,<REG_N>) */  {"mov.l",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_2,DISP1_12BY4}, arch_sh2a_nofpu_up | arch_op32}
-	mov.l @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0110dddddddddddd mov.l @(<DISP12>,<REG_M>),<REG_N> */  {"mov.l",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_6,DISP0_12BY4}, arch_sh2a_nofpu_up | arch_op32}
+	mov.l r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0010dddddddddddd mov.l <REG_M>,@(<DISP12>,<REG_N>) */ {"mov.l",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_2,DISP1_12BY4}, arch_sh2a_nofpu_up | arch_op32}
+	mov.l @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0110dddddddddddd mov.l @(<DISP12>,<REG_M>),<REG_N> */ {"mov.l",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_6,DISP0_12BY4}, arch_sh2a_nofpu_up | arch_op32}
 	mov.w r5,@(R0,r4)         ;!/* 0000nnnnmmmm0101 mov.w <REG_M>,@(R0,<REG_N>)*/{"mov.w",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_5}, arch_sh_up}
 	mov.w r5,@-r4             ;!/* 0010nnnnmmmm0101 mov.w <REG_M>,@-<REG_N>*/{"mov.w",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_5}, arch_sh_up}
 	mov.w r5,@r4              ;!/* 0010nnnnmmmm0001 mov.w <REG_M>,@<REG_N>*/{"mov.w",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_1}, arch_sh_up}
@@ -117,8 +117,8 @@ sh2a:
 	mov.w R0,@(8,GBR)         ;!/* 11000001i8*2.... mov.w R0,@(<disp>,GBR)*/{"mov.w",{A_R0,A_DISP_GBR},{HEX_C,HEX_1,IMM1_8BY2}, arch_sh_up}
 	mov.w R0,@r4+             ;!/* 0100nnnn10011011 mov.w R0,@<REG_N>+ */{"mov.w",{A_R0,A_INC_N},{HEX_4,REG_N,HEX_9,HEX_B}, arch_sh2a_nofpu_up}
 	mov.w @-r5,R0             ;!/* 0100nnnn11011011 mov.w @-<REG_M>,R0 */{"mov.w",{A_DEC_M,A_R0},{HEX_4,REG_M,HEX_D,HEX_B}, arch_sh2a_nofpu_up}
-	mov.w r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0001dddddddddddd mov.w <REG_M>,@(<DISP12>,<REG_N>) */  {"mov.w",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_1,DISP1_12BY2}, arch_sh2a_nofpu_up | arch_op32}
-	mov.w @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0101dddddddddddd mov.w @(<DISP12>,<REG_M>),<REG_N> */  {"mov.w",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_5,DISP0_12BY2}, arch_sh2a_nofpu_up | arch_op32}
+	mov.w r5,@(2048,r4)       ;!/* 0011nnnnmmmm0001 0001dddddddddddd mov.w <REG_M>,@(<DISP12>,<REG_N>) */ {"mov.w",{A_REG_M,A_DISP_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_1,DISP1_12BY2}, arch_sh2a_nofpu_up | arch_op32}
+	mov.w @(2048,r5),r4       ;!/* 0011nnnnmmmm0001 0101dddddddddddd mov.w @(<DISP12>,<REG_M>),<REG_N> */ {"mov.w",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_5,DISP0_12BY2}, arch_sh2a_nofpu_up | arch_op32}
 	.align 2
 	mova @(8,PC),R0 ;!/* 11000111i8p4.... mova @(<disp>,PC),R0*/{"mova",{A_DISP_PC,A_R0},{HEX_C,HEX_7,PCRELIMM_8BY4}, arch_sh_up}
 	movt r4                   ;!/* 0000nnnn00101001 movt <REG_N>        */{"movt",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_9}, arch_sh_up}
@@ -250,13 +250,13 @@ sh2a:
 	ftrc fr1,FPUL             ;!/* 1111nnnn00111101 ftrc <F_REG_N>,FPUL*/{"ftrc",{F_REG_N,FPUL_M},{HEX_F,REG_N,HEX_3,HEX_D}, arch_sh2e_up}
 	ftrc dr2,FPUL             ;!/* 1111nnnn00111101 ftrc <D_REG_N>,FPUL*/{"ftrc",{D_REG_N,FPUL_M},{HEX_F,REG_N,HEX_3,HEX_D}, arch_sh2a_or_sh4_up}
 	bclr #4, r4               ;!/* 10000110nnnn0iii bclr #<imm>, <REG_N> */  {"bclr",{A_IMM, A_REG_N},{HEX_8,HEX_6,REG_N,IMM0_3c}, arch_sh2a_nofpu_up}
-	bclr.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0000dddddddddddd bclr.b #<imm>,@(<DISP12>,<REG_N>) */  {"bclr.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_0,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bclr.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0000dddddddddddd bclr.b #<imm>,@(<DISP12>,<REG_N>) */ {"bclr.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_0,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
 	bld #4, r4                ;!/* 10000111nnnn1iii bld #<imm>, <REG_N> */   {"bld",{A_IMM, A_REG_N},{HEX_8,HEX_7,REG_N,IMM0_3s}, arch_sh2a_nofpu_up}
-	bld.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0011dddddddddddd bld.b #<imm>,@(<DISP12>,<REG_N>) */  {"bld.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_3,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bld.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0011dddddddddddd bld.b #<imm>,@(<DISP12>,<REG_N>) */ {"bld.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_3,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
 	bset #4, r4               ;!/* 10000110nnnn1iii bset #<imm>, <REG_N> */  {"bset",{A_IMM, A_REG_N},{HEX_8,HEX_6,REG_N,IMM0_3s}, arch_sh2a_nofpu_up}
-	bset.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0001dddddddddddd bset.b #<imm>,@(<DISP12>,<REG_N>) */  {"bset.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_1,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bset.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0001dddddddddddd bset.b #<imm>,@(<DISP12>,<REG_N>) */ {"bset.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_1,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
 	bst #4, r4                ;!/* 10000111nnnn0iii bst #<imm>, <REG_N> */   {"bst",{A_IMM, A_REG_N},{HEX_8,HEX_7,REG_N,IMM0_3c}, arch_sh2a_nofpu_up}
-	bst.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0010dddddddddddd bst.b #<imm>,@(<DISP12>,<REG_N>) */  {"bst.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_2,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bst.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0010dddddddddddd bst.b #<imm>,@(<DISP12>,<REG_N>) */ {"bst.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_2,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
 	clips.b r4                ;!/* 0100nnnn10010001 clips.b <REG_N> */       {"clips.b",{A_REG_N},{HEX_4,REG_N,HEX_9,HEX_1}, arch_sh2a_nofpu_up}
 	clips.w r4                ;!/* 0100nnnn10010101 clips.w <REG_N> */       {"clips.w",{A_REG_N},{HEX_4,REG_N,HEX_9,HEX_5}, arch_sh2a_nofpu_up}
 	clipu.b r4                ;!/* 0100nnnn10000001 clipu.b <REG_N> */       {"clipu.b",{A_REG_N},{HEX_4,REG_N,HEX_8,HEX_1}, arch_sh2a_nofpu_up}
@@ -271,19 +271,19 @@ sh2a:
 	movml.l r5,@-R15          ;!/* 0100mmmm11110000 movml.l <REG_M>,@-R15 */ {"movmu.l",{A_REG_M,A_DEC_R15},{HEX_4,REG_M,HEX_F,HEX_0}, arch_sh2a_nofpu_up}
 	movml.l @R15+,r5          ;!/* 0100mmmm11110100 movml.l @R15+,<REG_M> */ {"movmu.l",{A_INC_R15,A_REG_M},{HEX_4,REG_M,HEX_F,HEX_4}, arch_sh2a_nofpu_up}
 	movrt r4                  ;!/* 0000nnnn00111001 movrt <REG_N> */         {"movrt",{A_REG_N},{HEX_0,REG_N,HEX_3,HEX_9}, arch_sh2a_nofpu_up}
-	mulr R0,r4                ;!/* 0100nnnn10000000 mulr R0,<REG_N> */       {"mulr",{A_R0,A_REG_N},{HEX_4,REG_N,HEX_8,HEX_0}, arch_sh2a_nofpu_up}
+	mulr R0,r4                ;!/* 0100nnnn10000000 mulr R0,<REG_N> */       {"mulr",{A_R0,A_REG_N},{HEX_4,REG_N,HEX_8,HEX_0}, arch_st40_300_nofpu_or_sh2a_nofpu_up}
 	nott                      ;!/* 0000000001101000 nott */                  {"nott",{A_END},{HEX_0,HEX_0,HEX_6,HEX_8}, arch_sh2a_nofpu_up}
 	resbank                   ;!/* 0000000001011011 resbank */               {"resbank",{A_END},{HEX_0,HEX_0,HEX_5,HEX_B}, arch_sh2a_nofpu_up}
 	rts/n                     ;!/* 0000000001101011 rts/n */                 {"rts/n",{A_END},{HEX_0,HEX_0,HEX_6,HEX_B}, arch_sh2a_nofpu_up}
 	rtv/n r5                  ;!/* 0000mmmm01111011 rtv/n <REG_M>*/          {"rtv/n",{A_REG_M},{HEX_0,REG_M,HEX_7,HEX_B}, arch_sh2a_nofpu_up}
 	stbank R0,@r4             ;!/* 0100nnnn11100001 stbank R0,@<REG_N>*/     {"stbank",{A_R0,A_IND_N},{HEX_4,REG_N,HEX_E,HEX_1}, arch_sh2a_nofpu_up}
-	band.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0100dddddddddddd band.b #<imm>,@(<DISP12>,<REG_N>) */  {"band.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_4,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	bandnot.b #4,@(2048,r4)   ;!/* 0011nnnn0iii1001 1100dddddddddddd bandnot.b #<imm>,@(<DISP12>,<REG_N>) */  {"bandnot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_C,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	bldnot.b #4,@(2048,r4)    ;!/* 0011nnnn0iii1001 1011dddddddddddd bldnot.b #<imm>,@(<DISP12>,<REG_N>) */  {"bldnot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_B,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	bor.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0101dddddddddddd bor.b #<imm>,@(<DISP12>,<REG_N>) */  {"bor.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_5,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	bornot.b #4,@(2048,r4)    ;!/* 0011nnnn0iii1001 1101dddddddddddd bornot.b #<imm>,@(<DISP12>,<REG_N>) */  {"bornot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_D,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	bxor.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0110dddddddddddd bxor.b #<imm>,@(<DISP12>,<REG_N>) */  {"bxor.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_6,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
-	movi20 #4,r4              ;!/* 0000nnnniiii0000 iiiiiiiiiiiiiiii movi20 #<imm>,<REG_N> */  {"movi20",{A_IMM,A_REG_N},{HEX_0,REG_N,IMM0_20_4,HEX_0,IMM0_20}, arch_sh2a_nofpu_up | arch_op32}
-	movi20s #1024,r4          ;!/* 0000nnnniiii0001 iiiiiiiiiiiiiiii movi20s #<imm>,<REG_N> */  {"movi20s",{A_IMM,A_REG_N},{HEX_0,REG_N,IMM0_20_4,HEX_1,IMM0_20BY8}, arch_sh2a_nofpu_up | arch_op32}
-	movu.b @(2048,r5),r4      ;!/* 0011nnnnmmmm0001 1000dddddddddddd movu.b @(<DISP12>,<REG_M>),<REG_N> */  {"movu.b",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_8,DISP0_12}, arch_sh2a_nofpu_up | arch_op32}
-	movu.w @(2048,r5),r4      ;!/* 0011nnnnmmmm0001 1001dddddddddddd movu.w @(<DISP12>,<REG_M>),<REG_N> */  {"movu.w",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_9,DISP0_12BY2}, arch_sh2a_nofpu_up | arch_op32}
+	band.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0100dddddddddddd band.b #<imm>,@(<DISP12>,<REG_N>) */ {"band.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_4,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bandnot.b #4,@(2048,r4)   ;!/* 0011nnnn0iii1001 1100dddddddddddd bandnot.b #<imm>,@(<DISP12>,<REG_N>) */ {"bandnot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_C,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bldnot.b #4,@(2048,r4)    ;!/* 0011nnnn0iii1001 1011dddddddddddd bldnot.b #<imm>,@(<DISP12>,<REG_N>) */ {"bldnot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_B,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bor.b #4,@(2048,r4)       ;!/* 0011nnnn0iii1001 0101dddddddddddd bor.b #<imm>,@(<DISP12>,<REG_N>) */ {"bor.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_5,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bornot.b #4,@(2048,r4)    ;!/* 0011nnnn0iii1001 1101dddddddddddd bornot.b #<imm>,@(<DISP12>,<REG_N>) */ {"bornot.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_D,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	bxor.b #4,@(2048,r4)      ;!/* 0011nnnn0iii1001 0110dddddddddddd bxor.b #<imm>,@(<DISP12>,<REG_N>) */ {"bxor.b",{A_IMM,A_DISP_REG_N},{HEX_3,REG_N,IMM0_3Uc,HEX_9,HEX_6,DISP1_12}, arch_sh2a_nofpu_up | arch_op32}
+	movi20 #4,r4              ;!/* 0000nnnniiii0000 iiiiiiiiiiiiiiii movi20 #<imm>,<REG_N> */ {"movi20",{A_IMM,A_REG_N},{HEX_0,REG_N,IMM0_20_4,HEX_0,IMM0_20}, arch_sh2a_nofpu_up | arch_op32}
+	movi20s #1024,r4          ;!/* 0000nnnniiii0001 iiiiiiiiiiiiiiii movi20s #<imm>,<REG_N> */ {"movi20s",{A_IMM,A_REG_N},{HEX_0,REG_N,IMM0_20_4,HEX_1,IMM0_20BY8}, arch_sh2a_nofpu_up | arch_op32}
+	movu.b @(2048,r5),r4      ;!/* 0011nnnnmmmm0001 1000dddddddddddd movu.b @(<DISP12>,<REG_M>),<REG_N> */ {"movu.b",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_8,DISP0_12}, arch_sh2a_nofpu_up | arch_op32}
+	movu.w @(2048,r5),r4      ;!/* 0011nnnnmmmm0001 1001dddddddddddd movu.w @(<DISP12>,<REG_M>),<REG_N> */ {"movu.w",{A_DISP_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_1,HEX_9,DISP0_12BY2}, arch_sh2a_nofpu_up | arch_op32}
Index: binutils/gas/testsuite/gas/sh/arch/sh-dsp.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/sh-dsp.s	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/arch/sh-dsp.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -85,39 +85,39 @@ sh_dsp:
 	movy.w a1,@r6+            ;!/* *n*m*1**10 movy.w <DSP_REG_M>,@<REG_N>+ */   {"movy.w",{DSP_REG_A_M,AY_INC_N},{PPI,MOVY,HEX_A}, arch_sh_dsp_up}
 	movy.w a1,@r6+r9          ;!/* *n*m*1**11 movy.w <DSP_REG_M>,@<REG_N>+r9 */ {"movy.w",{DSP_REG_A_M,AY_PMOD_N},{PPI,MOVY,HEX_B}, arch_sh_dsp_up}
 	pmuls x0,y0,m0            ;!/* 01aaeeffxxyyggnn pmuls Se,Sf,Dg */ {"pmuls",{DSP_REG_E,DSP_REG_F,DSP_REG_G},{PPI,PMUL}, arch_sh_dsp_up}
-	psubc x1,y0,m0            ;!/* 10100000xxyynnnn psubc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"psubc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_0}, arch_sh_dsp_up}
-	paddc x1,y0,m0            ;!/* 10110000xxyynnnn paddc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"paddc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_0}, arch_sh_dsp_up}
-	pcmp x1,y0                ;!/* 10000100xxyynnnn pcmp <DSP_REG_X>,<DSP_REG_Y> */  {"pcmp", {DSP_REG_X,DSP_REG_Y},{PPI,PPI3,HEX_8,HEX_4}, arch_sh_dsp_up}
-	pwsb x1,y0,m0             ;!/* 10100100xxyynnnn pwsb <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pwsb", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_4}, arch_sh_dsp_up}
-	pwad x1,y0,m0             ;!/* 10110100xxyynnnn pwad <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pwad", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_4}, arch_sh_dsp_up}
-	pabs x1,m0                ;!/* 10001000xxyynnnn pabs <DSP_REG_X>,<DSP_REG_N> */  {"pabs", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_8,HEX_8}, arch_sh_dsp_up}
-	pabs y0,m0                ;!/* 10101000xxyynnnn pabs <DSP_REG_Y>,<DSP_REG_N> */  {"pabs", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_A,HEX_8}, arch_sh_dsp_up}
-	prnd x1,m0                ;!/* 10011000xxyynnnn prnd <DSP_REG_X>,<DSP_REG_N> */  {"prnd", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_9,HEX_8}, arch_sh_dsp_up}
-	prnd y0,m0                ;!/* 10111000xxyynnnn prnd <DSP_REG_Y>,<DSP_REG_N> */  {"prnd", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_B,HEX_8}, arch_sh_dsp_up}
-	dct pshl x1,y0,m0         ;!/* 10000001xxyynnnn pshl <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pshl", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_1}, arch_sh_dsp_up}
+	psubc x1,y0,m0            ;!/* 10100000xxyynnnn psubc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"psubc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_0}, arch_sh_dsp_up}
+	paddc x1,y0,m0            ;!/* 10110000xxyynnnn paddc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"paddc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_0}, arch_sh_dsp_up}
+	pcmp x1,y0                ;!/* 10000100xxyynnnn pcmp <DSP_REG_X>,<DSP_REG_Y> */ {"pcmp", {DSP_REG_X,DSP_REG_Y},{PPI,PPI3,HEX_8,HEX_4}, arch_sh_dsp_up}
+	pwsb x1,y0,m0             ;!/* 10100100xxyynnnn pwsb <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pwsb", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_4}, arch_sh_dsp_up}
+	pwad x1,y0,m0             ;!/* 10110100xxyynnnn pwad <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pwad", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_4}, arch_sh_dsp_up}
+	pabs x1,m0                ;!/* 10001000xxyynnnn pabs <DSP_REG_X>,<DSP_REG_N> */ {"pabs", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_8,HEX_8}, arch_sh_dsp_up}
+	pabs y0,m0                ;!/* 10101000xxyynnnn pabs <DSP_REG_Y>,<DSP_REG_N> */ {"pabs", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_A,HEX_8}, arch_sh_dsp_up}
+	prnd x1,m0                ;!/* 10011000xxyynnnn prnd <DSP_REG_X>,<DSP_REG_N> */ {"prnd", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_9,HEX_8}, arch_sh_dsp_up}
+	prnd y0,m0                ;!/* 10111000xxyynnnn prnd <DSP_REG_Y>,<DSP_REG_N> */ {"prnd", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_B,HEX_8}, arch_sh_dsp_up}
+	dct pshl x1,y0,m0         ;!/* 10000001xxyynnnn pshl <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pshl", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_1}, arch_sh_dsp_up}
 	pshl #4,m0                ;!/* 00000iiiiiiinnnn pshl #<imm>,<DSP_REG_N> */ {"pshl",{A_IMM,DSP_REG_N},{PPI,PSH,HEX_0}, arch_sh_dsp_up}
-	dct psha x1,y0,m0         ;!/* 10010001xxyynnnn psha <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"psha", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_1}, arch_sh_dsp_up}
+	dct psha x1,y0,m0         ;!/* 10010001xxyynnnn psha <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"psha", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_1}, arch_sh_dsp_up}
 	psha #4,m0                ;!/* 00010iiiiiiinnnn psha #<imm>,<DSP_REG_N> */ {"psha",{A_IMM,DSP_REG_N},{PPI,PSH,HEX_1}, arch_sh_dsp_up}
-	dct psub x1,y0,m0         ;!/* 10100001xxyynnnn psub <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"psub", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_1}, arch_sh_dsp_up}
-	dct padd x1,y0,m0         ;!/* 10110001xxyynnnn padd <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"padd", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_1}, arch_sh_dsp_up}
-	dct pand x1,y0,m0         ;!/* 10010101xxyynnnn pand <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pand", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_5}, arch_sh_dsp_up}
-	dct pxor x1,y0,m0         ;!/* 10100101xxyynnnn pxor <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pxor", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_5}, arch_sh_dsp_up}
-	dct por  x1,y0,m0         ;!/* 10110101xxyynnnn por  <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"por",  {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_5}, arch_sh_dsp_up}
-	dct pdec x1,m0            ;!/* 10001001xxyynnnn pdec <DSP_REG_X>,<DSP_REG_N> */  {"pdec", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_9}, arch_sh_dsp_up}
-	dct pdec y0,m0            ;!/* 10101001xxyynnnn pdec <DSP_REG_Y>,<DSP_REG_N> */  {"pdec", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_9}, arch_sh_dsp_up}
-	dct pinc x1,m0            ;!/* 10011001xx00nnnn pinc <DSP_REG_X>,<DSP_REG_N> */  {"pinc", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_9,HEX_XX00}, arch_sh_dsp_up}
-	dct pinc y0,m0            ;!/* 1011100100yynnnn pinc <DSP_REG_Y>,<DSP_REG_N> */  {"pinc", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_9,HEX_00YY}, arch_sh_dsp_up}
-	dct pclr m0               ;!/* 10001101xxyynnnn pclr <DSP_REG_N> */  {"pclr", {DSP_REG_N},{PPI,PPIC,HEX_8,HEX_D}, arch_sh_dsp_up}
-	dct pdmsb x1,m0           ;!/* 10011101xx00nnnn pdmsb <DSP_REG_X>,<DSP_REG_N> */  {"pdmsb", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_D,HEX_XX00}, arch_sh_dsp_up}
-	dct pdmsb y0,m0           ;!/* 1011110100yynnnn pdmsb <DSP_REG_Y>,<DSP_REG_N> */  {"pdmsb", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_D,HEX_00YY}, arch_sh_dsp_up}
-	dct pneg  x1,m0           ;!/* 11001001xxyynnnn pneg  <DSP_REG_X>,<DSP_REG_N> */  {"pneg",  {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_9}, arch_sh_dsp_up}
-	dct pneg  y0,m0           ;!/* 11101001xxyynnnn pneg  <DSP_REG_Y>,<DSP_REG_N> */  {"pneg",  {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_E,HEX_9}, arch_sh_dsp_up}
-	dct pcopy x1,m0           ;!/* 11011001xxyynnnn pcopy <DSP_REG_X>,<DSP_REG_N> */  {"pcopy", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_9}, arch_sh_dsp_up}
-	dct pcopy y0,m0           ;!/* 11111001xxyynnnn pcopy <DSP_REG_Y>,<DSP_REG_N> */  {"pcopy", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_F,HEX_9}, arch_sh_dsp_up}
-	dct psts MACH,m0          ;!/* 11001101xxyynnnn psts MACH,<DSP_REG_N> */  {"psts", {A_MACH,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_D}, arch_sh_dsp_up}
-	dct psts MACL,m0          ;!/* 11011101xxyynnnn psts MACL,<DSP_REG_N> */  {"psts", {A_MACL,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_D}, arch_sh_dsp_up}
-	dct plds m0,MACH          ;!/* 11101101xxyynnnn plds <DSP_REG_N>,MACH */  {"plds", {DSP_REG_N,A_MACH},{PPI,PPIC,HEX_E,HEX_D}, arch_sh_dsp_up}
-	dct plds m0,MACL          ;!/* 11111101xxyynnnn plds <DSP_REG_N>,MACL */  {"plds", {DSP_REG_N,A_MACL},{PPI,PPIC,HEX_F,HEX_D}, arch_sh_dsp_up}
+	dct psub x1,y0,m0         ;!/* 10100001xxyynnnn psub <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"psub", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_1}, arch_sh_dsp_up}
+	dct padd x1,y0,m0         ;!/* 10110001xxyynnnn padd <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"padd", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_1}, arch_sh_dsp_up}
+	dct pand x1,y0,m0         ;!/* 10010101xxyynnnn pand <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pand", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_5}, arch_sh_dsp_up}
+	dct pxor x1,y0,m0         ;!/* 10100101xxyynnnn pxor <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pxor", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_5}, arch_sh_dsp_up}
+	dct por  x1,y0,m0         ;!/* 10110101xxyynnnn por  <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"por",  {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_5}, arch_sh_dsp_up}
+	dct pdec x1,m0            ;!/* 10001001xxyynnnn pdec <DSP_REG_X>,<DSP_REG_N> */ {"pdec", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_9}, arch_sh_dsp_up}
+	dct pdec y0,m0            ;!/* 10101001xxyynnnn pdec <DSP_REG_Y>,<DSP_REG_N> */ {"pdec", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_9}, arch_sh_dsp_up}
+	dct pinc x1,m0            ;!/* 10011001xx00nnnn pinc <DSP_REG_X>,<DSP_REG_N> */ {"pinc", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_9,HEX_XX00}, arch_sh_dsp_up}
+	dct pinc y0,m0            ;!/* 1011100100yynnnn pinc <DSP_REG_Y>,<DSP_REG_N> */ {"pinc", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_9,HEX_00YY}, arch_sh_dsp_up}
+	dct pclr m0               ;!/* 10001101xxyynnnn pclr <DSP_REG_N> */ {"pclr", {DSP_REG_N},{PPI,PPIC,HEX_8,HEX_D}, arch_sh_dsp_up}
+	dct pdmsb x1,m0           ;!/* 10011101xx00nnnn pdmsb <DSP_REG_X>,<DSP_REG_N> */ {"pdmsb", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_D,HEX_XX00}, arch_sh_dsp_up}
+	dct pdmsb y0,m0           ;!/* 1011110100yynnnn pdmsb <DSP_REG_Y>,<DSP_REG_N> */ {"pdmsb", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_D,HEX_00YY}, arch_sh_dsp_up}
+	dct pneg  x1,m0           ;!/* 11001001xxyynnnn pneg  <DSP_REG_X>,<DSP_REG_N> */ {"pneg",  {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_9}, arch_sh_dsp_up}
+	dct pneg  y0,m0           ;!/* 11101001xxyynnnn pneg  <DSP_REG_Y>,<DSP_REG_N> */ {"pneg",  {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_E,HEX_9}, arch_sh_dsp_up}
+	dct pcopy x1,m0           ;!/* 11011001xxyynnnn pcopy <DSP_REG_X>,<DSP_REG_N> */ {"pcopy", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_9}, arch_sh_dsp_up}
+	dct pcopy y0,m0           ;!/* 11111001xxyynnnn pcopy <DSP_REG_Y>,<DSP_REG_N> */ {"pcopy", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_F,HEX_9}, arch_sh_dsp_up}
+	dct psts MACH,m0          ;!/* 11001101xxyynnnn psts MACH,<DSP_REG_N> */ {"psts", {A_MACH,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_D}, arch_sh_dsp_up}
+	dct psts MACL,m0          ;!/* 11011101xxyynnnn psts MACL,<DSP_REG_N> */ {"psts", {A_MACL,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_D}, arch_sh_dsp_up}
+	dct plds m0,MACH          ;!/* 11101101xxyynnnn plds <DSP_REG_N>,MACH */ {"plds", {DSP_REG_N,A_MACH},{PPI,PPIC,HEX_E,HEX_D}, arch_sh_dsp_up}
+	dct plds m0,MACL          ;!/* 11111101xxyynnnn plds <DSP_REG_N>,MACL */ {"plds", {DSP_REG_N,A_MACL},{PPI,PPIC,HEX_F,HEX_D}, arch_sh_dsp_up}
 
 ! Instructions inherited from ancestors: sh sh2
 	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
Index: binutils/gas/testsuite/gas/sh/arch/sh4al-dsp.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/sh4al-dsp.s	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/arch/sh4al-dsp.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -41,15 +41,15 @@ sh4al_dsp:
 	movy.l a0,@r3             ;!/* nnmm110001 movy.l <DSP_REG_AY>,@<REG_Ayx> */ {"movy.l",{DSP_REG_AY,AYX_IND_N},{PPI,MOVY_NOPX,HEX_3,HEX_1}, arch_sh4al_dsp_up}
 	movy.l a0,@r3+            ;!/* nnmm110010 movy.l <DSP_REG_AY>,@<REG_Ayx>+ */{"movy.l",{DSP_REG_AY,AYX_INC_N},{PPI,MOVY_NOPX,HEX_3,HEX_2}, arch_sh4al_dsp_up}
 	movy.l a0,@r3+r9          ;!/* nnmm110011 movy.l <DSP_REG_AY>,@<REG_Ayx>+r9 */{"movy.l",{DSP_REG_AY,AYX_PMOD_N},{PPI,MOVY_NOPX,HEX_3,HEX_3}, arch_sh4al_dsp_up}
-	dct pabs x1,m0            ;!/* 1000100!xx01nnnn pabs <DSP_REG_X>,<DSP_REG_N> */  {"pabs", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_9,HEX_1}, arch_sh4al_dsp_up}
-	dct pabs y0,m0            ;!/* 1010100!01yynnnn pabs <DSP_REG_Y>,<DSP_REG_N> */  {"pabs", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_9,HEX_4}, arch_sh4al_dsp_up}
-	dct prnd x1,m0            ;!/* 1001100!xx01nnnn prnd <DSP_REG_X>,<DSP_REG_N> */  {"prnd", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_9,HEX_1}, arch_sh4al_dsp_up}
-	dct prnd y0,m0            ;!/* 1011100!01yynnnn prnd <DSP_REG_Y>,<DSP_REG_N> */  {"prnd", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_9,HEX_4}, arch_sh4al_dsp_up}
-	dct psub y0,x1,m0         ;!/* 10000101xxyynnnn psub <DSP_REG_Y>,<DSP_REG_X>,<DSP_REG_N> */  {"psub", {DSP_REG_Y,DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_5}, arch_sh4al_dsp_up}
-	dct pswap x1,m0           ;!/* 10011101xx01zzzz pswap <DSP_REG_X>,<DSP_REG_N> */  {"pswap", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_D,HEX_1}, arch_sh4al_dsp_up}
-	dct pswap y0,m0           ;!/* 1011110101yyzzzz pswap <DSP_REG_Y>,<DSP_REG_N> */  {"pswap", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_D,HEX_4}, arch_sh4al_dsp_up}
+	dct pabs x1,m0            ;!/* 1000100!xx01nnnn pabs <DSP_REG_X>,<DSP_REG_N> */ {"pabs", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_9,HEX_1}, arch_sh4al_dsp_up}
+	dct pabs y0,m0            ;!/* 1010100!01yynnnn pabs <DSP_REG_Y>,<DSP_REG_N> */ {"pabs", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_9,HEX_4}, arch_sh4al_dsp_up}
+	dct prnd x1,m0            ;!/* 1001100!xx01nnnn prnd <DSP_REG_X>,<DSP_REG_N> */ {"prnd", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_9,HEX_1}, arch_sh4al_dsp_up}
+	dct prnd y0,m0            ;!/* 1011100!01yynnnn prnd <DSP_REG_Y>,<DSP_REG_N> */ {"prnd", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_9,HEX_4}, arch_sh4al_dsp_up}
+	dct psub y0,x1,m0         ;!/* 10000101xxyynnnn psub <DSP_REG_Y>,<DSP_REG_X>,<DSP_REG_N> */ {"psub", {DSP_REG_Y,DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_5}, arch_sh4al_dsp_up}
+	dct pswap x1,m0           ;!/* 10011101xx01zzzz pswap <DSP_REG_X>,<DSP_REG_N> */ {"pswap", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_D,HEX_1}, arch_sh4al_dsp_up}
+	dct pswap y0,m0           ;!/* 1011110101yyzzzz pswap <DSP_REG_Y>,<DSP_REG_N> */ {"pswap", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_D,HEX_4}, arch_sh4al_dsp_up}
 
-! Instructions inherited from ancestors: sh sh-dsp sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh3 sh3-dsp sh3-nommu sh4-nofpu sh4-nommu-nofpu sh4a-nofpu
+! Instructions inherited from ancestors: sh sh-dsp sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh3 sh3-dsp sh3-nommu sh4-nofpu sh4-nommu-nofpu sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu
 	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
 	add r5,r4                 ;!/* 0011nnnnmmmm1100 add <REG_M>,<REG_N> */{"add",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_C}, arch_sh_up}
 	addc r5,r4                ;!/* 0011nnnnmmmm1110 addc <REG_M>,<REG_N>*/{"addc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_E}, arch_sh_up}
@@ -84,7 +84,7 @@ sh4al_dsp:
 	exts.w r5,r4              ;!/* 0110nnnnmmmm1111 exts.w <REG_M>,<REG_N>*/{"exts.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_F}, arch_sh_up}
 	extu.b r5,r4              ;!/* 0110nnnnmmmm1100 extu.b <REG_M>,<REG_N>*/{"extu.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_C}, arch_sh_up}
 	extu.w r5,r4              ;!/* 0110nnnnmmmm1101 extu.w <REG_M>,<REG_N>*/{"extu.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_D}, arch_sh_up}
-	icbi @r4                  ;!/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_sh4a_nofpu_up}
+	icbi @r4                  ;!/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
 	jmp @r4                   ;!/* 0100nnnn00101011 jmp @<REG_N>        */{"jmp",{A_IND_N},{HEX_4,REG_N,HEX_2,HEX_B}, arch_sh_up}
 	jsr @r4                   ;!/* 0100nnnn00001011 jsr @<REG_N>        */{"jsr",{A_IND_N},{HEX_4,REG_N,HEX_0,HEX_B}, arch_sh_up}
 	ldc r4,SR                 ;!/* 0100nnnn00001110 ldc <REG_N>,SR      */{"ldc",{A_REG_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_E}, arch_sh_up}
@@ -261,7 +261,7 @@ sh4al_dsp:
 	subv r5,r4                ;!/* 0011nnnnmmmm1011 subv <REG_M>,<REG_N>*/{"subv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_B}, arch_sh_up}
 	swap.b r5,r4              ;!/* 0110nnnnmmmm1000 swap.b <REG_M>,<REG_N>*/{"swap.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_8}, arch_sh_up}
 	swap.w r5,r4              ;!/* 0110nnnnmmmm1001 swap.w <REG_M>,<REG_N>*/{"swap.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_9}, arch_sh_up}
-	synco                     ;!/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_sh4a_nofpu_up}
+	synco                     ;!/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
 	tas.b @r4                 ;!/* 0100nnnn00011011 tas.b @<REG_N>      */{"tas.b",{A_IND_N},{HEX_4,REG_N,HEX_1,HEX_B}, arch_sh_up}
 	trapa #4                  ;!/* 11000011i8*1.... trapa #<imm>        */{"trapa",{A_IMM},{HEX_C,HEX_3,IMM0_8}, arch_sh_up}
 	tst #4,R0                 ;!/* 11001000i8*1.... tst #<imm>,R0       */{"tst",{A_IMM,A_R0},{HEX_C,HEX_8,IMM0_8}, arch_sh_up}
@@ -308,36 +308,36 @@ sh4al_dsp:
 	movy.w a1,@r6+            ;!/* *n*m*1**10 movy.w <DSP_REG_M>,@<REG_N>+ */   {"movy.w",{DSP_REG_A_M,AY_INC_N},{PPI,MOVY,HEX_A}, arch_sh_dsp_up}
 	movy.w a1,@r6+r9          ;!/* *n*m*1**11 movy.w <DSP_REG_M>,@<REG_N>+r9 */ {"movy.w",{DSP_REG_A_M,AY_PMOD_N},{PPI,MOVY,HEX_B}, arch_sh_dsp_up}
 	pmuls x0,y0,m0            ;!/* 01aaeeffxxyyggnn pmuls Se,Sf,Dg */ {"pmuls",{DSP_REG_E,DSP_REG_F,DSP_REG_G},{PPI,PMUL}, arch_sh_dsp_up}
-	psubc x1,y0,m0            ;!/* 10100000xxyynnnn psubc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"psubc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_0}, arch_sh_dsp_up}
-	paddc x1,y0,m0            ;!/* 10110000xxyynnnn paddc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"paddc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_0}, arch_sh_dsp_up}
-	pcmp x1,y0                ;!/* 10000100xxyynnnn pcmp <DSP_REG_X>,<DSP_REG_Y> */  {"pcmp", {DSP_REG_X,DSP_REG_Y},{PPI,PPI3,HEX_8,HEX_4}, arch_sh_dsp_up}
-	pwsb x1,y0,m0             ;!/* 10100100xxyynnnn pwsb <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pwsb", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_4}, arch_sh_dsp_up}
-	pwad x1,y0,m0             ;!/* 10110100xxyynnnn pwad <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pwad", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_4}, arch_sh_dsp_up}
-	pabs x1,m0                ;!/* 10001000xxyynnnn pabs <DSP_REG_X>,<DSP_REG_N> */  {"pabs", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_8,HEX_8}, arch_sh_dsp_up}
-	pabs y0,m0                ;!/* 10101000xxyynnnn pabs <DSP_REG_Y>,<DSP_REG_N> */  {"pabs", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_A,HEX_8}, arch_sh_dsp_up}
-	prnd x1,m0                ;!/* 10011000xxyynnnn prnd <DSP_REG_X>,<DSP_REG_N> */  {"prnd", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_9,HEX_8}, arch_sh_dsp_up}
-	prnd y0,m0                ;!/* 10111000xxyynnnn prnd <DSP_REG_Y>,<DSP_REG_N> */  {"prnd", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_B,HEX_8}, arch_sh_dsp_up}
-	dct pshl x1,y0,m0         ;!/* 10000001xxyynnnn pshl <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pshl", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_1}, arch_sh_dsp_up}
+	psubc x1,y0,m0            ;!/* 10100000xxyynnnn psubc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"psubc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_0}, arch_sh_dsp_up}
+	paddc x1,y0,m0            ;!/* 10110000xxyynnnn paddc <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"paddc",{DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_0}, arch_sh_dsp_up}
+	pcmp x1,y0                ;!/* 10000100xxyynnnn pcmp <DSP_REG_X>,<DSP_REG_Y> */ {"pcmp", {DSP_REG_X,DSP_REG_Y},{PPI,PPI3,HEX_8,HEX_4}, arch_sh_dsp_up}
+	pwsb x1,y0,m0             ;!/* 10100100xxyynnnn pwsb <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pwsb", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_A,HEX_4}, arch_sh_dsp_up}
+	pwad x1,y0,m0             ;!/* 10110100xxyynnnn pwad <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pwad", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPI3,HEX_B,HEX_4}, arch_sh_dsp_up}
+	pabs x1,m0                ;!/* 10001000xxyynnnn pabs <DSP_REG_X>,<DSP_REG_N> */ {"pabs", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_8,HEX_8}, arch_sh_dsp_up}
+	pabs y0,m0                ;!/* 10101000xxyynnnn pabs <DSP_REG_Y>,<DSP_REG_N> */ {"pabs", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_A,HEX_8}, arch_sh_dsp_up}
+	prnd x1,m0                ;!/* 10011000xxyynnnn prnd <DSP_REG_X>,<DSP_REG_N> */ {"prnd", {DSP_REG_X,DSP_REG_N},{PPI,PPI3NC,HEX_9,HEX_8}, arch_sh_dsp_up}
+	prnd y0,m0                ;!/* 10111000xxyynnnn prnd <DSP_REG_Y>,<DSP_REG_N> */ {"prnd", {DSP_REG_Y,DSP_REG_N},{PPI,PPI3NC,HEX_B,HEX_8}, arch_sh_dsp_up}
+	dct pshl x1,y0,m0         ;!/* 10000001xxyynnnn pshl <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pshl", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_1}, arch_sh_dsp_up}
 	pshl #4,m0                ;!/* 00000iiiiiiinnnn pshl #<imm>,<DSP_REG_N> */ {"pshl",{A_IMM,DSP_REG_N},{PPI,PSH,HEX_0}, arch_sh_dsp_up}
-	dct psha x1,y0,m0         ;!/* 10010001xxyynnnn psha <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"psha", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_1}, arch_sh_dsp_up}
+	dct psha x1,y0,m0         ;!/* 10010001xxyynnnn psha <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"psha", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_1}, arch_sh_dsp_up}
 	psha #4,m0                ;!/* 00010iiiiiiinnnn psha #<imm>,<DSP_REG_N> */ {"psha",{A_IMM,DSP_REG_N},{PPI,PSH,HEX_1}, arch_sh_dsp_up}
-	dct psub x1,y0,m0         ;!/* 10100001xxyynnnn psub <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"psub", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_1}, arch_sh_dsp_up}
-	dct padd x1,y0,m0         ;!/* 10110001xxyynnnn padd <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"padd", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_1}, arch_sh_dsp_up}
-	dct pand x1,y0,m0         ;!/* 10010101xxyynnnn pand <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pand", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_5}, arch_sh_dsp_up}
-	dct pxor x1,y0,m0         ;!/* 10100101xxyynnnn pxor <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"pxor", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_5}, arch_sh_dsp_up}
-	dct por  x1,y0,m0         ;!/* 10110101xxyynnnn por  <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */  {"por",  {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_5}, arch_sh_dsp_up}
-	dct pdec x1,m0            ;!/* 10001001xxyynnnn pdec <DSP_REG_X>,<DSP_REG_N> */  {"pdec", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_9}, arch_sh_dsp_up}
-	dct pdec y0,m0            ;!/* 10101001xxyynnnn pdec <DSP_REG_Y>,<DSP_REG_N> */  {"pdec", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_9}, arch_sh_dsp_up}
-	dct pinc x1,m0            ;!/* 10011001xx00nnnn pinc <DSP_REG_X>,<DSP_REG_N> */  {"pinc", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_9,HEX_XX00}, arch_sh_dsp_up}
-	dct pinc y0,m0            ;!/* 1011100100yynnnn pinc <DSP_REG_Y>,<DSP_REG_N> */  {"pinc", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_9,HEX_00YY}, arch_sh_dsp_up}
-	dct pclr m0               ;!/* 10001101xxyynnnn pclr <DSP_REG_N> */  {"pclr", {DSP_REG_N},{PPI,PPIC,HEX_8,HEX_D}, arch_sh_dsp_up}
-	dct pdmsb x1,m0           ;!/* 10011101xx00nnnn pdmsb <DSP_REG_X>,<DSP_REG_N> */  {"pdmsb", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_D,HEX_XX00}, arch_sh_dsp_up}
-	dct pdmsb y0,m0           ;!/* 1011110100yynnnn pdmsb <DSP_REG_Y>,<DSP_REG_N> */  {"pdmsb", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_D,HEX_00YY}, arch_sh_dsp_up}
-	dct pneg  x1,m0           ;!/* 11001001xxyynnnn pneg  <DSP_REG_X>,<DSP_REG_N> */  {"pneg",  {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_9}, arch_sh_dsp_up}
-	dct pneg  y0,m0           ;!/* 11101001xxyynnnn pneg  <DSP_REG_Y>,<DSP_REG_N> */  {"pneg",  {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_E,HEX_9}, arch_sh_dsp_up}
-	dct pcopy x1,m0           ;!/* 11011001xxyynnnn pcopy <DSP_REG_X>,<DSP_REG_N> */  {"pcopy", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_9}, arch_sh_dsp_up}
-	dct pcopy y0,m0           ;!/* 11111001xxyynnnn pcopy <DSP_REG_Y>,<DSP_REG_N> */  {"pcopy", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_F,HEX_9}, arch_sh_dsp_up}
-	dct psts MACH,m0          ;!/* 11001101xxyynnnn psts MACH,<DSP_REG_N> */  {"psts", {A_MACH,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_D}, arch_sh_dsp_up}
-	dct psts MACL,m0          ;!/* 11011101xxyynnnn psts MACL,<DSP_REG_N> */  {"psts", {A_MACL,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_D}, arch_sh_dsp_up}
-	dct plds m0,MACH          ;!/* 11101101xxyynnnn plds <DSP_REG_N>,MACH */  {"plds", {DSP_REG_N,A_MACH},{PPI,PPIC,HEX_E,HEX_D}, arch_sh_dsp_up}
-	dct plds m0,MACL          ;!/* 11111101xxyynnnn plds <DSP_REG_N>,MACL */  {"plds", {DSP_REG_N,A_MACL},{PPI,PPIC,HEX_F,HEX_D}, arch_sh_dsp_up}
+	dct psub x1,y0,m0         ;!/* 10100001xxyynnnn psub <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"psub", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_1}, arch_sh_dsp_up}
+	dct padd x1,y0,m0         ;!/* 10110001xxyynnnn padd <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"padd", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_1}, arch_sh_dsp_up}
+	dct pand x1,y0,m0         ;!/* 10010101xxyynnnn pand <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pand", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_5}, arch_sh_dsp_up}
+	dct pxor x1,y0,m0         ;!/* 10100101xxyynnnn pxor <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"pxor", {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_5}, arch_sh_dsp_up}
+	dct por  x1,y0,m0         ;!/* 10110101xxyynnnn por  <DSP_REG_X>,<DSP_REG_Y>,<DSP_REG_N> */ {"por",  {DSP_REG_X,DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_5}, arch_sh_dsp_up}
+	dct pdec x1,m0            ;!/* 10001001xxyynnnn pdec <DSP_REG_X>,<DSP_REG_N> */ {"pdec", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_8,HEX_9}, arch_sh_dsp_up}
+	dct pdec y0,m0            ;!/* 10101001xxyynnnn pdec <DSP_REG_Y>,<DSP_REG_N> */ {"pdec", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_A,HEX_9}, arch_sh_dsp_up}
+	dct pinc x1,m0            ;!/* 10011001xx00nnnn pinc <DSP_REG_X>,<DSP_REG_N> */ {"pinc", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_9,HEX_XX00}, arch_sh_dsp_up}
+	dct pinc y0,m0            ;!/* 1011100100yynnnn pinc <DSP_REG_Y>,<DSP_REG_N> */ {"pinc", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_9,HEX_00YY}, arch_sh_dsp_up}
+	dct pclr m0               ;!/* 10001101xxyynnnn pclr <DSP_REG_N> */ {"pclr", {DSP_REG_N},{PPI,PPIC,HEX_8,HEX_D}, arch_sh_dsp_up}
+	dct pdmsb x1,m0           ;!/* 10011101xx00nnnn pdmsb <DSP_REG_X>,<DSP_REG_N> */ {"pdmsb", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_9,HEX_D,HEX_XX00}, arch_sh_dsp_up}
+	dct pdmsb y0,m0           ;!/* 1011110100yynnnn pdmsb <DSP_REG_Y>,<DSP_REG_N> */ {"pdmsb", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_B,HEX_D,HEX_00YY}, arch_sh_dsp_up}
+	dct pneg  x1,m0           ;!/* 11001001xxyynnnn pneg  <DSP_REG_X>,<DSP_REG_N> */ {"pneg",  {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_9}, arch_sh_dsp_up}
+	dct pneg  y0,m0           ;!/* 11101001xxyynnnn pneg  <DSP_REG_Y>,<DSP_REG_N> */ {"pneg",  {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_E,HEX_9}, arch_sh_dsp_up}
+	dct pcopy x1,m0           ;!/* 11011001xxyynnnn pcopy <DSP_REG_X>,<DSP_REG_N> */ {"pcopy", {DSP_REG_X,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_9}, arch_sh_dsp_up}
+	dct pcopy y0,m0           ;!/* 11111001xxyynnnn pcopy <DSP_REG_Y>,<DSP_REG_N> */ {"pcopy", {DSP_REG_Y,DSP_REG_N},{PPI,PPIC,HEX_F,HEX_9}, arch_sh_dsp_up}
+	dct psts MACH,m0          ;!/* 11001101xxyynnnn psts MACH,<DSP_REG_N> */ {"psts", {A_MACH,DSP_REG_N},{PPI,PPIC,HEX_C,HEX_D}, arch_sh_dsp_up}
+	dct psts MACL,m0          ;!/* 11011101xxyynnnn psts MACL,<DSP_REG_N> */ {"psts", {A_MACL,DSP_REG_N},{PPI,PPIC,HEX_D,HEX_D}, arch_sh_dsp_up}
+	dct plds m0,MACH          ;!/* 11101101xxyynnnn plds <DSP_REG_N>,MACH */ {"plds", {DSP_REG_N,A_MACH},{PPI,PPIC,HEX_E,HEX_D}, arch_sh_dsp_up}
+	dct plds m0,MACL          ;!/* 11111101xxyynnnn plds <DSP_REG_N>,MACL */ {"plds", {DSP_REG_N,A_MACL},{PPI,PPIC,HEX_F,HEX_D}, arch_sh_dsp_up}
Index: binutils/gas/testsuite/gas/sh/arch/sh4a.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/sh4a.s	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/arch/sh4a.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -12,9 +12,8 @@
 	.section .text
 sh4a:
 ! Instructions introduced into sh4a
-	fpchg                     ;!/* 1111011111111101 fpchg               */{"fpchg",{0},{HEX_F,HEX_7,HEX_F,HEX_D}, arch_sh4a_up}
 
-! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh2a-or-sh3e sh2a-or-sh4 sh2e sh3 sh3-nommu sh3e sh4 sh4-nofpu sh4-nommu-nofpu sh4a-nofpu
+! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh2a-or-sh3e sh2a-or-sh4 sh2e sh3 sh3-nommu sh3e sh4 sh4-nofpu sh4-nommu-nofpu sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu st40-300-or-sh4a
 	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
 	add r5,r4                 ;!/* 0011nnnnmmmm1100 add <REG_M>,<REG_N> */{"add",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_C}, arch_sh_up}
 	addc r5,r4                ;!/* 0011nnnnmmmm1110 addc <REG_M>,<REG_N>*/{"addc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_E}, arch_sh_up}
@@ -49,7 +48,7 @@ sh4a:
 	exts.w r5,r4              ;!/* 0110nnnnmmmm1111 exts.w <REG_M>,<REG_N>*/{"exts.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_F}, arch_sh_up}
 	extu.b r5,r4              ;!/* 0110nnnnmmmm1100 extu.b <REG_M>,<REG_N>*/{"extu.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_C}, arch_sh_up}
 	extu.w r5,r4              ;!/* 0110nnnnmmmm1101 extu.w <REG_M>,<REG_N>*/{"extu.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_D}, arch_sh_up}
-	icbi @r4                  ;!/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_sh4a_nofpu_up}
+	icbi @r4                  ;!/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
 	jmp @r4                   ;!/* 0100nnnn00101011 jmp @<REG_N>        */{"jmp",{A_IND_N},{HEX_4,REG_N,HEX_2,HEX_B}, arch_sh_up}
 	jsr @r4                   ;!/* 0100nnnn00001011 jsr @<REG_N>        */{"jsr",{A_IND_N},{HEX_4,REG_N,HEX_0,HEX_B}, arch_sh_up}
 	ldc r4,SR                 ;!/* 0100nnnn00001110 ldc <REG_N>,SR      */{"ldc",{A_REG_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_E}, arch_sh_up}
@@ -192,7 +191,7 @@ sh4a:
 	subv r5,r4                ;!/* 0011nnnnmmmm1011 subv <REG_M>,<REG_N>*/{"subv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_B}, arch_sh_up}
 	swap.b r5,r4              ;!/* 0110nnnnmmmm1000 swap.b <REG_M>,<REG_N>*/{"swap.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_8}, arch_sh_up}
 	swap.w r5,r4              ;!/* 0110nnnnmmmm1001 swap.w <REG_M>,<REG_N>*/{"swap.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_9}, arch_sh_up}
-	synco                     ;!/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_sh4a_nofpu_up}
+	synco                     ;!/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
 	tas.b @r4                 ;!/* 0100nnnn00011011 tas.b @<REG_N>      */{"tas.b",{A_IND_N},{HEX_4,REG_N,HEX_1,HEX_B}, arch_sh_up}
 	trapa #4                  ;!/* 11000011i8*1.... trapa #<imm>        */{"trapa",{A_IMM},{HEX_C,HEX_3,IMM0_8}, arch_sh_up}
 	tst #4,R0                 ;!/* 11001000i8*1.... tst #<imm>,R0       */{"tst",{A_IMM,A_R0},{HEX_C,HEX_8,IMM0_8}, arch_sh_up}
@@ -257,6 +256,7 @@ sh4a:
 	fmul dr4,dr2              ;!/* 1111nnn0mmm00010 fmul <D_REG_M>,<D_REG_N>*/{"fmul",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_2}, arch_sh2a_or_sh4_up}
 	fneg fr1                  ;!/* 1111nnnn01001101 fneg <F_REG_N>     */{"fneg",{F_REG_N},{HEX_F,REG_N,HEX_4,HEX_D}, arch_sh2e_up}
 	fneg dr2                  ;!/* 1111nnn001001101 fneg <D_REG_N>     */{"fneg",{D_REG_N},{HEX_F,REG_N,HEX_4,HEX_D}, arch_sh2a_or_sh4_up}
+	fpchg                     ;!/* 1111011111111101 fpchg               */{"fpchg",{0},{HEX_F,HEX_7,HEX_F,HEX_D}, arch_st40_300_or_sh4a_up}
 	frchg                     ;!/* 1111101111111101 frchg               */{"frchg",{0},{HEX_F,HEX_B,HEX_F,HEX_D}, arch_sh4_up}
 	fsca FPUL,dr2             ;!/* 1111nnn011111101 fsca FPUL,<D_REG_N> */{"fsca",{FPUL_M,D_REG_N},{HEX_F,REG_N_D,HEX_F,HEX_D}, arch_sh4_up}
 	fschg                     ;!/* 1111001111111101 fschg               */{"fschg",{0},{HEX_F,HEX_3,HEX_F,HEX_D}, arch_sh2a_or_sh4_up}
Index: binutils/gas/testsuite/gas/sh/arch/st40-300-or-sh4a.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/st40-300-or-sh4a.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/gas/testsuite/gas/sh/arch/st40-300-or-sh4a.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,266 @@
+! Generated file. DO NOT EDIT.
+!
+! This file was generated by gas/testsuite/gas/sh/arch/arch.exp .
+! This file should contain every instruction valid on
+! architecture st40-300-or-sh4a but no more.
+! If the tests are failing because the expected results
+! have changed then run 'make check' and copy the new file
+! from <objdir>/gas/testsuite/st40-300-or-sh4a.s
+! to   <srcdir>/gas/testsuite/gas/sh/arch/st40-300-or-sh4a.s .
+! Make sure there are no unexpected or missing instructions.
+
+	.section .text
+st40_300_or_sh4a:
+! Instructions introduced into st40-300-or-sh4a
+	fpchg                     ;!/* 1111011111111101 fpchg               */{"fpchg",{0},{HEX_F,HEX_7,HEX_F,HEX_D}, arch_st40_300_or_sh4a_up}
+
+! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu sh2a-or-sh3e sh2a-or-sh4 sh2e sh3 sh3-nommu sh3e sh4 sh4-nofpu sh4-nommu-nofpu st40-300-nofpu-or-sh4a-nofpu
+	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
+	add r5,r4                 ;!/* 0011nnnnmmmm1100 add <REG_M>,<REG_N> */{"add",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_C}, arch_sh_up}
+	addc r5,r4                ;!/* 0011nnnnmmmm1110 addc <REG_M>,<REG_N>*/{"addc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_E}, arch_sh_up}
+	addv r5,r4                ;!/* 0011nnnnmmmm1111 addv <REG_M>,<REG_N>*/{"addv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_F}, arch_sh_up}
+	and #4,R0                 ;!/* 11001001i8*1.... and #<imm>,R0       */{"and",{A_IMM,A_R0},{HEX_C,HEX_9,IMM0_8}, arch_sh_up}
+	and r5,r4                 ;!/* 0010nnnnmmmm1001 and <REG_M>,<REG_N> */{"and",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_9}, arch_sh_up}
+	and.b #4,@(R0,GBR)        ;!/* 11001101i8*1.... and.b #<imm>,@(R0,GBR)*/{"and.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_D,IMM0_8}, arch_sh_up}
+	bra .+8                   ;!/* 1010i12......... bra <bdisp12>       */{"bra",{A_BDISP12},{HEX_A,BRANCH_12}, arch_sh_up}
+	bsr .+8                   ;!/* 1011i12......... bsr <bdisp12>       */{"bsr",{A_BDISP12},{HEX_B,BRANCH_12}, arch_sh_up}
+	bt .+8                    ;!/* 10001001i8p1.... bt <bdisp8>         */{"bt",{A_BDISP8},{HEX_8,HEX_9,BRANCH_8}, arch_sh_up}
+	bf .+8                    ;!/* 10001011i8p1.... bf <bdisp8>         */{"bf",{A_BDISP8},{HEX_8,HEX_B,BRANCH_8}, arch_sh_up}
+	bt.s .+8                  ;!/* 10001101i8p1.... bt.s <bdisp8>       */{"bt.s",{A_BDISP8},{HEX_8,HEX_D,BRANCH_8}, arch_sh2_up}
+	bt/s .+8                  ;!/* 10001101i8p1.... bt/s <bdisp8>       */{"bt/s",{A_BDISP8},{HEX_8,HEX_D,BRANCH_8}, arch_sh2_up}
+	bf.s .+8                  ;!/* 10001111i8p1.... bf.s <bdisp8>       */{"bf.s",{A_BDISP8},{HEX_8,HEX_F,BRANCH_8}, arch_sh2_up}
+	bf/s .+8                  ;!/* 10001111i8p1.... bf/s <bdisp8>       */{"bf/s",{A_BDISP8},{HEX_8,HEX_F,BRANCH_8}, arch_sh2_up}
+	clrmac                    ;!/* 0000000000101000 clrmac              */{"clrmac",{0},{HEX_0,HEX_0,HEX_2,HEX_8}, arch_sh_up}
+	clrs                      ;!/* 0000000001001000 clrs                */{"clrs",{0},{HEX_0,HEX_0,HEX_4,HEX_8}, arch_sh_up}
+	clrt                      ;!/* 0000000000001000 clrt                */{"clrt",{0},{HEX_0,HEX_0,HEX_0,HEX_8}, arch_sh_up}
+	cmp/eq #4,R0              ;!/* 10001000i8*1.... cmp/eq #<imm>,R0    */{"cmp/eq",{A_IMM,A_R0},{HEX_8,HEX_8,IMM0_8}, arch_sh_up}
+	cmp/eq r5,r4              ;!/* 0011nnnnmmmm0000 cmp/eq <REG_M>,<REG_N>*/{"cmp/eq",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_0}, arch_sh_up}
+	cmp/ge r5,r4              ;!/* 0011nnnnmmmm0011 cmp/ge <REG_M>,<REG_N>*/{"cmp/ge",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_3}, arch_sh_up}
+	cmp/gt r5,r4              ;!/* 0011nnnnmmmm0111 cmp/gt <REG_M>,<REG_N>*/{"cmp/gt",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_7}, arch_sh_up}
+	cmp/hi r5,r4              ;!/* 0011nnnnmmmm0110 cmp/hi <REG_M>,<REG_N>*/{"cmp/hi",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_6}, arch_sh_up}
+	cmp/hs r5,r4              ;!/* 0011nnnnmmmm0010 cmp/hs <REG_M>,<REG_N>*/{"cmp/hs",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_2}, arch_sh_up}
+	cmp/pl r4                 ;!/* 0100nnnn00010101 cmp/pl <REG_N>      */{"cmp/pl",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_5}, arch_sh_up}
+	cmp/pz r4                 ;!/* 0100nnnn00010001 cmp/pz <REG_N>      */{"cmp/pz",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_1}, arch_sh_up}
+	cmp/str r5,r4             ;!/* 0010nnnnmmmm1100 cmp/str <REG_M>,<REG_N>*/{"cmp/str",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_C}, arch_sh_up}
+	div0s r5,r4               ;!/* 0010nnnnmmmm0111 div0s <REG_M>,<REG_N>*/{"div0s",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_7}, arch_sh_up}
+	div0u                     ;!/* 0000000000011001 div0u               */{"div0u",{0},{HEX_0,HEX_0,HEX_1,HEX_9}, arch_sh_up}
+	div1 r5,r4                ;!/* 0011nnnnmmmm0100 div1 <REG_M>,<REG_N>*/{"div1",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_4}, arch_sh_up}
+	exts.b r5,r4              ;!/* 0110nnnnmmmm1110 exts.b <REG_M>,<REG_N>*/{"exts.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_E}, arch_sh_up}
+	exts.w r5,r4              ;!/* 0110nnnnmmmm1111 exts.w <REG_M>,<REG_N>*/{"exts.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_F}, arch_sh_up}
+	extu.b r5,r4              ;!/* 0110nnnnmmmm1100 extu.b <REG_M>,<REG_N>*/{"extu.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_C}, arch_sh_up}
+	extu.w r5,r4              ;!/* 0110nnnnmmmm1101 extu.w <REG_M>,<REG_N>*/{"extu.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_D}, arch_sh_up}
+	icbi @r4                  ;!/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
+	jmp @r4                   ;!/* 0100nnnn00101011 jmp @<REG_N>        */{"jmp",{A_IND_N},{HEX_4,REG_N,HEX_2,HEX_B}, arch_sh_up}
+	jsr @r4                   ;!/* 0100nnnn00001011 jsr @<REG_N>        */{"jsr",{A_IND_N},{HEX_4,REG_N,HEX_0,HEX_B}, arch_sh_up}
+	ldc r4,SR                 ;!/* 0100nnnn00001110 ldc <REG_N>,SR      */{"ldc",{A_REG_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_E}, arch_sh_up}
+	ldc r4,GBR                ;!/* 0100nnnn00011110 ldc <REG_N>,GBR     */{"ldc",{A_REG_N,A_GBR},{HEX_4,REG_N,HEX_1,HEX_E}, arch_sh_up}
+	ldc r4,SGR                ;!/* 0100nnnn00111010 ldc <REG_N>,SGR     */{"ldc",{A_REG_N,A_SGR},{HEX_4,REG_N,HEX_3,HEX_A}, arch_sh4_nommu_nofpu_up}
+	ldc r4,VBR                ;!/* 0100nnnn00101110 ldc <REG_N>,VBR     */{"ldc",{A_REG_N,A_VBR},{HEX_4,REG_N,HEX_2,HEX_E}, arch_sh_up}
+	ldc r4,SSR                ;!/* 0100nnnn00111110 ldc <REG_N>,SSR     */{"ldc",{A_REG_N,A_SSR},{HEX_4,REG_N,HEX_3,HEX_E}, arch_sh3_nommu_up}
+	ldc r4,SPC                ;!/* 0100nnnn01001110 ldc <REG_N>,SPC     */{"ldc",{A_REG_N,A_SPC},{HEX_4,REG_N,HEX_4,HEX_E}, arch_sh3_nommu_up}
+	ldc r4,DBR                ;!/* 0100nnnn11111010 ldc <REG_N>,DBR     */{"ldc",{A_REG_N,A_DBR},{HEX_4,REG_N,HEX_F,HEX_A}, arch_sh4_nommu_nofpu_up}
+	ldc r4,r1_bank            ;!/* 0100nnnn1xxx1110 ldc <REG_N>,Rn_BANK */{"ldc",{A_REG_N,A_REG_B},{HEX_4,REG_N,REG_B,HEX_E}, arch_sh3_nommu_up}
+	ldc.l @r4+,SR             ;!/* 0100nnnn00000111 ldc.l @<REG_N>+,SR  */{"ldc.l",{A_INC_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_7}, arch_sh_up}
+	ldc.l @r4+,GBR            ;!/* 0100nnnn00010111 ldc.l @<REG_N>+,GBR */{"ldc.l",{A_INC_N,A_GBR},{HEX_4,REG_N,HEX_1,HEX_7}, arch_sh_up}
+	ldc.l @r4+,VBR            ;!/* 0100nnnn00100111 ldc.l @<REG_N>+,VBR */{"ldc.l",{A_INC_N,A_VBR},{HEX_4,REG_N,HEX_2,HEX_7}, arch_sh_up}
+	ldc.l @r4+,SGR            ;!/* 0100nnnn00110110 ldc.l @<REG_N>+,SGR */{"ldc.l",{A_INC_N,A_SGR},{HEX_4,REG_N,HEX_3,HEX_6}, arch_sh4_nommu_nofpu_up}
+	ldc.l @r4+,SSR            ;!/* 0100nnnn00110111 ldc.l @<REG_N>+,SSR */{"ldc.l",{A_INC_N,A_SSR},{HEX_4,REG_N,HEX_3,HEX_7}, arch_sh3_nommu_up}
+	ldc.l @r4+,SPC            ;!/* 0100nnnn01000111 ldc.l @<REG_N>+,SPC */{"ldc.l",{A_INC_N,A_SPC},{HEX_4,REG_N,HEX_4,HEX_7}, arch_sh3_nommu_up}
+	ldc.l @r4+,DBR            ;!/* 0100nnnn11110110 ldc.l @<REG_N>+,DBR */{"ldc.l",{A_INC_N,A_DBR},{HEX_4,REG_N,HEX_F,HEX_6}, arch_sh4_nommu_nofpu_up}
+	ldc.l @r4+,r1_bank        ;!/* 0100nnnn1xxx0111 ldc.l @<REG_N>+,Rn_BANK */{"ldc.l",{A_INC_N,A_REG_B},{HEX_4,REG_N,REG_B,HEX_7}, arch_sh3_nommu_up}
+	lds r4,MACH               ;!/* 0100nnnn00001010 lds <REG_N>,MACH    */{"lds",{A_REG_N,A_MACH},{HEX_4,REG_N,HEX_0,HEX_A}, arch_sh_up}
+	lds r4,MACL               ;!/* 0100nnnn00011010 lds <REG_N>,MACL    */{"lds",{A_REG_N,A_MACL},{HEX_4,REG_N,HEX_1,HEX_A}, arch_sh_up}
+	lds r4,PR                 ;!/* 0100nnnn00101010 lds <REG_N>,PR      */{"lds",{A_REG_N,A_PR},{HEX_4,REG_N,HEX_2,HEX_A}, arch_sh_up}
+	lds r4,FPUL               ;!/* 0100nnnn01011010 lds <REG_N>,FPUL    */{"lds",{A_REG_M,FPUL_N},{HEX_4,REG_M,HEX_5,HEX_A}, arch_sh2e_up}
+	lds r5,FPSCR              ;!/* 0100nnnn01101010 lds <REG_M>,FPSCR   */{"lds",{A_REG_M,FPSCR_N},{HEX_4,REG_M,HEX_6,HEX_A}, arch_sh2e_up}
+	lds.l @r4+,MACH           ;!/* 0100nnnn00000110 lds.l @<REG_N>+,MACH*/{"lds.l",{A_INC_N,A_MACH},{HEX_4,REG_N,HEX_0,HEX_6}, arch_sh_up}
+	lds.l @r4+,MACL           ;!/* 0100nnnn00010110 lds.l @<REG_N>+,MACL*/{"lds.l",{A_INC_N,A_MACL},{HEX_4,REG_N,HEX_1,HEX_6}, arch_sh_up}
+	lds.l @r4+,PR             ;!/* 0100nnnn00100110 lds.l @<REG_N>+,PR  */{"lds.l",{A_INC_N,A_PR},{HEX_4,REG_N,HEX_2,HEX_6}, arch_sh_up}
+	lds.l @r5+,FPUL           ;!/* 0100nnnn01010110 lds.l @<REG_M>+,FPUL*/{"lds.l",{A_INC_M,FPUL_N},{HEX_4,REG_M,HEX_5,HEX_6}, arch_sh2e_up}
+	lds.l @r5+,FPSCR          ;!/* 0100nnnn01100110 lds.l @<REG_M>+,FPSCR*/{"lds.l",{A_INC_M,FPSCR_N},{HEX_4,REG_M,HEX_6,HEX_6}, arch_sh2e_up}
+	ldtlb                     ;!/* 0000000000111000 ldtlb               */{"ldtlb",{0},{HEX_0,HEX_0,HEX_3,HEX_8}, arch_sh3_up}
+	mac.w @r5+,@r4+           ;!/* 0100nnnnmmmm1111 mac.w @<REG_M>+,@<REG_N>+*/{"mac.w",{A_INC_M,A_INC_N},{HEX_4,REG_N,REG_M,HEX_F}, arch_sh_up}
+	mov #4,r4                 ;!/* 1110nnnni8*1.... mov #<imm>,<REG_N>  */{"mov",{A_IMM,A_REG_N},{HEX_E,REG_N,IMM0_8}, arch_sh_up}
+	mov r5,r4                 ;!/* 0110nnnnmmmm0011 mov <REG_M>,<REG_N> */{"mov",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_3}, arch_sh_up}
+	mov.b r5,@(R0,r4)         ;!/* 0000nnnnmmmm0100 mov.b <REG_M>,@(R0,<REG_N>)*/{"mov.b",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b r5,@-r4             ;!/* 0010nnnnmmmm0100 mov.b <REG_M>,@-<REG_N>*/{"mov.b",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b r5,@r4              ;!/* 0010nnnnmmmm0000 mov.b <REG_M>,@<REG_N>*/{"mov.b",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_0}, arch_sh_up}
+	mov.b @(8,r5),R0          ;!/* 10000100mmmmi4*1 mov.b @(<disp>,<REG_M>),R0*/{"mov.b",{A_DISP_REG_M,A_R0},{HEX_8,HEX_4,REG_M,IMM0_4}, arch_sh_up}
+	mov.b @(8,GBR),R0         ;!/* 11000100i8*1.... mov.b @(<disp>,GBR),R0*/{"mov.b",{A_DISP_GBR,A_R0},{HEX_C,HEX_4,IMM0_8}, arch_sh_up}
+	mov.b @(R0,r5),r4         ;!/* 0000nnnnmmmm1100 mov.b @(R0,<REG_M>),<REG_N>*/{"mov.b",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_C}, arch_sh_up}
+	mov.b @r5+,r4             ;!/* 0110nnnnmmmm0100 mov.b @<REG_M>+,<REG_N>*/{"mov.b",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b @r5,r4              ;!/* 0110nnnnmmmm0000 mov.b @<REG_M>,<REG_N>*/{"mov.b",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_0}, arch_sh_up}
+	mov.b R0,@(8,r5)          ;!/* 10000000mmmmi4*1 mov.b R0,@(<disp>,<REG_M>)*/{"mov.b",{A_R0,A_DISP_REG_M},{HEX_8,HEX_0,REG_M,IMM1_4}, arch_sh_up}
+	mov.b R0,@(8,GBR)         ;!/* 11000000i8*1.... mov.b R0,@(<disp>,GBR)*/{"mov.b",{A_R0,A_DISP_GBR},{HEX_C,HEX_0,IMM1_8}, arch_sh_up}
+	mov.l r5,@(8,r4)          ;!/* 0001nnnnmmmmi4*4 mov.l <REG_M>,@(<disp>,<REG_N>)*/{"mov.l",{ A_REG_M,A_DISP_REG_N},{HEX_1,REG_N,REG_M,IMM1_4BY4}, arch_sh_up}
+	mov.l r5,@(R0,r4)         ;!/* 0000nnnnmmmm0110 mov.l <REG_M>,@(R0,<REG_N>)*/{"mov.l",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l r5,@-r4             ;!/* 0010nnnnmmmm0110 mov.l <REG_M>,@-<REG_N>*/{"mov.l",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l r5,@r4              ;!/* 0010nnnnmmmm0010 mov.l <REG_M>,@<REG_N>*/{"mov.l",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_2}, arch_sh_up}
+	mov.l @(8,r5),r4          ;!/* 0101nnnnmmmmi4*4 mov.l @(<disp>,<REG_M>),<REG_N>*/{"mov.l",{A_DISP_REG_M,A_REG_N},{HEX_5,REG_N,REG_M,IMM0_4BY4}, arch_sh_up}
+	mov.l @(8,GBR),R0         ;!/* 11000110i8*4.... mov.l @(<disp>,GBR),R0*/{"mov.l",{A_DISP_GBR,A_R0},{HEX_C,HEX_6,IMM0_8BY4}, arch_sh_up}
+	.align 2
+	mov.l @(8,PC),r4 ;!/* 1101nnnni8p4.... mov.l @(<disp>,PC),<REG_N>*/{"mov.l",{A_DISP_PC,A_REG_N},{HEX_D,REG_N,PCRELIMM_8BY4}, arch_sh_up}
+	mov.l @(R0,r5),r4         ;!/* 0000nnnnmmmm1110 mov.l @(R0,<REG_M>),<REG_N>*/{"mov.l",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_E}, arch_sh_up}
+	mov.l @r5+,r4             ;!/* 0110nnnnmmmm0110 mov.l @<REG_M>+,<REG_N>*/{"mov.l",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l @r5,r4              ;!/* 0110nnnnmmmm0010 mov.l @<REG_M>,<REG_N>*/{"mov.l",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_2}, arch_sh_up}
+	mov.l R0,@(8,GBR)         ;!/* 11000010i8*4.... mov.l R0,@(<disp>,GBR)*/{"mov.l",{A_R0,A_DISP_GBR},{HEX_C,HEX_2,IMM1_8BY4}, arch_sh_up}
+	mov.w r5,@(R0,r4)         ;!/* 0000nnnnmmmm0101 mov.w <REG_M>,@(R0,<REG_N>)*/{"mov.w",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w r5,@-r4             ;!/* 0010nnnnmmmm0101 mov.w <REG_M>,@-<REG_N>*/{"mov.w",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w r5,@r4              ;!/* 0010nnnnmmmm0001 mov.w <REG_M>,@<REG_N>*/{"mov.w",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_1}, arch_sh_up}
+	mov.w @(8,r5),R0          ;!/* 10000101mmmmi4*2 mov.w @(<disp>,<REG_M>),R0*/{"mov.w",{A_DISP_REG_M,A_R0},{HEX_8,HEX_5,REG_M,IMM0_4BY2}, arch_sh_up}
+	mov.w @(8,GBR),R0         ;!/* 11000101i8*2.... mov.w @(<disp>,GBR),R0*/{"mov.w",{A_DISP_GBR,A_R0},{HEX_C,HEX_5,IMM0_8BY2}, arch_sh_up}
+	mov.w @(8,PC),r4          ;!/* 1001nnnni8p2.... mov.w @(<disp>,PC),<REG_N>*/{"mov.w",{A_DISP_PC,A_REG_N},{HEX_9,REG_N,PCRELIMM_8BY2}, arch_sh_up}
+	mov.w @(R0,r5),r4         ;!/* 0000nnnnmmmm1101 mov.w @(R0,<REG_M>),<REG_N>*/{"mov.w",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_D}, arch_sh_up}
+	mov.w @r5+,r4             ;!/* 0110nnnnmmmm0101 mov.w @<REG_M>+,<REG_N>*/{"mov.w",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w @r5,r4              ;!/* 0110nnnnmmmm0001 mov.w @<REG_M>,<REG_N>*/{"mov.w",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_1}, arch_sh_up}
+	mov.w R0,@(8,r5)          ;!/* 10000001mmmmi4*2 mov.w R0,@(<disp>,<REG_M>)*/{"mov.w",{A_R0,A_DISP_REG_M},{HEX_8,HEX_1,REG_M,IMM1_4BY2}, arch_sh_up}
+	mov.w R0,@(8,GBR)         ;!/* 11000001i8*2.... mov.w R0,@(<disp>,GBR)*/{"mov.w",{A_R0,A_DISP_GBR},{HEX_C,HEX_1,IMM1_8BY2}, arch_sh_up}
+	.align 2
+	mova @(8,PC),R0 ;!/* 11000111i8p4.... mova @(<disp>,PC),R0*/{"mova",{A_DISP_PC,A_R0},{HEX_C,HEX_7,PCRELIMM_8BY4}, arch_sh_up}
+	movca.l R0,@r4            ;!/* 0000nnnn11000011 movca.l R0,@<REG_N> */{"movca.l",{A_R0,A_IND_N},{HEX_0,REG_N,HEX_C,HEX_3}, arch_sh4_nommu_nofpu_up}
+	movt r4                   ;!/* 0000nnnn00101001 movt <REG_N>        */{"movt",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_9}, arch_sh_up}
+	muls.w r5,r4              ;!/* 0010nnnnmmmm1111 muls.w <REG_M>,<REG_N>*/{"muls.w",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_F}, arch_sh_up}
+	muls r5,r4                ;!/* 0010nnnnmmmm1111 muls <REG_M>,<REG_N>*/{"muls",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_F}, arch_sh_up}
+	mul.l r5,r4               ;!/* 0000nnnnmmmm0111 mul.l <REG_M>,<REG_N>*/{"mul.l",{ A_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_7}, arch_sh2_up}
+	mulu.w r5,r4              ;!/* 0010nnnnmmmm1110 mulu.w <REG_M>,<REG_N>*/{"mulu.w",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_E}, arch_sh_up}
+	mulu r5,r4                ;!/* 0010nnnnmmmm1110 mulu <REG_M>,<REG_N>*/{"mulu",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_E}, arch_sh_up}
+	neg r5,r4                 ;!/* 0110nnnnmmmm1011 neg <REG_M>,<REG_N> */{"neg",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_B}, arch_sh_up}
+	negc r5,r4                ;!/* 0110nnnnmmmm1010 negc <REG_M>,<REG_N>*/{"negc",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_A}, arch_sh_up}
+	nop                       ;!/* 0000000000001001 nop                 */{"nop",{0},{HEX_0,HEX_0,HEX_0,HEX_9}, arch_sh_up}
+	not r5,r4                 ;!/* 0110nnnnmmmm0111 not <REG_M>,<REG_N> */{"not",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_7}, arch_sh_up}
+	ocbi @r4                  ;!/* 0000nnnn10010011 ocbi @<REG_N>       */{"ocbi",{A_IND_N},{HEX_0,REG_N,HEX_9,HEX_3}, arch_sh4_nommu_nofpu_up}
+	ocbp @r4                  ;!/* 0000nnnn10100011 ocbp @<REG_N>       */{"ocbp",{A_IND_N},{HEX_0,REG_N,HEX_A,HEX_3}, arch_sh4_nommu_nofpu_up}
+	ocbwb @r4                 ;!/* 0000nnnn10110011 ocbwb @<REG_N>      */{"ocbwb",{A_IND_N},{HEX_0,REG_N,HEX_B,HEX_3}, arch_sh4_nommu_nofpu_up}
+	or #4,R0                  ;!/* 11001011i8*1.... or #<imm>,R0        */{"or",{A_IMM,A_R0},{HEX_C,HEX_B,IMM0_8}, arch_sh_up}
+	or r5,r4                  ;!/* 0010nnnnmmmm1011 or <REG_M>,<REG_N>  */{"or",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_B}, arch_sh_up}
+	or.b #4,@(R0,GBR)         ;!/* 11001111i8*1.... or.b #<imm>,@(R0,GBR)*/{"or.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_F,IMM0_8}, arch_sh_up}
+	pref @r4                  ;!/* 0000nnnn10000011 pref @<REG_N>       */{"pref",{A_IND_N},{HEX_0,REG_N,HEX_8,HEX_3}, arch_sh2a_nofpu_or_sh4_nommu_nofpu_up}
+	rotcl r4                  ;!/* 0100nnnn00100100 rotcl <REG_N>       */{"rotcl",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_4}, arch_sh_up}
+	rotcr r4                  ;!/* 0100nnnn00100101 rotcr <REG_N>       */{"rotcr",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_5}, arch_sh_up}
+	rotl r4                   ;!/* 0100nnnn00000100 rotl <REG_N>        */{"rotl",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_4}, arch_sh_up}
+	rotr r4                   ;!/* 0100nnnn00000101 rotr <REG_N>        */{"rotr",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_5}, arch_sh_up}
+	rte                       ;!/* 0000000000101011 rte                 */{"rte",{0},{HEX_0,HEX_0,HEX_2,HEX_B}, arch_sh_up}
+	rts                       ;!/* 0000000000001011 rts                 */{"rts",{0},{HEX_0,HEX_0,HEX_0,HEX_B}, arch_sh_up}
+	sets                      ;!/* 0000000001011000 sets                */{"sets",{0},{HEX_0,HEX_0,HEX_5,HEX_8}, arch_sh_up}
+	sett                      ;!/* 0000000000011000 sett                */{"sett",{0},{HEX_0,HEX_0,HEX_1,HEX_8}, arch_sh_up}
+	shad r5,r4                ;!/* 0100nnnnmmmm1100 shad <REG_M>,<REG_N>*/{"shad",{ A_REG_M,A_REG_N},{HEX_4,REG_N,REG_M,HEX_C}, arch_sh2a_nofpu_or_sh3_nommu_up}
+	shld r5,r4                ;!/* 0100nnnnmmmm1101 shld <REG_M>,<REG_N>*/{"shld",{ A_REG_M,A_REG_N},{HEX_4,REG_N,REG_M,HEX_D}, arch_sh2a_nofpu_or_sh3_nommu_up}
+	shal r4                   ;!/* 0100nnnn00100000 shal <REG_N>        */{"shal",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_0}, arch_sh_up}
+	shar r4                   ;!/* 0100nnnn00100001 shar <REG_N>        */{"shar",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_1}, arch_sh_up}
+	shll r4                   ;!/* 0100nnnn00000000 shll <REG_N>        */{"shll",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_0}, arch_sh_up}
+	shll16 r4                 ;!/* 0100nnnn00101000 shll16 <REG_N>      */{"shll16",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_8}, arch_sh_up}
+	shll2 r4                  ;!/* 0100nnnn00001000 shll2 <REG_N>       */{"shll2",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_8}, arch_sh_up}
+	shll8 r4                  ;!/* 0100nnnn00011000 shll8 <REG_N>       */{"shll8",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_8}, arch_sh_up}
+	shlr r4                   ;!/* 0100nnnn00000001 shlr <REG_N>        */{"shlr",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_1}, arch_sh_up}
+	shlr16 r4                 ;!/* 0100nnnn00101001 shlr16 <REG_N>      */{"shlr16",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_9}, arch_sh_up}
+	shlr2 r4                  ;!/* 0100nnnn00001001 shlr2 <REG_N>       */{"shlr2",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_9}, arch_sh_up}
+	shlr8 r4                  ;!/* 0100nnnn00011001 shlr8 <REG_N>       */{"shlr8",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_9}, arch_sh_up}
+	sleep                     ;!/* 0000000000011011 sleep               */{"sleep",{0},{HEX_0,HEX_0,HEX_1,HEX_B}, arch_sh_up}
+	stc SR,r4                 ;!/* 0000nnnn00000010 stc SR,<REG_N>      */{"stc",{A_SR,A_REG_N},{HEX_0,REG_N,HEX_0,HEX_2}, arch_sh_up}
+	stc GBR,r4                ;!/* 0000nnnn00010010 stc GBR,<REG_N>     */{"stc",{A_GBR,A_REG_N},{HEX_0,REG_N,HEX_1,HEX_2}, arch_sh_up}
+	stc VBR,r4                ;!/* 0000nnnn00100010 stc VBR,<REG_N>     */{"stc",{A_VBR,A_REG_N},{HEX_0,REG_N,HEX_2,HEX_2}, arch_sh_up}
+	stc SSR,r4                ;!/* 0000nnnn00110010 stc SSR,<REG_N>     */{"stc",{A_SSR,A_REG_N},{HEX_0,REG_N,HEX_3,HEX_2}, arch_sh3_nommu_up}
+	stc SPC,r4                ;!/* 0000nnnn01000010 stc SPC,<REG_N>     */{"stc",{A_SPC,A_REG_N},{HEX_0,REG_N,HEX_4,HEX_2}, arch_sh3_nommu_up}
+	stc SGR,r4                ;!/* 0000nnnn00111010 stc SGR,<REG_N>     */{"stc",{A_SGR,A_REG_N},{HEX_0,REG_N,HEX_3,HEX_A}, arch_sh4_nommu_nofpu_up}
+	stc DBR,r4                ;!/* 0000nnnn11111010 stc DBR,<REG_N>     */{"stc",{A_DBR,A_REG_N},{HEX_0,REG_N,HEX_F,HEX_A}, arch_sh4_nommu_nofpu_up}
+	stc r1_bank,r4            ;!/* 0000nnnn1xxx0010 stc Rn_BANK,<REG_N> */{"stc",{A_REG_B,A_REG_N},{HEX_0,REG_N,REG_B,HEX_2}, arch_sh3_nommu_up}
+	stc.l SR,@-r4             ;!/* 0100nnnn00000011 stc.l SR,@-<REG_N>  */{"stc.l",{A_SR,A_DEC_N},{HEX_4,REG_N,HEX_0,HEX_3}, arch_sh_up}
+	stc.l VBR,@-r4            ;!/* 0100nnnn00100011 stc.l VBR,@-<REG_N> */{"stc.l",{A_VBR,A_DEC_N},{HEX_4,REG_N,HEX_2,HEX_3}, arch_sh_up}
+	stc.l SSR,@-r4            ;!/* 0100nnnn00110011 stc.l SSR,@-<REG_N> */{"stc.l",{A_SSR,A_DEC_N},{HEX_4,REG_N,HEX_3,HEX_3}, arch_sh3_nommu_up}
+	stc.l SPC,@-r4            ;!/* 0100nnnn01000011 stc.l SPC,@-<REG_N> */{"stc.l",{A_SPC,A_DEC_N},{HEX_4,REG_N,HEX_4,HEX_3}, arch_sh3_nommu_up}
+	stc.l GBR,@-r4            ;!/* 0100nnnn00010011 stc.l GBR,@-<REG_N> */{"stc.l",{A_GBR,A_DEC_N},{HEX_4,REG_N,HEX_1,HEX_3}, arch_sh_up}
+	stc.l SGR,@-r4            ;!/* 0100nnnn00110010 stc.l SGR,@-<REG_N> */{"stc.l",{A_SGR,A_DEC_N},{HEX_4,REG_N,HEX_3,HEX_2}, arch_sh4_nommu_nofpu_up}
+	stc.l DBR,@-r4            ;!/* 0100nnnn11110010 stc.l DBR,@-<REG_N> */{"stc.l",{A_DBR,A_DEC_N},{HEX_4,REG_N,HEX_F,HEX_2}, arch_sh4_nommu_nofpu_up}
+	stc.l r1_bank,@-r4        ;!/* 0100nnnn1xxx0011 stc.l Rn_BANK,@-<REG_N> */{"stc.l",{A_REG_B,A_DEC_N},{HEX_4,REG_N,REG_B,HEX_3}, arch_sh3_nommu_up}
+	sts MACH,r4               ;!/* 0000nnnn00001010 sts MACH,<REG_N>    */{"sts",{A_MACH,A_REG_N},{HEX_0,REG_N,HEX_0,HEX_A}, arch_sh_up}
+	sts MACL,r4               ;!/* 0000nnnn00011010 sts MACL,<REG_N>    */{"sts",{A_MACL,A_REG_N},{HEX_0,REG_N,HEX_1,HEX_A}, arch_sh_up}
+	sts PR,r4                 ;!/* 0000nnnn00101010 sts PR,<REG_N>      */{"sts",{A_PR,A_REG_N},{HEX_0,REG_N,HEX_2,HEX_A}, arch_sh_up}
+	sts FPUL,r4               ;!/* 0000nnnn01011010 sts FPUL,<REG_N>    */{"sts",{FPUL_M,A_REG_N},{HEX_0,REG_N,HEX_5,HEX_A}, arch_sh2e_up}
+	sts FPSCR,r4              ;!/* 0000nnnn01101010 sts FPSCR,<REG_N>   */{"sts",{FPSCR_M,A_REG_N},{HEX_0,REG_N,HEX_6,HEX_A}, arch_sh2e_up}
+	sts.l MACH,@-r4           ;!/* 0100nnnn00000010 sts.l MACH,@-<REG_N>*/{"sts.l",{A_MACH,A_DEC_N},{HEX_4,REG_N,HEX_0,HEX_2}, arch_sh_up}
+	sts.l MACL,@-r4           ;!/* 0100nnnn00010010 sts.l MACL,@-<REG_N>*/{"sts.l",{A_MACL,A_DEC_N},{HEX_4,REG_N,HEX_1,HEX_2}, arch_sh_up}
+	sts.l PR,@-r4             ;!/* 0100nnnn00100010 sts.l PR,@-<REG_N>  */{"sts.l",{A_PR,A_DEC_N},{HEX_4,REG_N,HEX_2,HEX_2}, arch_sh_up}
+	sts.l FPUL,@-r4           ;!/* 0100nnnn01010010 sts.l FPUL,@-<REG_N>*/{"sts.l",{FPUL_M,A_DEC_N},{HEX_4,REG_N,HEX_5,HEX_2}, arch_sh2e_up}
+	sts.l FPSCR,@-r4          ;!/* 0100nnnn01100010 sts.l FPSCR,@-<REG_N>*/{"sts.l",{FPSCR_M,A_DEC_N},{HEX_4,REG_N,HEX_6,HEX_2}, arch_sh2e_up}
+	sub r5,r4                 ;!/* 0011nnnnmmmm1000 sub <REG_M>,<REG_N> */{"sub",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_8}, arch_sh_up}
+	subc r5,r4                ;!/* 0011nnnnmmmm1010 subc <REG_M>,<REG_N>*/{"subc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_A}, arch_sh_up}
+	subv r5,r4                ;!/* 0011nnnnmmmm1011 subv <REG_M>,<REG_N>*/{"subv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_B}, arch_sh_up}
+	swap.b r5,r4              ;!/* 0110nnnnmmmm1000 swap.b <REG_M>,<REG_N>*/{"swap.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_8}, arch_sh_up}
+	swap.w r5,r4              ;!/* 0110nnnnmmmm1001 swap.w <REG_M>,<REG_N>*/{"swap.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_9}, arch_sh_up}
+	synco                     ;!/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_st40_300_nofpu_or_sh4a_nofpu_up}
+	tas.b @r4                 ;!/* 0100nnnn00011011 tas.b @<REG_N>      */{"tas.b",{A_IND_N},{HEX_4,REG_N,HEX_1,HEX_B}, arch_sh_up}
+	trapa #4                  ;!/* 11000011i8*1.... trapa #<imm>        */{"trapa",{A_IMM},{HEX_C,HEX_3,IMM0_8}, arch_sh_up}
+	tst #4,R0                 ;!/* 11001000i8*1.... tst #<imm>,R0       */{"tst",{A_IMM,A_R0},{HEX_C,HEX_8,IMM0_8}, arch_sh_up}
+	tst r5,r4                 ;!/* 0010nnnnmmmm1000 tst <REG_M>,<REG_N> */{"tst",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_8}, arch_sh_up}
+	tst.b #4,@(R0,GBR)        ;!/* 11001100i8*1.... tst.b #<imm>,@(R0,GBR)*/{"tst.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_C,IMM0_8}, arch_sh_up}
+	xor #4,R0                 ;!/* 11001010i8*1.... xor #<imm>,R0       */{"xor",{A_IMM,A_R0},{HEX_C,HEX_A,IMM0_8}, arch_sh_up}
+	xor r5,r4                 ;!/* 0010nnnnmmmm1010 xor <REG_M>,<REG_N> */{"xor",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_A}, arch_sh_up}
+	xor.b #4,@(R0,GBR)        ;!/* 11001110i8*1.... xor.b #<imm>,@(R0,GBR)*/{"xor.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_E,IMM0_8}, arch_sh_up}
+	xtrct r5,r4               ;!/* 0010nnnnmmmm1101 xtrct <REG_M>,<REG_N>*/{"xtrct",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_D}, arch_sh_up}
+	dt r4                     ;!/* 0100nnnn00010000 dt <REG_N>          */{"dt",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_0}, arch_sh2_up}
+	dmuls.l r5,r4             ;!/* 0011nnnnmmmm1101 dmuls.l <REG_M>,<REG_N>*/{"dmuls.l",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_D}, arch_sh2_up}
+	dmulu.l r5,r4             ;!/* 0011nnnnmmmm0101 dmulu.l <REG_M>,<REG_N>*/{"dmulu.l",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_5}, arch_sh2_up}
+	mac.l @r5+,@r4+           ;!/* 0000nnnnmmmm1111 mac.l @<REG_M>+,@<REG_N>+*/{"mac.l",{A_INC_M,A_INC_N},{HEX_0,REG_N,REG_M,HEX_F}, arch_sh2_up}
+	braf r4                   ;!/* 0000nnnn00100011 braf <REG_N>       */{"braf",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_3}, arch_sh2_up}
+	bsrf r4                   ;!/* 0000nnnn00000011 bsrf <REG_N>       */{"bsrf",{A_REG_N},{HEX_0,REG_N,HEX_0,HEX_3}, arch_sh2_up}
+	fabs fr1                  ;!/* 1111nnnn01011101 fabs <F_REG_N>     */{"fabs",{F_REG_N},{HEX_F,REG_N,HEX_5,HEX_D}, arch_sh2e_up}
+	fabs dr2                  ;!/* 1111nnn001011101 fabs <D_REG_N>     */{"fabs",{D_REG_N},{HEX_F,REG_N,HEX_5,HEX_D}, arch_sh2a_or_sh4_up}
+	fadd fr2,fr1              ;!/* 1111nnnnmmmm0000 fadd <F_REG_M>,<F_REG_N>*/{"fadd",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_0}, arch_sh2e_up}
+	fadd dr4,dr2              ;!/* 1111nnn0mmm00000 fadd <D_REG_M>,<D_REG_N>*/{"fadd",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_0}, arch_sh2a_or_sh4_up}
+	fcmp/eq fr2,fr1           ;!/* 1111nnnnmmmm0100 fcmp/eq <F_REG_M>,<F_REG_N>*/{"fcmp/eq",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_4}, arch_sh2e_up}
+	fcmp/eq dr4,dr2           ;!/* 1111nnn0mmm00100 fcmp/eq <D_REG_M>,<D_REG_N>*/{"fcmp/eq",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_4}, arch_sh2a_or_sh4_up}
+	fcmp/gt fr2,fr1           ;!/* 1111nnnnmmmm0101 fcmp/gt <F_REG_M>,<F_REG_N>*/{"fcmp/gt",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_5}, arch_sh2e_up}
+	fcmp/gt dr4,dr2           ;!/* 1111nnn0mmm00101 fcmp/gt <D_REG_M>,<D_REG_N>*/{"fcmp/gt",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_5}, arch_sh2a_or_sh4_up}
+	fcnvds dr2,FPUL           ;!/* 1111nnn010111101 fcnvds <D_REG_N>,FPUL*/{"fcnvds",{D_REG_N,FPUL_M},{HEX_F,REG_N_D,HEX_B,HEX_D}, arch_sh2a_or_sh4_up}
+	fcnvsd FPUL,dr2           ;!/* 1111nnn010101101 fcnvsd FPUL,<D_REG_N>*/{"fcnvsd",{FPUL_M,D_REG_N},{HEX_F,REG_N_D,HEX_A,HEX_D}, arch_sh2a_or_sh4_up}
+	fdiv fr2,fr1              ;!/* 1111nnnnmmmm0011 fdiv <F_REG_M>,<F_REG_N>*/{"fdiv",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_3}, arch_sh2e_up}
+	fdiv dr4,dr2              ;!/* 1111nnn0mmm00011 fdiv <D_REG_M>,<D_REG_N>*/{"fdiv",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_3}, arch_sh2a_or_sh4_up}
+	fipr fv4,fv0              ;!/* 1111nnmm11101101 fipr <V_REG_M>,<V_REG_N>*/{"fipr",{V_REG_M,V_REG_N},{HEX_F,REG_NM,HEX_E,HEX_D}, arch_sh4_up}
+	fldi0 fr1                 ;!/* 1111nnnn10001101 fldi0 <F_REG_N>    */{"fldi0",{F_REG_N},{HEX_F,REG_N,HEX_8,HEX_D}, arch_sh2e_up}
+	fldi1 fr1                 ;!/* 1111nnnn10011101 fldi1 <F_REG_N>    */{"fldi1",{F_REG_N},{HEX_F,REG_N,HEX_9,HEX_D}, arch_sh2e_up}
+	flds fr1,FPUL             ;!/* 1111nnnn00011101 flds <F_REG_N>,FPUL*/{"flds",{F_REG_N,FPUL_M},{HEX_F,REG_N,HEX_1,HEX_D}, arch_sh2e_up}
+	float FPUL,fr1            ;!/* 1111nnnn00101101 float FPUL,<F_REG_N>*/{"float",{FPUL_M,F_REG_N},{HEX_F,REG_N,HEX_2,HEX_D}, arch_sh2e_up}
+	float FPUL,dr2            ;!/* 1111nnn000101101 float FPUL,<D_REG_N>*/{"float",{FPUL_M,D_REG_N},{HEX_F,REG_N,HEX_2,HEX_D}, arch_sh2a_or_sh4_up}
+	fmac FR0,fr2,fr1          ;!/* 1111nnnnmmmm1110 fmac FR0,<F_REG_M>,<F_REG_N>*/{"fmac",{F_FR0,F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_E}, arch_sh2e_up}
+	fmov fr2,fr1              ;!/* 1111nnnnmmmm1100 fmov <F_REG_M>,<F_REG_N>*/{"fmov",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_C}, arch_sh2e_up}
+	fmov xd4,xd2              ;!/* 1111nnn1mmmm1100 fmov <DX_REG_M>,<DX_REG_N>*/{"fmov",{DX_REG_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_C}, arch_sh2a_or_sh4_up}
+	fmov @r5,fr1              ;!/* 1111nnnnmmmm1000 fmov @<REG_M>,<F_REG_N>*/{"fmov",{A_IND_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_8}, arch_sh2e_up}
+	fmov @r5,xd2              ;!/* 1111nnn1mmmm1000 fmov @<REG_M>,<DX_REG_N>*/{"fmov",{A_IND_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_8}, arch_sh2a_or_sh4_up}
+	fmov fr2,@r4              ;!/* 1111nnnnmmmm1010 fmov <F_REG_M>,@<REG_N>*/{"fmov",{F_REG_M,A_IND_N},{HEX_F,REG_N,REG_M,HEX_A}, arch_sh2e_up}
+	fmov xd4,@r4              ;!/* 1111nnnnmmm11010 fmov <DX_REG_M>,@<REG_N>*/{"fmov",{DX_REG_M,A_IND_N},{HEX_F,REG_N,REG_M,HEX_A}, arch_sh2a_or_sh4_up}
+	fmov @r5+,fr1             ;!/* 1111nnnnmmmm1001 fmov @<REG_M>+,<F_REG_N>*/{"fmov",{A_INC_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_9}, arch_sh2e_up}
+	fmov @r5+,xd2             ;!/* 1111nnn1mmmm1001 fmov @<REG_M>+,<DX_REG_N>*/{"fmov",{A_INC_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_9}, arch_sh2a_or_sh4_up}
+	fmov fr2,@-r4             ;!/* 1111nnnnmmmm1011 fmov <F_REG_M>,@-<REG_N>*/{"fmov",{F_REG_M,A_DEC_N},{HEX_F,REG_N,REG_M,HEX_B}, arch_sh2e_up}
+	fmov xd4,@-r4             ;!/* 1111nnnnmmm11011 fmov <DX_REG_M>,@-<REG_N>*/{"fmov",{DX_REG_M,A_DEC_N},{HEX_F,REG_N,REG_M,HEX_B}, arch_sh2a_or_sh4_up}
+	fmov @(R0,r5),fr1         ;!/* 1111nnnnmmmm0110 fmov @(R0,<REG_M>),<F_REG_N>*/{"fmov",{A_IND_R0_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_6}, arch_sh2e_up}
+	fmov @(R0,r5),xd2         ;!/* 1111nnn1mmmm0110 fmov @(R0,<REG_M>),<DX_REG_N>*/{"fmov",{A_IND_R0_REG_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_6}, arch_sh2a_or_sh4_up}
+	fmov fr2,@(R0,r4)         ;!/* 1111nnnnmmmm0111 fmov <F_REG_M>,@(R0,<REG_N>)*/{"fmov",{F_REG_M,A_IND_R0_REG_N},{HEX_F,REG_N,REG_M,HEX_7}, arch_sh2e_up}
+	fmov xd4,@(R0,r4)         ;!/* 1111nnnnmmm10111 fmov <DX_REG_M>,@(R0,<REG_N>)*/{"fmov",{DX_REG_M,A_IND_R0_REG_N},{HEX_F,REG_N,REG_M,HEX_7}, arch_sh2a_or_sh4_up}
+	fmov.d @r5,xd2            ;!/* 1111nnn1mmmm1000 fmov.d @<REG_M>,<DX_REG_N>*/{"fmov.d",{A_IND_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_8}, arch_sh2a_or_sh4_up}
+	fmov.d xd4,@r4            ;!/* 1111nnnnmmm11010 fmov.d <DX_REG_M>,@<REG_N>*/{"fmov.d",{DX_REG_M,A_IND_N},{HEX_F,REG_N,REG_M,HEX_A}, arch_sh2a_or_sh4_up}
+	fmov.d @r5+,xd2           ;!/* 1111nnn1mmmm1001 fmov.d @<REG_M>+,<DX_REG_N>*/{"fmov.d",{A_INC_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_9}, arch_sh2a_or_sh4_up}
+	fmov.d xd4,@-r4           ;!/* 1111nnnnmmm11011 fmov.d <DX_REG_M>,@-<REG_N>*/{"fmov.d",{DX_REG_M,A_DEC_N},{HEX_F,REG_N,REG_M,HEX_B}, arch_sh2a_or_sh4_up}
+	fmov.d @(R0,r5),xd2       ;!/* 1111nnn1mmmm0110 fmov.d @(R0,<REG_M>),<DX_REG_N>*/{"fmov.d",{A_IND_R0_REG_M,DX_REG_N},{HEX_F,REG_N,REG_M,HEX_6}, arch_sh2a_or_sh4_up}
+	fmov.d xd4,@(R0,r4)       ;!/* 1111nnnnmmm10111 fmov.d <DX_REG_M>,@(R0,<REG_N>)*/{"fmov.d",{DX_REG_M,A_IND_R0_REG_N},{HEX_F,REG_N,REG_M,HEX_7}, arch_sh2a_or_sh4_up}
+	fmov.s @r5,fr1            ;!/* 1111nnnnmmmm1000 fmov.s @<REG_M>,<F_REG_N>*/{"fmov.s",{A_IND_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_8}, arch_sh2e_up}
+	fmov.s fr2,@r4            ;!/* 1111nnnnmmmm1010 fmov.s <F_REG_M>,@<REG_N>*/{"fmov.s",{F_REG_M,A_IND_N},{HEX_F,REG_N,REG_M,HEX_A}, arch_sh2e_up}
+	fmov.s @r5+,fr1           ;!/* 1111nnnnmmmm1001 fmov.s @<REG_M>+,<F_REG_N>*/{"fmov.s",{A_INC_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_9}, arch_sh2e_up}
+	fmov.s fr2,@-r4           ;!/* 1111nnnnmmmm1011 fmov.s <F_REG_M>,@-<REG_N>*/{"fmov.s",{F_REG_M,A_DEC_N},{HEX_F,REG_N,REG_M,HEX_B}, arch_sh2e_up}
+	fmov.s @(R0,r5),fr1       ;!/* 1111nnnnmmmm0110 fmov.s @(R0,<REG_M>),<F_REG_N>*/{"fmov.s",{A_IND_R0_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_6}, arch_sh2e_up}
+	fmov.s fr2,@(R0,r4)       ;!/* 1111nnnnmmmm0111 fmov.s <F_REG_M>,@(R0,<REG_N>)*/{"fmov.s",{F_REG_M,A_IND_R0_REG_N},{HEX_F,REG_N,REG_M,HEX_7}, arch_sh2e_up}
+	fmul fr2,fr1              ;!/* 1111nnnnmmmm0010 fmul <F_REG_M>,<F_REG_N>*/{"fmul",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_2}, arch_sh2e_up}
+	fmul dr4,dr2              ;!/* 1111nnn0mmm00010 fmul <D_REG_M>,<D_REG_N>*/{"fmul",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_2}, arch_sh2a_or_sh4_up}
+	fneg fr1                  ;!/* 1111nnnn01001101 fneg <F_REG_N>     */{"fneg",{F_REG_N},{HEX_F,REG_N,HEX_4,HEX_D}, arch_sh2e_up}
+	fneg dr2                  ;!/* 1111nnn001001101 fneg <D_REG_N>     */{"fneg",{D_REG_N},{HEX_F,REG_N,HEX_4,HEX_D}, arch_sh2a_or_sh4_up}
+	frchg                     ;!/* 1111101111111101 frchg               */{"frchg",{0},{HEX_F,HEX_B,HEX_F,HEX_D}, arch_sh4_up}
+	fsca FPUL,dr2             ;!/* 1111nnn011111101 fsca FPUL,<D_REG_N> */{"fsca",{FPUL_M,D_REG_N},{HEX_F,REG_N_D,HEX_F,HEX_D}, arch_sh4_up}
+	fschg                     ;!/* 1111001111111101 fschg               */{"fschg",{0},{HEX_F,HEX_3,HEX_F,HEX_D}, arch_sh2a_or_sh4_up}
+	fsqrt fr1                 ;!/* 1111nnnn01101101 fsqrt <F_REG_N>    */{"fsqrt",{F_REG_N},{HEX_F,REG_N,HEX_6,HEX_D}, arch_sh2a_or_sh3e_up}
+	fsqrt dr2                 ;!/* 1111nnn001101101 fsqrt <D_REG_N>    */{"fsqrt",{D_REG_N},{HEX_F,REG_N,HEX_6,HEX_D}, arch_sh2a_or_sh4_up}
+	fsrra fr1                 ;!/* 1111nnnn01111101 fsrra <F_REG_N>    */{"fsrra",{F_REG_N},{HEX_F,REG_N,HEX_7,HEX_D}, arch_sh4_up}
+	fsts FPUL,fr1             ;!/* 1111nnnn00001101 fsts FPUL,<F_REG_N>*/{"fsts",{FPUL_M,F_REG_N},{HEX_F,REG_N,HEX_0,HEX_D}, arch_sh2e_up}
+	fsub fr2,fr1              ;!/* 1111nnnnmmmm0001 fsub <F_REG_M>,<F_REG_N>*/{"fsub",{F_REG_M,F_REG_N},{HEX_F,REG_N,REG_M,HEX_1}, arch_sh2e_up}
+	fsub dr4,dr2              ;!/* 1111nnn0mmm00001 fsub <D_REG_M>,<D_REG_N>*/{"fsub",{D_REG_M,D_REG_N},{HEX_F,REG_N,REG_M,HEX_1}, arch_sh2a_or_sh4_up}
+	ftrc fr1,FPUL             ;!/* 1111nnnn00111101 ftrc <F_REG_N>,FPUL*/{"ftrc",{F_REG_N,FPUL_M},{HEX_F,REG_N,HEX_3,HEX_D}, arch_sh2e_up}
+	ftrc dr2,FPUL             ;!/* 1111nnnn00111101 ftrc <D_REG_N>,FPUL*/{"ftrc",{D_REG_N,FPUL_M},{HEX_F,REG_N,HEX_3,HEX_D}, arch_sh2a_or_sh4_up}
+	ftrv xmtrx,fv0            ;!/* 1111nn0111111101 ftrv XMTRX_M4,<V_REG_n>*/{"ftrv",{XMTRX_M4,V_REG_N},{HEX_F,REG_N_B01,HEX_F,HEX_D}, arch_sh4_up}
Index: binutils/gas/testsuite/gas/sh/arch/arch.exp
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/arch.exp	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/arch/arch.exp	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,5 +1,6 @@
 # Copyright (C) 2004, 2005, 2007, 2008
 # Free Software Foundation, Inc.
+# Copyright (c) 2009 STMicroelectronics.
 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -77,9 +78,9 @@ proc test_arch { file opt arch resultfile } {
     set rootname [file rootname $name]
 
     if [string equal $opt "default-options"] then {
-	gas_run $name "-o ${rootname}-#${opt}#.o" ""
+	gas_run $name "--tas -o ${rootname}-#${opt}#.o" ""
     } else {
-	gas_run $name "$opt -o ${rootname}-#${opt}#.o" ""
+	gas_run $name "$opt --tas -o ${rootname}-#${opt}#.o" ""
     }
 
     if [want_no_output "$rootname file should assemble with $opt"] then {
@@ -112,9 +113,9 @@ proc test_arch_error { file opt resultfile} {
     set rootname [file rootname $name]
 
     if [string equal $opt "default-options"] then {
-	gas_run $name "-o ${rootname}-#${opt}#.o" ""
+	gas_run $name "--tas -o ${rootname}-#${opt}#.o" ""
     } else {
-	gas_run $name "$opt -o ${rootname}-#${opt}#.o" ""
+	gas_run $name "$opt --tas -o ${rootname}-#${opt}#.o" ""
     }
 
     if [string match "" $comp_output] then {
@@ -135,7 +136,7 @@ if [istarget sh*-*-elf] then {
     # Find all the architectures and generate the
     # list of options we will test.
 
-    set filelist [lsort -ascii [glob "$srcdir/$subdir/sh*.s"]]
+    set filelist [lsort -ascii [glob "$srcdir/$subdir/s\[ht]*.s"]]
     set optlist {"default-options" "-dsp" "-isa=any" "-isa=dsp" "-isa=fp"}
     foreach file $filelist {
 	set arch [file rootname [file tail $file]]
@@ -226,7 +227,7 @@ set insncount 0
 # Pull all the insns out of the sh-opc.h file.
 send_log "Reading sh-opc.h\n"
 send_log "========================================================\n"
-spawn -noecho cat "$srcdir/../../opcodes/sh-opc.h"   ;# -open doesn't seem to be reliable
+spawn -noecho -open [open "$srcdir/../../opcodes/sh-opc.h"]
 expect {
     -re {#define\s+arch_([^ ]*)_up\s*\(([^)]*)\)} {
 	set arches($archcount) [string map {_ -} $expect_out(1,string)]
@@ -314,6 +315,8 @@ expect {
     # No match so move to next (possible) comment
     -re {^.+?((?=/\*)|(?=\#\s*define))} exp_continue
 }
+catch "close"
+catch "wait"
 send_log "--------------------------------------------------------\n"
 
 if {$archcount == 0} then {
@@ -498,22 +501,29 @@ close $fd
 
 # Assemble the all_insns.s file for each isa and count how many failures there are
 foreach arch [array names insns_valid] {
-    set errormessages 0
+    set lines {}
     set expected [expr $insncount - $insns_valid($arch)]
 
     # The -Z option ensures that all error messages are output,
     # even those from later phases of assembly (such as offset range errors)
     send_log "$AS -Z -isa=$arch all_insns.s -o /dev/null\n"
-    spawn $AS -Z -isa=$arch all_insns.s -o /dev/null
-    expect Error: {incr errormessages; exp_continue}
+    spawn $AS --tas -Z -isa=$arch all_insns.s -o /dev/null
+    expect -re {:([0-9]+): Error:} {
+	if {[lsearch -exact $lines $expect_out(1,string)] == -1} {
+	    lappend lines $expect_out(1,string)
+	}
+	exp_continue
+    }
+    catch "close"
+    catch "wait"
 
-    if {$errormessages == $expected} then {
+    if {[llength $lines] == $expected} then {
 	pass "$expected insns should not assemble on $arch"
     } else {
 	if {([istarget sh*-*-coff] || [istarget sh*-hms]) && [string match {*dsp} $arch]} {
-	    xfail "$expected insns should not assemble on $arch ($errormessages did not)"
+	    xfail "$expected insns should not assemble on $arch ([llength $lines] did not)"
 	} else {
-	    fail "$expected insns should not assemble on $arch ($errormessages did not)"
+	    fail "$expected insns should not assemble on $arch ([llength $lines] did not)"
 	}
     }
 }
Index: binutils/gas/testsuite/gas/sh/arch/arch_expected.txt
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/arch_expected.txt	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/arch/arch_expected.txt	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -55,6 +55,16 @@ sh-dsp.s             -isa=sh4a                 ERR
 sh-dsp.s             -isa=sh4a-up              ERROR
 sh-dsp.s             -isa=sh4al-dsp            sh4al-dsp
 sh-dsp.s             -isa=sh4al-dsp-up         sh4al-dsp
+sh-dsp.s             -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh-dsp.s             -isa=st40-300-nofpu-or-sh2a-nofpu-up ERROR
+sh-dsp.s             -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh-dsp.s             -isa=st40-300-nofpu-or-sh4a-nofpu-up sh4al-dsp
+sh-dsp.s             -isa=st40-300-nofpu       ERROR
+sh-dsp.s             -isa=st40-300-nofpu-up    ERROR
+sh-dsp.s             -isa=st40-300-or-sh4a     ERROR
+sh-dsp.s             -isa=st40-300-or-sh4a-up  ERROR
+sh-dsp.s             -isa=st40-300             ERROR
+sh-dsp.s             -isa=st40-300-up          ERROR
 sh.s                 default-options           sh
 sh.s                 -dsp                      sh
 sh.s                 -isa=any                  sh
@@ -100,6 +110,16 @@ sh.s                 -isa=sh4a                 sh4
 sh.s                 -isa=sh4a-up              sh4a
 sh.s                 -isa=sh4al-dsp            sh4al-dsp
 sh.s                 -isa=sh4al-dsp-up         sh4al-dsp
+sh.s                 -isa=st40-300-nofpu-or-sh2a-nofpu st40-300-nofpu-or-sh2a-nofpu
+sh.s                 -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu-or-sh2a-nofpu
+sh.s                 -isa=st40-300-nofpu-or-sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu
+sh.s                 -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu-or-sh4a-nofpu
+sh.s                 -isa=st40-300-nofpu       st40-300-nofpu
+sh.s                 -isa=st40-300-nofpu-up    st40-300-nofpu
+sh.s                 -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh.s                 -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh.s                 -isa=st40-300             st40-300
+sh.s                 -isa=st40-300-up          st40-300
 sh2.s                default-options           sh2
 sh2.s                -dsp                      sh2
 sh2.s                -isa=any                  sh2
@@ -145,6 +165,16 @@ sh2.s                -isa=sh4a                 sh4
 sh2.s                -isa=sh4a-up              sh4a
 sh2.s                -isa=sh4al-dsp            sh4al-dsp
 sh2.s                -isa=sh4al-dsp-up         sh4al-dsp
+sh2.s                -isa=st40-300-nofpu-or-sh2a-nofpu st40-300-nofpu-or-sh2a-nofpu
+sh2.s                -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu-or-sh2a-nofpu
+sh2.s                -isa=st40-300-nofpu-or-sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu
+sh2.s                -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu-or-sh4a-nofpu
+sh2.s                -isa=st40-300-nofpu       st40-300-nofpu
+sh2.s                -isa=st40-300-nofpu-up    st40-300-nofpu
+sh2.s                -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh2.s                -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh2.s                -isa=st40-300             st40-300
+sh2.s                -isa=st40-300-up          st40-300
 sh2a-nofpu-or-sh3-nommu.s default-options           sh2a-nofpu-or-sh3-nommu
 sh2a-nofpu-or-sh3-nommu.s -dsp                      sh2a-nofpu-or-sh3-nommu
 sh2a-nofpu-or-sh3-nommu.s -isa=any                  sh2a-nofpu-or-sh3-nommu
@@ -190,6 +220,16 @@ sh2a-nofpu-or-sh3-nommu.s -isa=sh4a
 sh2a-nofpu-or-sh3-nommu.s -isa=sh4a-up              sh4a
 sh2a-nofpu-or-sh3-nommu.s -isa=sh4al-dsp            sh4al-dsp
 sh2a-nofpu-or-sh3-nommu.s -isa=sh4al-dsp-up         sh4al-dsp
+sh2a-nofpu-or-sh3-nommu.s -isa=st40-300-nofpu-or-sh2a-nofpu st40-300-nofpu-or-sh2a-nofpu
+sh2a-nofpu-or-sh3-nommu.s -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu-or-sh2a-nofpu
+sh2a-nofpu-or-sh3-nommu.s -isa=st40-300-nofpu-or-sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu
+sh2a-nofpu-or-sh3-nommu.s -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu-or-sh4a-nofpu
+sh2a-nofpu-or-sh3-nommu.s -isa=st40-300-nofpu       st40-300-nofpu
+sh2a-nofpu-or-sh3-nommu.s -isa=st40-300-nofpu-up    st40-300-nofpu
+sh2a-nofpu-or-sh3-nommu.s -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh2a-nofpu-or-sh3-nommu.s -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh2a-nofpu-or-sh3-nommu.s -isa=st40-300             st40-300
+sh2a-nofpu-or-sh3-nommu.s -isa=st40-300-up          st40-300
 sh2a-nofpu-or-sh4-nommu-nofpu.s default-options           sh2a-nofpu-or-sh4-nommu-nofpu
 sh2a-nofpu-or-sh4-nommu-nofpu.s -dsp                      sh2a-nofpu-or-sh4-nommu-nofpu
 sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=any                  sh2a-nofpu-or-sh4-nommu-nofpu
@@ -235,31 +275,41 @@ sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=sh4a
 sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=sh4a-up              sh4a
 sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=sh4al-dsp            sh4al-dsp
 sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=sh4al-dsp-up         sh4al-dsp
-sh2a-nofpu.s         default-options           sh2a-nofpu
-sh2a-nofpu.s         -dsp                      sh2a-nofpu
-sh2a-nofpu.s         -isa=any                  sh2a-nofpu
-sh2a-nofpu.s         -isa=dsp                  sh2a-nofpu
-sh2a-nofpu.s         -isa=fp                   sh2a-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=st40-300-nofpu-or-sh2a-nofpu st40-300-nofpu-or-sh2a-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu-or-sh2a-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=st40-300-nofpu-or-sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu-or-sh4a-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=st40-300-nofpu       st40-300-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=st40-300-nofpu-up    st40-300-nofpu
+sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=st40-300             st40-300
+sh2a-nofpu-or-sh4-nommu-nofpu.s -isa=st40-300-up          st40-300
+sh2a-nofpu.s         default-options           ERROR
+sh2a-nofpu.s         -dsp                      ERROR
+sh2a-nofpu.s         -isa=any                  ERROR
+sh2a-nofpu.s         -isa=dsp                  ERROR
+sh2a-nofpu.s         -isa=fp                   ERROR
 sh2a-nofpu.s         -isa=sh-dsp               ERROR
 sh2a-nofpu.s         -isa=sh-dsp-up            ERROR
 sh2a-nofpu.s         -isa=sh                   ERROR
-sh2a-nofpu.s         -isa=sh-up                sh2a-nofpu
+sh2a-nofpu.s         -isa=sh-up                ERROR
 sh2a-nofpu.s         -isa=sh2                  ERROR
-sh2a-nofpu.s         -isa=sh2-up               sh2a-nofpu
+sh2a-nofpu.s         -isa=sh2-up               ERROR
 sh2a-nofpu.s         -isa=sh2a-nofpu-or-sh3-nommu ERROR
-sh2a-nofpu.s         -isa=sh2a-nofpu-or-sh3-nommu-up sh2a-nofpu
+sh2a-nofpu.s         -isa=sh2a-nofpu-or-sh3-nommu-up ERROR
 sh2a-nofpu.s         -isa=sh2a-nofpu-or-sh4-nommu-nofpu ERROR
-sh2a-nofpu.s         -isa=sh2a-nofpu-or-sh4-nommu-nofpu-up sh2a-nofpu
-sh2a-nofpu.s         -isa=sh2a-nofpu           sh2a-nofpu
-sh2a-nofpu.s         -isa=sh2a-nofpu-up        sh2a-nofpu
+sh2a-nofpu.s         -isa=sh2a-nofpu-or-sh4-nommu-nofpu-up ERROR
+sh2a-nofpu.s         -isa=sh2a-nofpu           ERROR
+sh2a-nofpu.s         -isa=sh2a-nofpu-up        ERROR
 sh2a-nofpu.s         -isa=sh2a-or-sh3e         ERROR
-sh2a-nofpu.s         -isa=sh2a-or-sh3e-up      sh2a
+sh2a-nofpu.s         -isa=sh2a-or-sh3e-up      ERROR
 sh2a-nofpu.s         -isa=sh2a-or-sh4          ERROR
-sh2a-nofpu.s         -isa=sh2a-or-sh4-up       sh2a
-sh2a-nofpu.s         -isa=sh2a                 sh2a
-sh2a-nofpu.s         -isa=sh2a-up              sh2a
+sh2a-nofpu.s         -isa=sh2a-or-sh4-up       ERROR
+sh2a-nofpu.s         -isa=sh2a                 ERROR
+sh2a-nofpu.s         -isa=sh2a-up              ERROR
 sh2a-nofpu.s         -isa=sh2e                 ERROR
-sh2a-nofpu.s         -isa=sh2e-up              sh2a
+sh2a-nofpu.s         -isa=sh2e-up              ERROR
 sh2a-nofpu.s         -isa=sh3-dsp              ERROR
 sh2a-nofpu.s         -isa=sh3-dsp-up           ERROR
 sh2a-nofpu.s         -isa=sh3-nommu            ERROR
@@ -280,6 +330,16 @@ sh2a-nofpu.s         -isa=sh4a                 ERR
 sh2a-nofpu.s         -isa=sh4a-up              ERROR
 sh2a-nofpu.s         -isa=sh4al-dsp            ERROR
 sh2a-nofpu.s         -isa=sh4al-dsp-up         ERROR
+sh2a-nofpu.s         -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh2a-nofpu.s         -isa=st40-300-nofpu-or-sh2a-nofpu-up ERROR
+sh2a-nofpu.s         -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh2a-nofpu.s         -isa=st40-300-nofpu-or-sh4a-nofpu-up ERROR
+sh2a-nofpu.s         -isa=st40-300-nofpu       ERROR
+sh2a-nofpu.s         -isa=st40-300-nofpu-up    ERROR
+sh2a-nofpu.s         -isa=st40-300-or-sh4a     ERROR
+sh2a-nofpu.s         -isa=st40-300-or-sh4a-up  ERROR
+sh2a-nofpu.s         -isa=st40-300             ERROR
+sh2a-nofpu.s         -isa=st40-300-up          ERROR
 sh2a-or-sh3e.s       default-options           sh2a-or-sh3e
 sh2a-or-sh3e.s       -dsp                      ERROR
 sh2a-or-sh3e.s       -isa=any                  sh2a-or-sh3e
@@ -325,6 +385,16 @@ sh2a-or-sh3e.s       -isa=sh4a                 sh4
 sh2a-or-sh3e.s       -isa=sh4a-up              sh4a
 sh2a-or-sh3e.s       -isa=sh4al-dsp            ERROR
 sh2a-or-sh3e.s       -isa=sh4al-dsp-up         ERROR
+sh2a-or-sh3e.s       -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh2a-or-sh3e.s       -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300
+sh2a-or-sh3e.s       -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh2a-or-sh3e.s       -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-or-sh4a
+sh2a-or-sh3e.s       -isa=st40-300-nofpu       ERROR
+sh2a-or-sh3e.s       -isa=st40-300-nofpu-up    st40-300
+sh2a-or-sh3e.s       -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh2a-or-sh3e.s       -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh2a-or-sh3e.s       -isa=st40-300             st40-300
+sh2a-or-sh3e.s       -isa=st40-300-up          st40-300
 sh2a-or-sh4.s        default-options           sh2a-or-sh4
 sh2a-or-sh4.s        -dsp                      ERROR
 sh2a-or-sh4.s        -isa=any                  sh2a-or-sh4
@@ -370,31 +440,41 @@ sh2a-or-sh4.s        -isa=sh4a                 sh4
 sh2a-or-sh4.s        -isa=sh4a-up              sh4a
 sh2a-or-sh4.s        -isa=sh4al-dsp            ERROR
 sh2a-or-sh4.s        -isa=sh4al-dsp-up         ERROR
-sh2a.s               default-options           sh2a
+sh2a-or-sh4.s        -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh2a-or-sh4.s        -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300
+sh2a-or-sh4.s        -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh2a-or-sh4.s        -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-or-sh4a
+sh2a-or-sh4.s        -isa=st40-300-nofpu       ERROR
+sh2a-or-sh4.s        -isa=st40-300-nofpu-up    st40-300
+sh2a-or-sh4.s        -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh2a-or-sh4.s        -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh2a-or-sh4.s        -isa=st40-300             st40-300
+sh2a-or-sh4.s        -isa=st40-300-up          st40-300
+sh2a.s               default-options           ERROR
 sh2a.s               -dsp                      ERROR
-sh2a.s               -isa=any                  sh2a
+sh2a.s               -isa=any                  ERROR
 sh2a.s               -isa=dsp                  ERROR
-sh2a.s               -isa=fp                   sh2a
+sh2a.s               -isa=fp                   ERROR
 sh2a.s               -isa=sh-dsp               ERROR
 sh2a.s               -isa=sh-dsp-up            ERROR
 sh2a.s               -isa=sh                   ERROR
-sh2a.s               -isa=sh-up                sh2a
+sh2a.s               -isa=sh-up                ERROR
 sh2a.s               -isa=sh2                  ERROR
-sh2a.s               -isa=sh2-up               sh2a
+sh2a.s               -isa=sh2-up               ERROR
 sh2a.s               -isa=sh2a-nofpu-or-sh3-nommu ERROR
-sh2a.s               -isa=sh2a-nofpu-or-sh3-nommu-up sh2a
+sh2a.s               -isa=sh2a-nofpu-or-sh3-nommu-up ERROR
 sh2a.s               -isa=sh2a-nofpu-or-sh4-nommu-nofpu ERROR
-sh2a.s               -isa=sh2a-nofpu-or-sh4-nommu-nofpu-up sh2a
+sh2a.s               -isa=sh2a-nofpu-or-sh4-nommu-nofpu-up ERROR
 sh2a.s               -isa=sh2a-nofpu           ERROR
-sh2a.s               -isa=sh2a-nofpu-up        sh2a
+sh2a.s               -isa=sh2a-nofpu-up        ERROR
 sh2a.s               -isa=sh2a-or-sh3e         ERROR
-sh2a.s               -isa=sh2a-or-sh3e-up      sh2a
+sh2a.s               -isa=sh2a-or-sh3e-up      ERROR
 sh2a.s               -isa=sh2a-or-sh4          ERROR
-sh2a.s               -isa=sh2a-or-sh4-up       sh2a
-sh2a.s               -isa=sh2a                 sh2a
-sh2a.s               -isa=sh2a-up              sh2a
+sh2a.s               -isa=sh2a-or-sh4-up       ERROR
+sh2a.s               -isa=sh2a                 ERROR
+sh2a.s               -isa=sh2a-up              ERROR
 sh2a.s               -isa=sh2e                 ERROR
-sh2a.s               -isa=sh2e-up              sh2a
+sh2a.s               -isa=sh2e-up              ERROR
 sh2a.s               -isa=sh3-dsp              ERROR
 sh2a.s               -isa=sh3-dsp-up           ERROR
 sh2a.s               -isa=sh3-nommu            ERROR
@@ -415,6 +495,16 @@ sh2a.s               -isa=sh4a                 ERR
 sh2a.s               -isa=sh4a-up              ERROR
 sh2a.s               -isa=sh4al-dsp            ERROR
 sh2a.s               -isa=sh4al-dsp-up         ERROR
+sh2a.s               -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh2a.s               -isa=st40-300-nofpu-or-sh2a-nofpu-up ERROR
+sh2a.s               -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh2a.s               -isa=st40-300-nofpu-or-sh4a-nofpu-up ERROR
+sh2a.s               -isa=st40-300-nofpu       ERROR
+sh2a.s               -isa=st40-300-nofpu-up    ERROR
+sh2a.s               -isa=st40-300-or-sh4a     ERROR
+sh2a.s               -isa=st40-300-or-sh4a-up  ERROR
+sh2a.s               -isa=st40-300             ERROR
+sh2a.s               -isa=st40-300-up          ERROR
 sh2e.s               default-options           sh2e
 sh2e.s               -dsp                      ERROR
 sh2e.s               -isa=any                  sh2e
@@ -460,6 +550,16 @@ sh2e.s               -isa=sh4a                 sh4
 sh2e.s               -isa=sh4a-up              sh4a
 sh2e.s               -isa=sh4al-dsp            ERROR
 sh2e.s               -isa=sh4al-dsp-up         ERROR
+sh2e.s               -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh2e.s               -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300
+sh2e.s               -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh2e.s               -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-or-sh4a
+sh2e.s               -isa=st40-300-nofpu       ERROR
+sh2e.s               -isa=st40-300-nofpu-up    st40-300
+sh2e.s               -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh2e.s               -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh2e.s               -isa=st40-300             st40-300
+sh2e.s               -isa=st40-300-up          st40-300
 sh3-dsp.s            default-options           ERROR
 sh3-dsp.s            -dsp                      sh3-dsp
 sh3-dsp.s            -isa=any                  sh3-dsp
@@ -505,6 +605,16 @@ sh3-dsp.s            -isa=sh4a                 ERR
 sh3-dsp.s            -isa=sh4a-up              ERROR
 sh3-dsp.s            -isa=sh4al-dsp            sh4al-dsp
 sh3-dsp.s            -isa=sh4al-dsp-up         sh4al-dsp
+sh3-dsp.s            -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh3-dsp.s            -isa=st40-300-nofpu-or-sh2a-nofpu-up ERROR
+sh3-dsp.s            -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh3-dsp.s            -isa=st40-300-nofpu-or-sh4a-nofpu-up sh4al-dsp
+sh3-dsp.s            -isa=st40-300-nofpu       ERROR
+sh3-dsp.s            -isa=st40-300-nofpu-up    ERROR
+sh3-dsp.s            -isa=st40-300-or-sh4a     ERROR
+sh3-dsp.s            -isa=st40-300-or-sh4a-up  ERROR
+sh3-dsp.s            -isa=st40-300             ERROR
+sh3-dsp.s            -isa=st40-300-up          ERROR
 sh3-nommu.s          default-options           sh3-nommu
 sh3-nommu.s          -dsp                      sh3-nommu
 sh3-nommu.s          -isa=any                  sh3-nommu
@@ -550,6 +660,16 @@ sh3-nommu.s          -isa=sh4a                 sh4
 sh3-nommu.s          -isa=sh4a-up              sh4a
 sh3-nommu.s          -isa=sh4al-dsp            sh4al-dsp
 sh3-nommu.s          -isa=sh4al-dsp-up         sh4al-dsp
+sh3-nommu.s          -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh3-nommu.s          -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu
+sh3-nommu.s          -isa=st40-300-nofpu-or-sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu
+sh3-nommu.s          -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu-or-sh4a-nofpu
+sh3-nommu.s          -isa=st40-300-nofpu       st40-300-nofpu
+sh3-nommu.s          -isa=st40-300-nofpu-up    st40-300-nofpu
+sh3-nommu.s          -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh3-nommu.s          -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh3-nommu.s          -isa=st40-300             st40-300
+sh3-nommu.s          -isa=st40-300-up          st40-300
 sh3.s                default-options           sh3
 sh3.s                -dsp                      sh3
 sh3.s                -isa=any                  sh3
@@ -595,6 +715,16 @@ sh3.s                -isa=sh4a                 sh4
 sh3.s                -isa=sh4a-up              sh4a
 sh3.s                -isa=sh4al-dsp            sh4al-dsp
 sh3.s                -isa=sh4al-dsp-up         sh4al-dsp
+sh3.s                -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh3.s                -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu
+sh3.s                -isa=st40-300-nofpu-or-sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu
+sh3.s                -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu-or-sh4a-nofpu
+sh3.s                -isa=st40-300-nofpu       st40-300-nofpu
+sh3.s                -isa=st40-300-nofpu-up    st40-300-nofpu
+sh3.s                -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh3.s                -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh3.s                -isa=st40-300             st40-300
+sh3.s                -isa=st40-300-up          st40-300
 sh3e.s               default-options           sh3e
 sh3e.s               -dsp                      ERROR
 sh3e.s               -isa=any                  sh3e
@@ -640,6 +770,16 @@ sh3e.s               -isa=sh4a                 sh4
 sh3e.s               -isa=sh4a-up              sh4a
 sh3e.s               -isa=sh4al-dsp            ERROR
 sh3e.s               -isa=sh4al-dsp-up         ERROR
+sh3e.s               -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh3e.s               -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300
+sh3e.s               -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh3e.s               -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-or-sh4a
+sh3e.s               -isa=st40-300-nofpu       ERROR
+sh3e.s               -isa=st40-300-nofpu-up    st40-300
+sh3e.s               -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh3e.s               -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh3e.s               -isa=st40-300             st40-300
+sh3e.s               -isa=st40-300-up          st40-300
 sh4-nofpu.s          default-options           sh4-nofpu
 sh4-nofpu.s          -dsp                      sh4-nofpu
 sh4-nofpu.s          -isa=any                  sh4-nofpu
@@ -685,6 +825,16 @@ sh4-nofpu.s          -isa=sh4a                 sh4
 sh4-nofpu.s          -isa=sh4a-up              sh4a
 sh4-nofpu.s          -isa=sh4al-dsp            sh4al-dsp
 sh4-nofpu.s          -isa=sh4al-dsp-up         sh4al-dsp
+sh4-nofpu.s          -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh4-nofpu.s          -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu
+sh4-nofpu.s          -isa=st40-300-nofpu-or-sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu
+sh4-nofpu.s          -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu-or-sh4a-nofpu
+sh4-nofpu.s          -isa=st40-300-nofpu       st40-300-nofpu
+sh4-nofpu.s          -isa=st40-300-nofpu-up    st40-300-nofpu
+sh4-nofpu.s          -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh4-nofpu.s          -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh4-nofpu.s          -isa=st40-300             st40-300
+sh4-nofpu.s          -isa=st40-300-up          st40-300
 sh4-nommu-nofpu.s    default-options           sh4-nommu-nofpu
 sh4-nommu-nofpu.s    -dsp                      sh4-nommu-nofpu
 sh4-nommu-nofpu.s    -isa=any                  sh4-nommu-nofpu
@@ -730,6 +880,16 @@ sh4-nommu-nofpu.s    -isa=sh4a                 sh4
 sh4-nommu-nofpu.s    -isa=sh4a-up              sh4a
 sh4-nommu-nofpu.s    -isa=sh4al-dsp            sh4al-dsp
 sh4-nommu-nofpu.s    -isa=sh4al-dsp-up         sh4al-dsp
+sh4-nommu-nofpu.s    -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh4-nommu-nofpu.s    -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu
+sh4-nommu-nofpu.s    -isa=st40-300-nofpu-or-sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu
+sh4-nommu-nofpu.s    -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu-or-sh4a-nofpu
+sh4-nommu-nofpu.s    -isa=st40-300-nofpu       st40-300-nofpu
+sh4-nommu-nofpu.s    -isa=st40-300-nofpu-up    st40-300-nofpu
+sh4-nommu-nofpu.s    -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh4-nommu-nofpu.s    -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh4-nommu-nofpu.s    -isa=st40-300             st40-300
+sh4-nommu-nofpu.s    -isa=st40-300-up          st40-300
 sh4.s                default-options           sh4
 sh4.s                -dsp                      ERROR
 sh4.s                -isa=any                  sh4
@@ -775,6 +935,16 @@ sh4.s                -isa=sh4a                 sh4
 sh4.s                -isa=sh4a-up              sh4a
 sh4.s                -isa=sh4al-dsp            ERROR
 sh4.s                -isa=sh4al-dsp-up         ERROR
+sh4.s                -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh4.s                -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300
+sh4.s                -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh4.s                -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-or-sh4a
+sh4.s                -isa=st40-300-nofpu       ERROR
+sh4.s                -isa=st40-300-nofpu-up    st40-300
+sh4.s                -isa=st40-300-or-sh4a     st40-300-or-sh4a
+sh4.s                -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+sh4.s                -isa=st40-300             st40-300
+sh4.s                -isa=st40-300-up          st40-300
 sh4a-nofpu.s         default-options           sh4a-nofpu
 sh4a-nofpu.s         -dsp                      sh4a-nofpu
 sh4a-nofpu.s         -isa=any                  sh4a-nofpu
@@ -820,6 +990,16 @@ sh4a-nofpu.s         -isa=sh4a                 sh4
 sh4a-nofpu.s         -isa=sh4a-up              sh4a
 sh4a-nofpu.s         -isa=sh4al-dsp            sh4al-dsp
 sh4a-nofpu.s         -isa=sh4al-dsp-up         sh4al-dsp
+sh4a-nofpu.s         -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh4a-nofpu.s         -isa=st40-300-nofpu-or-sh2a-nofpu-up ERROR
+sh4a-nofpu.s         -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh4a-nofpu.s         -isa=st40-300-nofpu-or-sh4a-nofpu-up sh4a-nofpu
+sh4a-nofpu.s         -isa=st40-300-nofpu       ERROR
+sh4a-nofpu.s         -isa=st40-300-nofpu-up    ERROR
+sh4a-nofpu.s         -isa=st40-300-or-sh4a     ERROR
+sh4a-nofpu.s         -isa=st40-300-or-sh4a-up  sh4a
+sh4a-nofpu.s         -isa=st40-300             ERROR
+sh4a-nofpu.s         -isa=st40-300-up          ERROR
 sh4a.s               default-options           sh4a
 sh4a.s               -dsp                      ERROR
 sh4a.s               -isa=any                  sh4a
@@ -865,6 +1045,16 @@ sh4a.s               -isa=sh4a                 sh4
 sh4a.s               -isa=sh4a-up              sh4a
 sh4a.s               -isa=sh4al-dsp            ERROR
 sh4a.s               -isa=sh4al-dsp-up         ERROR
+sh4a.s               -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh4a.s               -isa=st40-300-nofpu-or-sh2a-nofpu-up ERROR
+sh4a.s               -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh4a.s               -isa=st40-300-nofpu-or-sh4a-nofpu-up sh4a
+sh4a.s               -isa=st40-300-nofpu       ERROR
+sh4a.s               -isa=st40-300-nofpu-up    ERROR
+sh4a.s               -isa=st40-300-or-sh4a     ERROR
+sh4a.s               -isa=st40-300-or-sh4a-up  sh4a
+sh4a.s               -isa=st40-300             ERROR
+sh4a.s               -isa=st40-300-up          ERROR
 sh4al-dsp.s          default-options           ERROR
 sh4al-dsp.s          -dsp                      sh4al-dsp
 sh4al-dsp.s          -isa=any                  sh4al-dsp
@@ -910,3 +1100,288 @@ sh4al-dsp.s          -isa=sh4a                 ERR
 sh4al-dsp.s          -isa=sh4a-up              ERROR
 sh4al-dsp.s          -isa=sh4al-dsp            sh4al-dsp
 sh4al-dsp.s          -isa=sh4al-dsp-up         sh4al-dsp
+sh4al-dsp.s          -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+sh4al-dsp.s          -isa=st40-300-nofpu-or-sh2a-nofpu-up ERROR
+sh4al-dsp.s          -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+sh4al-dsp.s          -isa=st40-300-nofpu-or-sh4a-nofpu-up sh4al-dsp
+sh4al-dsp.s          -isa=st40-300-nofpu       ERROR
+sh4al-dsp.s          -isa=st40-300-nofpu-up    ERROR
+sh4al-dsp.s          -isa=st40-300-or-sh4a     ERROR
+sh4al-dsp.s          -isa=st40-300-or-sh4a-up  ERROR
+sh4al-dsp.s          -isa=st40-300             ERROR
+sh4al-dsp.s          -isa=st40-300-up          ERROR
+st40-300-nofpu-or-sh2a-nofpu.s default-options           st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -dsp                      st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=any                  st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=dsp                  st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=fp                   st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh-dsp               ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh-dsp-up            ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh                   ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh-up                st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2                  ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2-up               st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-nofpu-or-sh3-nommu ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-nofpu-or-sh3-nommu-up st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-nofpu-or-sh4-nommu-nofpu ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-nofpu-or-sh4-nommu-nofpu-up st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-nofpu           sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-nofpu-up        sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-or-sh3e         ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-or-sh3e-up      st40-300
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-or-sh4          ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-or-sh4-up       st40-300
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a                 sh2a
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2a-up              sh2a
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2e                 ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh2e-up              st40-300
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh3-dsp              ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh3-dsp-up           ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh3-nommu            ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh3-nommu-up         st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh3                  ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh3-up               st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh3e                 ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh3e-up              st40-300
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4-nofpu            ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4-nofpu-up         st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4-nommu-nofpu      ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4-nommu-nofpu-up   st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4                  ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4-up               st40-300
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4a-nofpu           ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4a-nofpu-up        ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4a                 ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4a-up              ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4al-dsp            ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=sh4al-dsp-up         ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=st40-300-nofpu-or-sh2a-nofpu st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu-or-sh2a-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=st40-300-nofpu       st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=st40-300-nofpu-up    st40-300-nofpu
+st40-300-nofpu-or-sh2a-nofpu.s -isa=st40-300-or-sh4a     ERROR
+st40-300-nofpu-or-sh2a-nofpu.s -isa=st40-300-or-sh4a-up  st40-300
+st40-300-nofpu-or-sh2a-nofpu.s -isa=st40-300             st40-300
+st40-300-nofpu-or-sh2a-nofpu.s -isa=st40-300-up          st40-300
+st40-300-nofpu-or-sh4a-nofpu.s default-options           st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -dsp                      st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=any                  st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=dsp                  st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=fp                   st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh-dsp               ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh-dsp-up            sh4al-dsp
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh                   ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh-up                st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2                  ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2-up               st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-nofpu-or-sh3-nommu ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-nofpu-or-sh3-nommu-up st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-nofpu-or-sh4-nommu-nofpu ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-nofpu-or-sh4-nommu-nofpu-up st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-nofpu           ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-nofpu-up        ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-or-sh3e         ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-or-sh3e-up      st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-or-sh4          ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-or-sh4-up       st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a                 ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2a-up              ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2e                 ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh2e-up              st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh3-dsp              ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh3-dsp-up           sh4al-dsp
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh3-nommu            ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh3-nommu-up         st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh3                  ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh3-up               st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh3e                 ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh3e-up              st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4-nofpu            ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4-nofpu-up         st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4-nommu-nofpu      ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4-nommu-nofpu-up   st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4                  ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4-up               st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4a-nofpu           sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4a-nofpu-up        sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4a                 sh4a
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4a-up              sh4a
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4al-dsp            sh4al-dsp
+st40-300-nofpu-or-sh4a-nofpu.s -isa=sh4al-dsp-up         sh4al-dsp
+st40-300-nofpu-or-sh4a-nofpu.s -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+st40-300-nofpu-or-sh4a-nofpu.s -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=st40-300-nofpu-or-sh4a-nofpu st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu-or-sh4a-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=st40-300-nofpu       st40-300-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=st40-300-nofpu-up    st40-300-nofpu
+st40-300-nofpu-or-sh4a-nofpu.s -isa=st40-300-or-sh4a     st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.s -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+st40-300-nofpu-or-sh4a-nofpu.s -isa=st40-300             st40-300
+st40-300-nofpu-or-sh4a-nofpu.s -isa=st40-300-up          st40-300
+st40-300-nofpu.s     default-options           st40-300-nofpu
+st40-300-nofpu.s     -dsp                      st40-300-nofpu
+st40-300-nofpu.s     -isa=any                  st40-300-nofpu
+st40-300-nofpu.s     -isa=dsp                  st40-300-nofpu
+st40-300-nofpu.s     -isa=fp                   st40-300-nofpu
+st40-300-nofpu.s     -isa=sh-dsp               ERROR
+st40-300-nofpu.s     -isa=sh-dsp-up            ERROR
+st40-300-nofpu.s     -isa=sh                   ERROR
+st40-300-nofpu.s     -isa=sh-up                st40-300-nofpu
+st40-300-nofpu.s     -isa=sh2                  ERROR
+st40-300-nofpu.s     -isa=sh2-up               st40-300-nofpu
+st40-300-nofpu.s     -isa=sh2a-nofpu-or-sh3-nommu ERROR
+st40-300-nofpu.s     -isa=sh2a-nofpu-or-sh3-nommu-up st40-300-nofpu
+st40-300-nofpu.s     -isa=sh2a-nofpu-or-sh4-nommu-nofpu ERROR
+st40-300-nofpu.s     -isa=sh2a-nofpu-or-sh4-nommu-nofpu-up st40-300-nofpu
+st40-300-nofpu.s     -isa=sh2a-nofpu           ERROR
+st40-300-nofpu.s     -isa=sh2a-nofpu-up        ERROR
+st40-300-nofpu.s     -isa=sh2a-or-sh3e         ERROR
+st40-300-nofpu.s     -isa=sh2a-or-sh3e-up      st40-300
+st40-300-nofpu.s     -isa=sh2a-or-sh4          ERROR
+st40-300-nofpu.s     -isa=sh2a-or-sh4-up       st40-300
+st40-300-nofpu.s     -isa=sh2a                 ERROR
+st40-300-nofpu.s     -isa=sh2a-up              ERROR
+st40-300-nofpu.s     -isa=sh2e                 ERROR
+st40-300-nofpu.s     -isa=sh2e-up              st40-300
+st40-300-nofpu.s     -isa=sh3-dsp              ERROR
+st40-300-nofpu.s     -isa=sh3-dsp-up           ERROR
+st40-300-nofpu.s     -isa=sh3-nommu            ERROR
+st40-300-nofpu.s     -isa=sh3-nommu-up         st40-300-nofpu
+st40-300-nofpu.s     -isa=sh3                  ERROR
+st40-300-nofpu.s     -isa=sh3-up               st40-300-nofpu
+st40-300-nofpu.s     -isa=sh3e                 ERROR
+st40-300-nofpu.s     -isa=sh3e-up              st40-300
+st40-300-nofpu.s     -isa=sh4-nofpu            ERROR
+st40-300-nofpu.s     -isa=sh4-nofpu-up         st40-300-nofpu
+st40-300-nofpu.s     -isa=sh4-nommu-nofpu      ERROR
+st40-300-nofpu.s     -isa=sh4-nommu-nofpu-up   st40-300-nofpu
+st40-300-nofpu.s     -isa=sh4                  ERROR
+st40-300-nofpu.s     -isa=sh4-up               st40-300
+st40-300-nofpu.s     -isa=sh4a-nofpu           ERROR
+st40-300-nofpu.s     -isa=sh4a-nofpu-up        ERROR
+st40-300-nofpu.s     -isa=sh4a                 ERROR
+st40-300-nofpu.s     -isa=sh4a-up              ERROR
+st40-300-nofpu.s     -isa=sh4al-dsp            ERROR
+st40-300-nofpu.s     -isa=sh4al-dsp-up         ERROR
+st40-300-nofpu.s     -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+st40-300-nofpu.s     -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300-nofpu
+st40-300-nofpu.s     -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+st40-300-nofpu.s     -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-nofpu
+st40-300-nofpu.s     -isa=st40-300-nofpu       st40-300-nofpu
+st40-300-nofpu.s     -isa=st40-300-nofpu-up    st40-300-nofpu
+st40-300-nofpu.s     -isa=st40-300-or-sh4a     ERROR
+st40-300-nofpu.s     -isa=st40-300-or-sh4a-up  st40-300
+st40-300-nofpu.s     -isa=st40-300             st40-300
+st40-300-nofpu.s     -isa=st40-300-up          st40-300
+st40-300-or-sh4a.s   default-options           st40-300-or-sh4a
+st40-300-or-sh4a.s   -dsp                      ERROR
+st40-300-or-sh4a.s   -isa=any                  st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=dsp                  ERROR
+st40-300-or-sh4a.s   -isa=fp                   st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh-dsp               ERROR
+st40-300-or-sh4a.s   -isa=sh-dsp-up            ERROR
+st40-300-or-sh4a.s   -isa=sh                   ERROR
+st40-300-or-sh4a.s   -isa=sh-up                st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh2                  ERROR
+st40-300-or-sh4a.s   -isa=sh2-up               st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh2a-nofpu-or-sh3-nommu ERROR
+st40-300-or-sh4a.s   -isa=sh2a-nofpu-or-sh3-nommu-up st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh2a-nofpu-or-sh4-nommu-nofpu ERROR
+st40-300-or-sh4a.s   -isa=sh2a-nofpu-or-sh4-nommu-nofpu-up st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh2a-nofpu           ERROR
+st40-300-or-sh4a.s   -isa=sh2a-nofpu-up        ERROR
+st40-300-or-sh4a.s   -isa=sh2a-or-sh3e         ERROR
+st40-300-or-sh4a.s   -isa=sh2a-or-sh3e-up      st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh2a-or-sh4          ERROR
+st40-300-or-sh4a.s   -isa=sh2a-or-sh4-up       st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh2a                 ERROR
+st40-300-or-sh4a.s   -isa=sh2a-up              ERROR
+st40-300-or-sh4a.s   -isa=sh2e                 ERROR
+st40-300-or-sh4a.s   -isa=sh2e-up              st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh3-dsp              ERROR
+st40-300-or-sh4a.s   -isa=sh3-dsp-up           ERROR
+st40-300-or-sh4a.s   -isa=sh3-nommu            ERROR
+st40-300-or-sh4a.s   -isa=sh3-nommu-up         st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh3                  ERROR
+st40-300-or-sh4a.s   -isa=sh3-up               st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh3e                 ERROR
+st40-300-or-sh4a.s   -isa=sh3e-up              st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh4-nofpu            ERROR
+st40-300-or-sh4a.s   -isa=sh4-nofpu-up         st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh4-nommu-nofpu      ERROR
+st40-300-or-sh4a.s   -isa=sh4-nommu-nofpu-up   st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh4                  ERROR
+st40-300-or-sh4a.s   -isa=sh4-up               st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=sh4a-nofpu           ERROR
+st40-300-or-sh4a.s   -isa=sh4a-nofpu-up        sh4a
+st40-300-or-sh4a.s   -isa=sh4a                 sh4a
+st40-300-or-sh4a.s   -isa=sh4a-up              sh4a
+st40-300-or-sh4a.s   -isa=sh4al-dsp            ERROR
+st40-300-or-sh4a.s   -isa=sh4al-dsp-up         ERROR
+st40-300-or-sh4a.s   -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+st40-300-or-sh4a.s   -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300
+st40-300-or-sh4a.s   -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+st40-300-or-sh4a.s   -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=st40-300-nofpu       ERROR
+st40-300-or-sh4a.s   -isa=st40-300-nofpu-up    st40-300
+st40-300-or-sh4a.s   -isa=st40-300-or-sh4a     st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=st40-300-or-sh4a-up  st40-300-or-sh4a
+st40-300-or-sh4a.s   -isa=st40-300             st40-300
+st40-300-or-sh4a.s   -isa=st40-300-up          st40-300
+st40-300.s           default-options           st40-300
+st40-300.s           -dsp                      ERROR
+st40-300.s           -isa=any                  st40-300
+st40-300.s           -isa=dsp                  ERROR
+st40-300.s           -isa=fp                   st40-300
+st40-300.s           -isa=sh-dsp               ERROR
+st40-300.s           -isa=sh-dsp-up            ERROR
+st40-300.s           -isa=sh                   ERROR
+st40-300.s           -isa=sh-up                st40-300
+st40-300.s           -isa=sh2                  ERROR
+st40-300.s           -isa=sh2-up               st40-300
+st40-300.s           -isa=sh2a-nofpu-or-sh3-nommu ERROR
+st40-300.s           -isa=sh2a-nofpu-or-sh3-nommu-up st40-300
+st40-300.s           -isa=sh2a-nofpu-or-sh4-nommu-nofpu ERROR
+st40-300.s           -isa=sh2a-nofpu-or-sh4-nommu-nofpu-up st40-300
+st40-300.s           -isa=sh2a-nofpu           ERROR
+st40-300.s           -isa=sh2a-nofpu-up        ERROR
+st40-300.s           -isa=sh2a-or-sh3e         ERROR
+st40-300.s           -isa=sh2a-or-sh3e-up      st40-300
+st40-300.s           -isa=sh2a-or-sh4          ERROR
+st40-300.s           -isa=sh2a-or-sh4-up       st40-300
+st40-300.s           -isa=sh2a                 ERROR
+st40-300.s           -isa=sh2a-up              ERROR
+st40-300.s           -isa=sh2e                 ERROR
+st40-300.s           -isa=sh2e-up              st40-300
+st40-300.s           -isa=sh3-dsp              ERROR
+st40-300.s           -isa=sh3-dsp-up           ERROR
+st40-300.s           -isa=sh3-nommu            ERROR
+st40-300.s           -isa=sh3-nommu-up         st40-300
+st40-300.s           -isa=sh3                  ERROR
+st40-300.s           -isa=sh3-up               st40-300
+st40-300.s           -isa=sh3e                 ERROR
+st40-300.s           -isa=sh3e-up              st40-300
+st40-300.s           -isa=sh4-nofpu            ERROR
+st40-300.s           -isa=sh4-nofpu-up         st40-300
+st40-300.s           -isa=sh4-nommu-nofpu      ERROR
+st40-300.s           -isa=sh4-nommu-nofpu-up   st40-300
+st40-300.s           -isa=sh4                  ERROR
+st40-300.s           -isa=sh4-up               st40-300
+st40-300.s           -isa=sh4a-nofpu           ERROR
+st40-300.s           -isa=sh4a-nofpu-up        ERROR
+st40-300.s           -isa=sh4a                 ERROR
+st40-300.s           -isa=sh4a-up              ERROR
+st40-300.s           -isa=sh4al-dsp            ERROR
+st40-300.s           -isa=sh4al-dsp-up         ERROR
+st40-300.s           -isa=st40-300-nofpu-or-sh2a-nofpu ERROR
+st40-300.s           -isa=st40-300-nofpu-or-sh2a-nofpu-up st40-300
+st40-300.s           -isa=st40-300-nofpu-or-sh4a-nofpu ERROR
+st40-300.s           -isa=st40-300-nofpu-or-sh4a-nofpu-up st40-300
+st40-300.s           -isa=st40-300-nofpu       ERROR
+st40-300.s           -isa=st40-300-nofpu-up    st40-300
+st40-300.s           -isa=st40-300-or-sh4a     ERROR
+st40-300.s           -isa=st40-300-or-sh4a-up  st40-300
+st40-300.s           -isa=st40-300             st40-300
+st40-300.s           -isa=st40-300-up          st40-300
Index: binutils/gas/testsuite/gas/sh/arch/st40-300-nofpu-or-sh2a-nofpu.s
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/arch/st40-300-nofpu-or-sh2a-nofpu.s	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/gas/testsuite/gas/sh/arch/st40-300-nofpu-or-sh2a-nofpu.s	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,170 @@
+! Generated file. DO NOT EDIT.
+!
+! This file was generated by gas/testsuite/gas/sh/arch/arch.exp .
+! This file should contain every instruction valid on
+! architecture st40-300-nofpu-or-sh2a-nofpu but no more.
+! If the tests are failing because the expected results
+! have changed then run 'make check' and copy the new file
+! from <objdir>/gas/testsuite/st40-300-nofpu-or-sh2a-nofpu.s
+! to   <srcdir>/gas/testsuite/gas/sh/arch/st40-300-nofpu-or-sh2a-nofpu.s .
+! Make sure there are no unexpected or missing instructions.
+
+	.section .text
+st40_300_nofpu_or_sh2a_nofpu:
+! Instructions introduced into st40-300-nofpu-or-sh2a-nofpu
+	mulr R0,r4                ;!/* 0100nnnn10000000 mulr R0,<REG_N> */       {"mulr",{A_R0,A_REG_N},{HEX_4,REG_N,HEX_8,HEX_0}, arch_st40_300_nofpu_or_sh2a_nofpu_up}
+
+! Instructions inherited from ancestors: sh sh2 sh2a-nofpu-or-sh3-nommu sh2a-nofpu-or-sh4-nommu-nofpu
+	add #4,r4                 ;!/* 0111nnnni8*1.... add #<imm>,<REG_N>  */{"add",{A_IMM,A_REG_N},{HEX_7,REG_N,IMM0_8}, arch_sh_up}
+	add r5,r4                 ;!/* 0011nnnnmmmm1100 add <REG_M>,<REG_N> */{"add",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_C}, arch_sh_up}
+	addc r5,r4                ;!/* 0011nnnnmmmm1110 addc <REG_M>,<REG_N>*/{"addc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_E}, arch_sh_up}
+	addv r5,r4                ;!/* 0011nnnnmmmm1111 addv <REG_M>,<REG_N>*/{"addv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_F}, arch_sh_up}
+	and #4,R0                 ;!/* 11001001i8*1.... and #<imm>,R0       */{"and",{A_IMM,A_R0},{HEX_C,HEX_9,IMM0_8}, arch_sh_up}
+	and r5,r4                 ;!/* 0010nnnnmmmm1001 and <REG_M>,<REG_N> */{"and",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_9}, arch_sh_up}
+	and.b #4,@(R0,GBR)        ;!/* 11001101i8*1.... and.b #<imm>,@(R0,GBR)*/{"and.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_D,IMM0_8}, arch_sh_up}
+	bra .+8                   ;!/* 1010i12......... bra <bdisp12>       */{"bra",{A_BDISP12},{HEX_A,BRANCH_12}, arch_sh_up}
+	bsr .+8                   ;!/* 1011i12......... bsr <bdisp12>       */{"bsr",{A_BDISP12},{HEX_B,BRANCH_12}, arch_sh_up}
+	bt .+8                    ;!/* 10001001i8p1.... bt <bdisp8>         */{"bt",{A_BDISP8},{HEX_8,HEX_9,BRANCH_8}, arch_sh_up}
+	bf .+8                    ;!/* 10001011i8p1.... bf <bdisp8>         */{"bf",{A_BDISP8},{HEX_8,HEX_B,BRANCH_8}, arch_sh_up}
+	bt.s .+8                  ;!/* 10001101i8p1.... bt.s <bdisp8>       */{"bt.s",{A_BDISP8},{HEX_8,HEX_D,BRANCH_8}, arch_sh2_up}
+	bt/s .+8                  ;!/* 10001101i8p1.... bt/s <bdisp8>       */{"bt/s",{A_BDISP8},{HEX_8,HEX_D,BRANCH_8}, arch_sh2_up}
+	bf.s .+8                  ;!/* 10001111i8p1.... bf.s <bdisp8>       */{"bf.s",{A_BDISP8},{HEX_8,HEX_F,BRANCH_8}, arch_sh2_up}
+	bf/s .+8                  ;!/* 10001111i8p1.... bf/s <bdisp8>       */{"bf/s",{A_BDISP8},{HEX_8,HEX_F,BRANCH_8}, arch_sh2_up}
+	clrmac                    ;!/* 0000000000101000 clrmac              */{"clrmac",{0},{HEX_0,HEX_0,HEX_2,HEX_8}, arch_sh_up}
+	clrs                      ;!/* 0000000001001000 clrs                */{"clrs",{0},{HEX_0,HEX_0,HEX_4,HEX_8}, arch_sh_up}
+	clrt                      ;!/* 0000000000001000 clrt                */{"clrt",{0},{HEX_0,HEX_0,HEX_0,HEX_8}, arch_sh_up}
+	cmp/eq #4,R0              ;!/* 10001000i8*1.... cmp/eq #<imm>,R0    */{"cmp/eq",{A_IMM,A_R0},{HEX_8,HEX_8,IMM0_8}, arch_sh_up}
+	cmp/eq r5,r4              ;!/* 0011nnnnmmmm0000 cmp/eq <REG_M>,<REG_N>*/{"cmp/eq",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_0}, arch_sh_up}
+	cmp/ge r5,r4              ;!/* 0011nnnnmmmm0011 cmp/ge <REG_M>,<REG_N>*/{"cmp/ge",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_3}, arch_sh_up}
+	cmp/gt r5,r4              ;!/* 0011nnnnmmmm0111 cmp/gt <REG_M>,<REG_N>*/{"cmp/gt",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_7}, arch_sh_up}
+	cmp/hi r5,r4              ;!/* 0011nnnnmmmm0110 cmp/hi <REG_M>,<REG_N>*/{"cmp/hi",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_6}, arch_sh_up}
+	cmp/hs r5,r4              ;!/* 0011nnnnmmmm0010 cmp/hs <REG_M>,<REG_N>*/{"cmp/hs",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_2}, arch_sh_up}
+	cmp/pl r4                 ;!/* 0100nnnn00010101 cmp/pl <REG_N>      */{"cmp/pl",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_5}, arch_sh_up}
+	cmp/pz r4                 ;!/* 0100nnnn00010001 cmp/pz <REG_N>      */{"cmp/pz",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_1}, arch_sh_up}
+	cmp/str r5,r4             ;!/* 0010nnnnmmmm1100 cmp/str <REG_M>,<REG_N>*/{"cmp/str",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_C}, arch_sh_up}
+	div0s r5,r4               ;!/* 0010nnnnmmmm0111 div0s <REG_M>,<REG_N>*/{"div0s",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_7}, arch_sh_up}
+	div0u                     ;!/* 0000000000011001 div0u               */{"div0u",{0},{HEX_0,HEX_0,HEX_1,HEX_9}, arch_sh_up}
+	div1 r5,r4                ;!/* 0011nnnnmmmm0100 div1 <REG_M>,<REG_N>*/{"div1",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_4}, arch_sh_up}
+	exts.b r5,r4              ;!/* 0110nnnnmmmm1110 exts.b <REG_M>,<REG_N>*/{"exts.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_E}, arch_sh_up}
+	exts.w r5,r4              ;!/* 0110nnnnmmmm1111 exts.w <REG_M>,<REG_N>*/{"exts.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_F}, arch_sh_up}
+	extu.b r5,r4              ;!/* 0110nnnnmmmm1100 extu.b <REG_M>,<REG_N>*/{"extu.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_C}, arch_sh_up}
+	extu.w r5,r4              ;!/* 0110nnnnmmmm1101 extu.w <REG_M>,<REG_N>*/{"extu.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_D}, arch_sh_up}
+	jmp @r4                   ;!/* 0100nnnn00101011 jmp @<REG_N>        */{"jmp",{A_IND_N},{HEX_4,REG_N,HEX_2,HEX_B}, arch_sh_up}
+	jsr @r4                   ;!/* 0100nnnn00001011 jsr @<REG_N>        */{"jsr",{A_IND_N},{HEX_4,REG_N,HEX_0,HEX_B}, arch_sh_up}
+	ldc r4,SR                 ;!/* 0100nnnn00001110 ldc <REG_N>,SR      */{"ldc",{A_REG_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_E}, arch_sh_up}
+	ldc r4,GBR                ;!/* 0100nnnn00011110 ldc <REG_N>,GBR     */{"ldc",{A_REG_N,A_GBR},{HEX_4,REG_N,HEX_1,HEX_E}, arch_sh_up}
+	ldc r4,VBR                ;!/* 0100nnnn00101110 ldc <REG_N>,VBR     */{"ldc",{A_REG_N,A_VBR},{HEX_4,REG_N,HEX_2,HEX_E}, arch_sh_up}
+	ldc.l @r4+,SR             ;!/* 0100nnnn00000111 ldc.l @<REG_N>+,SR  */{"ldc.l",{A_INC_N,A_SR},{HEX_4,REG_N,HEX_0,HEX_7}, arch_sh_up}
+	ldc.l @r4+,GBR            ;!/* 0100nnnn00010111 ldc.l @<REG_N>+,GBR */{"ldc.l",{A_INC_N,A_GBR},{HEX_4,REG_N,HEX_1,HEX_7}, arch_sh_up}
+	ldc.l @r4+,VBR            ;!/* 0100nnnn00100111 ldc.l @<REG_N>+,VBR */{"ldc.l",{A_INC_N,A_VBR},{HEX_4,REG_N,HEX_2,HEX_7}, arch_sh_up}
+	lds r4,MACH               ;!/* 0100nnnn00001010 lds <REG_N>,MACH    */{"lds",{A_REG_N,A_MACH},{HEX_4,REG_N,HEX_0,HEX_A}, arch_sh_up}
+	lds r4,MACL               ;!/* 0100nnnn00011010 lds <REG_N>,MACL    */{"lds",{A_REG_N,A_MACL},{HEX_4,REG_N,HEX_1,HEX_A}, arch_sh_up}
+	lds r4,PR                 ;!/* 0100nnnn00101010 lds <REG_N>,PR      */{"lds",{A_REG_N,A_PR},{HEX_4,REG_N,HEX_2,HEX_A}, arch_sh_up}
+	lds.l @r4+,MACH           ;!/* 0100nnnn00000110 lds.l @<REG_N>+,MACH*/{"lds.l",{A_INC_N,A_MACH},{HEX_4,REG_N,HEX_0,HEX_6}, arch_sh_up}
+	lds.l @r4+,MACL           ;!/* 0100nnnn00010110 lds.l @<REG_N>+,MACL*/{"lds.l",{A_INC_N,A_MACL},{HEX_4,REG_N,HEX_1,HEX_6}, arch_sh_up}
+	lds.l @r4+,PR             ;!/* 0100nnnn00100110 lds.l @<REG_N>+,PR  */{"lds.l",{A_INC_N,A_PR},{HEX_4,REG_N,HEX_2,HEX_6}, arch_sh_up}
+	mac.w @r5+,@r4+           ;!/* 0100nnnnmmmm1111 mac.w @<REG_M>+,@<REG_N>+*/{"mac.w",{A_INC_M,A_INC_N},{HEX_4,REG_N,REG_M,HEX_F}, arch_sh_up}
+	mov #4,r4                 ;!/* 1110nnnni8*1.... mov #<imm>,<REG_N>  */{"mov",{A_IMM,A_REG_N},{HEX_E,REG_N,IMM0_8}, arch_sh_up}
+	mov r5,r4                 ;!/* 0110nnnnmmmm0011 mov <REG_M>,<REG_N> */{"mov",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_3}, arch_sh_up}
+	mov.b r5,@(R0,r4)         ;!/* 0000nnnnmmmm0100 mov.b <REG_M>,@(R0,<REG_N>)*/{"mov.b",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b r5,@-r4             ;!/* 0010nnnnmmmm0100 mov.b <REG_M>,@-<REG_N>*/{"mov.b",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b r5,@r4              ;!/* 0010nnnnmmmm0000 mov.b <REG_M>,@<REG_N>*/{"mov.b",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_0}, arch_sh_up}
+	mov.b @(8,r5),R0          ;!/* 10000100mmmmi4*1 mov.b @(<disp>,<REG_M>),R0*/{"mov.b",{A_DISP_REG_M,A_R0},{HEX_8,HEX_4,REG_M,IMM0_4}, arch_sh_up}
+	mov.b @(8,GBR),R0         ;!/* 11000100i8*1.... mov.b @(<disp>,GBR),R0*/{"mov.b",{A_DISP_GBR,A_R0},{HEX_C,HEX_4,IMM0_8}, arch_sh_up}
+	mov.b @(R0,r5),r4         ;!/* 0000nnnnmmmm1100 mov.b @(R0,<REG_M>),<REG_N>*/{"mov.b",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_C}, arch_sh_up}
+	mov.b @r5+,r4             ;!/* 0110nnnnmmmm0100 mov.b @<REG_M>+,<REG_N>*/{"mov.b",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_4}, arch_sh_up}
+	mov.b @r5,r4              ;!/* 0110nnnnmmmm0000 mov.b @<REG_M>,<REG_N>*/{"mov.b",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_0}, arch_sh_up}
+	mov.b R0,@(8,r5)          ;!/* 10000000mmmmi4*1 mov.b R0,@(<disp>,<REG_M>)*/{"mov.b",{A_R0,A_DISP_REG_M},{HEX_8,HEX_0,REG_M,IMM1_4}, arch_sh_up}
+	mov.b R0,@(8,GBR)         ;!/* 11000000i8*1.... mov.b R0,@(<disp>,GBR)*/{"mov.b",{A_R0,A_DISP_GBR},{HEX_C,HEX_0,IMM1_8}, arch_sh_up}
+	mov.l r5,@(8,r4)          ;!/* 0001nnnnmmmmi4*4 mov.l <REG_M>,@(<disp>,<REG_N>)*/{"mov.l",{ A_REG_M,A_DISP_REG_N},{HEX_1,REG_N,REG_M,IMM1_4BY4}, arch_sh_up}
+	mov.l r5,@(R0,r4)         ;!/* 0000nnnnmmmm0110 mov.l <REG_M>,@(R0,<REG_N>)*/{"mov.l",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l r5,@-r4             ;!/* 0010nnnnmmmm0110 mov.l <REG_M>,@-<REG_N>*/{"mov.l",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l r5,@r4              ;!/* 0010nnnnmmmm0010 mov.l <REG_M>,@<REG_N>*/{"mov.l",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_2}, arch_sh_up}
+	mov.l @(8,r5),r4          ;!/* 0101nnnnmmmmi4*4 mov.l @(<disp>,<REG_M>),<REG_N>*/{"mov.l",{A_DISP_REG_M,A_REG_N},{HEX_5,REG_N,REG_M,IMM0_4BY4}, arch_sh_up}
+	mov.l @(8,GBR),R0         ;!/* 11000110i8*4.... mov.l @(<disp>,GBR),R0*/{"mov.l",{A_DISP_GBR,A_R0},{HEX_C,HEX_6,IMM0_8BY4}, arch_sh_up}
+	.align 2
+	mov.l @(8,PC),r4 ;!/* 1101nnnni8p4.... mov.l @(<disp>,PC),<REG_N>*/{"mov.l",{A_DISP_PC,A_REG_N},{HEX_D,REG_N,PCRELIMM_8BY4}, arch_sh_up}
+	mov.l @(R0,r5),r4         ;!/* 0000nnnnmmmm1110 mov.l @(R0,<REG_M>),<REG_N>*/{"mov.l",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_E}, arch_sh_up}
+	mov.l @r5+,r4             ;!/* 0110nnnnmmmm0110 mov.l @<REG_M>+,<REG_N>*/{"mov.l",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_6}, arch_sh_up}
+	mov.l @r5,r4              ;!/* 0110nnnnmmmm0010 mov.l @<REG_M>,<REG_N>*/{"mov.l",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_2}, arch_sh_up}
+	mov.l R0,@(8,GBR)         ;!/* 11000010i8*4.... mov.l R0,@(<disp>,GBR)*/{"mov.l",{A_R0,A_DISP_GBR},{HEX_C,HEX_2,IMM1_8BY4}, arch_sh_up}
+	mov.w r5,@(R0,r4)         ;!/* 0000nnnnmmmm0101 mov.w <REG_M>,@(R0,<REG_N>)*/{"mov.w",{ A_REG_M,A_IND_R0_REG_N},{HEX_0,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w r5,@-r4             ;!/* 0010nnnnmmmm0101 mov.w <REG_M>,@-<REG_N>*/{"mov.w",{ A_REG_M,A_DEC_N},{HEX_2,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w r5,@r4              ;!/* 0010nnnnmmmm0001 mov.w <REG_M>,@<REG_N>*/{"mov.w",{ A_REG_M,A_IND_N},{HEX_2,REG_N,REG_M,HEX_1}, arch_sh_up}
+	mov.w @(8,r5),R0          ;!/* 10000101mmmmi4*2 mov.w @(<disp>,<REG_M>),R0*/{"mov.w",{A_DISP_REG_M,A_R0},{HEX_8,HEX_5,REG_M,IMM0_4BY2}, arch_sh_up}
+	mov.w @(8,GBR),R0         ;!/* 11000101i8*2.... mov.w @(<disp>,GBR),R0*/{"mov.w",{A_DISP_GBR,A_R0},{HEX_C,HEX_5,IMM0_8BY2}, arch_sh_up}
+	mov.w @(8,PC),r4          ;!/* 1001nnnni8p2.... mov.w @(<disp>,PC),<REG_N>*/{"mov.w",{A_DISP_PC,A_REG_N},{HEX_9,REG_N,PCRELIMM_8BY2}, arch_sh_up}
+	mov.w @(R0,r5),r4         ;!/* 0000nnnnmmmm1101 mov.w @(R0,<REG_M>),<REG_N>*/{"mov.w",{A_IND_R0_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_D}, arch_sh_up}
+	mov.w @r5+,r4             ;!/* 0110nnnnmmmm0101 mov.w @<REG_M>+,<REG_N>*/{"mov.w",{A_INC_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_5}, arch_sh_up}
+	mov.w @r5,r4              ;!/* 0110nnnnmmmm0001 mov.w @<REG_M>,<REG_N>*/{"mov.w",{A_IND_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_1}, arch_sh_up}
+	mov.w R0,@(8,r5)          ;!/* 10000001mmmmi4*2 mov.w R0,@(<disp>,<REG_M>)*/{"mov.w",{A_R0,A_DISP_REG_M},{HEX_8,HEX_1,REG_M,IMM1_4BY2}, arch_sh_up}
+	mov.w R0,@(8,GBR)         ;!/* 11000001i8*2.... mov.w R0,@(<disp>,GBR)*/{"mov.w",{A_R0,A_DISP_GBR},{HEX_C,HEX_1,IMM1_8BY2}, arch_sh_up}
+	.align 2
+	mova @(8,PC),R0 ;!/* 11000111i8p4.... mova @(<disp>,PC),R0*/{"mova",{A_DISP_PC,A_R0},{HEX_C,HEX_7,PCRELIMM_8BY4}, arch_sh_up}
+	movt r4                   ;!/* 0000nnnn00101001 movt <REG_N>        */{"movt",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_9}, arch_sh_up}
+	muls.w r5,r4              ;!/* 0010nnnnmmmm1111 muls.w <REG_M>,<REG_N>*/{"muls.w",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_F}, arch_sh_up}
+	muls r5,r4                ;!/* 0010nnnnmmmm1111 muls <REG_M>,<REG_N>*/{"muls",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_F}, arch_sh_up}
+	mul.l r5,r4               ;!/* 0000nnnnmmmm0111 mul.l <REG_M>,<REG_N>*/{"mul.l",{ A_REG_M,A_REG_N},{HEX_0,REG_N,REG_M,HEX_7}, arch_sh2_up}
+	mulu.w r5,r4              ;!/* 0010nnnnmmmm1110 mulu.w <REG_M>,<REG_N>*/{"mulu.w",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_E}, arch_sh_up}
+	mulu r5,r4                ;!/* 0010nnnnmmmm1110 mulu <REG_M>,<REG_N>*/{"mulu",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_E}, arch_sh_up}
+	neg r5,r4                 ;!/* 0110nnnnmmmm1011 neg <REG_M>,<REG_N> */{"neg",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_B}, arch_sh_up}
+	negc r5,r4                ;!/* 0110nnnnmmmm1010 negc <REG_M>,<REG_N>*/{"negc",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_A}, arch_sh_up}
+	nop                       ;!/* 0000000000001001 nop                 */{"nop",{0},{HEX_0,HEX_0,HEX_0,HEX_9}, arch_sh_up}
+	not r5,r4                 ;!/* 0110nnnnmmmm0111 not <REG_M>,<REG_N> */{"not",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_7}, arch_sh_up}
+	or #4,R0                  ;!/* 11001011i8*1.... or #<imm>,R0        */{"or",{A_IMM,A_R0},{HEX_C,HEX_B,IMM0_8}, arch_sh_up}
+	or r5,r4                  ;!/* 0010nnnnmmmm1011 or <REG_M>,<REG_N>  */{"or",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_B}, arch_sh_up}
+	or.b #4,@(R0,GBR)         ;!/* 11001111i8*1.... or.b #<imm>,@(R0,GBR)*/{"or.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_F,IMM0_8}, arch_sh_up}
+	pref @r4                  ;!/* 0000nnnn10000011 pref @<REG_N>       */{"pref",{A_IND_N},{HEX_0,REG_N,HEX_8,HEX_3}, arch_sh2a_nofpu_or_sh4_nommu_nofpu_up}
+	rotcl r4                  ;!/* 0100nnnn00100100 rotcl <REG_N>       */{"rotcl",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_4}, arch_sh_up}
+	rotcr r4                  ;!/* 0100nnnn00100101 rotcr <REG_N>       */{"rotcr",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_5}, arch_sh_up}
+	rotl r4                   ;!/* 0100nnnn00000100 rotl <REG_N>        */{"rotl",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_4}, arch_sh_up}
+	rotr r4                   ;!/* 0100nnnn00000101 rotr <REG_N>        */{"rotr",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_5}, arch_sh_up}
+	rte                       ;!/* 0000000000101011 rte                 */{"rte",{0},{HEX_0,HEX_0,HEX_2,HEX_B}, arch_sh_up}
+	rts                       ;!/* 0000000000001011 rts                 */{"rts",{0},{HEX_0,HEX_0,HEX_0,HEX_B}, arch_sh_up}
+	sets                      ;!/* 0000000001011000 sets                */{"sets",{0},{HEX_0,HEX_0,HEX_5,HEX_8}, arch_sh_up}
+	sett                      ;!/* 0000000000011000 sett                */{"sett",{0},{HEX_0,HEX_0,HEX_1,HEX_8}, arch_sh_up}
+	shad r5,r4                ;!/* 0100nnnnmmmm1100 shad <REG_M>,<REG_N>*/{"shad",{ A_REG_M,A_REG_N},{HEX_4,REG_N,REG_M,HEX_C}, arch_sh2a_nofpu_or_sh3_nommu_up}
+	shld r5,r4                ;!/* 0100nnnnmmmm1101 shld <REG_M>,<REG_N>*/{"shld",{ A_REG_M,A_REG_N},{HEX_4,REG_N,REG_M,HEX_D}, arch_sh2a_nofpu_or_sh3_nommu_up}
+	shal r4                   ;!/* 0100nnnn00100000 shal <REG_N>        */{"shal",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_0}, arch_sh_up}
+	shar r4                   ;!/* 0100nnnn00100001 shar <REG_N>        */{"shar",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_1}, arch_sh_up}
+	shll r4                   ;!/* 0100nnnn00000000 shll <REG_N>        */{"shll",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_0}, arch_sh_up}
+	shll16 r4                 ;!/* 0100nnnn00101000 shll16 <REG_N>      */{"shll16",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_8}, arch_sh_up}
+	shll2 r4                  ;!/* 0100nnnn00001000 shll2 <REG_N>       */{"shll2",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_8}, arch_sh_up}
+	shll8 r4                  ;!/* 0100nnnn00011000 shll8 <REG_N>       */{"shll8",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_8}, arch_sh_up}
+	shlr r4                   ;!/* 0100nnnn00000001 shlr <REG_N>        */{"shlr",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_1}, arch_sh_up}
+	shlr16 r4                 ;!/* 0100nnnn00101001 shlr16 <REG_N>      */{"shlr16",{A_REG_N},{HEX_4,REG_N,HEX_2,HEX_9}, arch_sh_up}
+	shlr2 r4                  ;!/* 0100nnnn00001001 shlr2 <REG_N>       */{"shlr2",{A_REG_N},{HEX_4,REG_N,HEX_0,HEX_9}, arch_sh_up}
+	shlr8 r4                  ;!/* 0100nnnn00011001 shlr8 <REG_N>       */{"shlr8",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_9}, arch_sh_up}
+	sleep                     ;!/* 0000000000011011 sleep               */{"sleep",{0},{HEX_0,HEX_0,HEX_1,HEX_B}, arch_sh_up}
+	stc SR,r4                 ;!/* 0000nnnn00000010 stc SR,<REG_N>      */{"stc",{A_SR,A_REG_N},{HEX_0,REG_N,HEX_0,HEX_2}, arch_sh_up}
+	stc GBR,r4                ;!/* 0000nnnn00010010 stc GBR,<REG_N>     */{"stc",{A_GBR,A_REG_N},{HEX_0,REG_N,HEX_1,HEX_2}, arch_sh_up}
+	stc VBR,r4                ;!/* 0000nnnn00100010 stc VBR,<REG_N>     */{"stc",{A_VBR,A_REG_N},{HEX_0,REG_N,HEX_2,HEX_2}, arch_sh_up}
+	stc.l SR,@-r4             ;!/* 0100nnnn00000011 stc.l SR,@-<REG_N>  */{"stc.l",{A_SR,A_DEC_N},{HEX_4,REG_N,HEX_0,HEX_3}, arch_sh_up}
+	stc.l VBR,@-r4            ;!/* 0100nnnn00100011 stc.l VBR,@-<REG_N> */{"stc.l",{A_VBR,A_DEC_N},{HEX_4,REG_N,HEX_2,HEX_3}, arch_sh_up}
+	stc.l GBR,@-r4            ;!/* 0100nnnn00010011 stc.l GBR,@-<REG_N> */{"stc.l",{A_GBR,A_DEC_N},{HEX_4,REG_N,HEX_1,HEX_3}, arch_sh_up}
+	sts MACH,r4               ;!/* 0000nnnn00001010 sts MACH,<REG_N>    */{"sts",{A_MACH,A_REG_N},{HEX_0,REG_N,HEX_0,HEX_A}, arch_sh_up}
+	sts MACL,r4               ;!/* 0000nnnn00011010 sts MACL,<REG_N>    */{"sts",{A_MACL,A_REG_N},{HEX_0,REG_N,HEX_1,HEX_A}, arch_sh_up}
+	sts PR,r4                 ;!/* 0000nnnn00101010 sts PR,<REG_N>      */{"sts",{A_PR,A_REG_N},{HEX_0,REG_N,HEX_2,HEX_A}, arch_sh_up}
+	sts.l MACH,@-r4           ;!/* 0100nnnn00000010 sts.l MACH,@-<REG_N>*/{"sts.l",{A_MACH,A_DEC_N},{HEX_4,REG_N,HEX_0,HEX_2}, arch_sh_up}
+	sts.l MACL,@-r4           ;!/* 0100nnnn00010010 sts.l MACL,@-<REG_N>*/{"sts.l",{A_MACL,A_DEC_N},{HEX_4,REG_N,HEX_1,HEX_2}, arch_sh_up}
+	sts.l PR,@-r4             ;!/* 0100nnnn00100010 sts.l PR,@-<REG_N>  */{"sts.l",{A_PR,A_DEC_N},{HEX_4,REG_N,HEX_2,HEX_2}, arch_sh_up}
+	sub r5,r4                 ;!/* 0011nnnnmmmm1000 sub <REG_M>,<REG_N> */{"sub",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_8}, arch_sh_up}
+	subc r5,r4                ;!/* 0011nnnnmmmm1010 subc <REG_M>,<REG_N>*/{"subc",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_A}, arch_sh_up}
+	subv r5,r4                ;!/* 0011nnnnmmmm1011 subv <REG_M>,<REG_N>*/{"subv",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_B}, arch_sh_up}
+	swap.b r5,r4              ;!/* 0110nnnnmmmm1000 swap.b <REG_M>,<REG_N>*/{"swap.b",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_8}, arch_sh_up}
+	swap.w r5,r4              ;!/* 0110nnnnmmmm1001 swap.w <REG_M>,<REG_N>*/{"swap.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_9}, arch_sh_up}
+	tas.b @r4                 ;!/* 0100nnnn00011011 tas.b @<REG_N>      */{"tas.b",{A_IND_N},{HEX_4,REG_N,HEX_1,HEX_B}, arch_sh_up}
+	trapa #4                  ;!/* 11000011i8*1.... trapa #<imm>        */{"trapa",{A_IMM},{HEX_C,HEX_3,IMM0_8}, arch_sh_up}
+	tst #4,R0                 ;!/* 11001000i8*1.... tst #<imm>,R0       */{"tst",{A_IMM,A_R0},{HEX_C,HEX_8,IMM0_8}, arch_sh_up}
+	tst r5,r4                 ;!/* 0010nnnnmmmm1000 tst <REG_M>,<REG_N> */{"tst",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_8}, arch_sh_up}
+	tst.b #4,@(R0,GBR)        ;!/* 11001100i8*1.... tst.b #<imm>,@(R0,GBR)*/{"tst.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_C,IMM0_8}, arch_sh_up}
+	xor #4,R0                 ;!/* 11001010i8*1.... xor #<imm>,R0       */{"xor",{A_IMM,A_R0},{HEX_C,HEX_A,IMM0_8}, arch_sh_up}
+	xor r5,r4                 ;!/* 0010nnnnmmmm1010 xor <REG_M>,<REG_N> */{"xor",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_A}, arch_sh_up}
+	xor.b #4,@(R0,GBR)        ;!/* 11001110i8*1.... xor.b #<imm>,@(R0,GBR)*/{"xor.b",{A_IMM,A_R0_GBR},{HEX_C,HEX_E,IMM0_8}, arch_sh_up}
+	xtrct r5,r4               ;!/* 0010nnnnmmmm1101 xtrct <REG_M>,<REG_N>*/{"xtrct",{ A_REG_M,A_REG_N},{HEX_2,REG_N,REG_M,HEX_D}, arch_sh_up}
+	dt r4                     ;!/* 0100nnnn00010000 dt <REG_N>          */{"dt",{A_REG_N},{HEX_4,REG_N,HEX_1,HEX_0}, arch_sh2_up}
+	dmuls.l r5,r4             ;!/* 0011nnnnmmmm1101 dmuls.l <REG_M>,<REG_N>*/{"dmuls.l",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_D}, arch_sh2_up}
+	dmulu.l r5,r4             ;!/* 0011nnnnmmmm0101 dmulu.l <REG_M>,<REG_N>*/{"dmulu.l",{ A_REG_M,A_REG_N},{HEX_3,REG_N,REG_M,HEX_5}, arch_sh2_up}
+	mac.l @r5+,@r4+           ;!/* 0000nnnnmmmm1111 mac.l @<REG_M>+,@<REG_N>+*/{"mac.l",{A_INC_M,A_INC_N},{HEX_0,REG_N,REG_M,HEX_F}, arch_sh2_up}
+	braf r4                   ;!/* 0000nnnn00100011 braf <REG_N>       */{"braf",{A_REG_N},{HEX_0,REG_N,HEX_2,HEX_3}, arch_sh2_up}
+	bsrf r4                   ;!/* 0000nnnn00000011 bsrf <REG_N>       */{"bsrf",{A_REG_N},{HEX_0,REG_N,HEX_0,HEX_3}, arch_sh2_up}
Index: binutils/gas/testsuite/gas/sh/sh2a.d
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/sh2a.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/sh2a.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,6 @@
 #objdump: -dr --prefix-addresses --show-raw-insn
 #name: SH2a new instructions
-#as: -isa=sh2a
+#as: -isa=sh2a --big
 
 dump.o:     file format elf32-sh.*
 
Index: binutils/gas/testsuite/gas/sh/sh4a.d
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/sh4a.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/sh4a.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,4 +1,5 @@
 #objdump: -fdr --prefix-addresses --show-raw-insn
+#as: --big
 #name: SH4a non-FP constructs
 
 .*:     file format elf.*sh.*
Index: binutils/gas/testsuite/gas/sh/sh4a-fp.d
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/sh4a-fp.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/sh4a-fp.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,8 +1,9 @@
 #objdump: -fdr --prefix-addresses --show-raw-insn
+#as: --big
 #name: SH4a FP constructs
 
 .*:     file format elf.*sh.*
-architecture: sh4a, flags 0x00000010:
+architecture: (st40-300-or-)?sh4a, flags 0x00000010:
 HAS_SYMS
 start address 0x00000000
 
Index: binutils/gas/testsuite/gas/sh/pic.d
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/pic.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/pic.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,4 +1,5 @@
 #objdump: -dr --prefix-addresses --show-raw-insn
+#as: --big
 #name: SH PIC constructs
 # Test SH PIC constructs:
 
Index: binutils/gas/testsuite/gas/sh/dsp.d
===================================================================
--- binutils.orig/gas/testsuite/gas/sh/dsp.d	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/testsuite/gas/sh/dsp.d	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,6 @@
 #objdump: -dr --prefix-addresses --show-raw-insn
 #name: SH DSP basic instructions
-#as: -dsp
+#as: -dsp --big
 # Test the SH DSP instructions:
 
 .*: +file format .*sh.*
Index: binutils/gas/config/tc-sh.c
===================================================================
--- binutils.orig/gas/config/tc-sh.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/config/tc-sh.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -2,6 +2,7 @@
    Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
    2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2012
    Free Software Foundation, Inc.
+   Copyright (c) 2009  STMicroelectronics.
 
    This file is part of GAS, the GNU Assembler.
 
@@ -125,6 +126,8 @@ const pseudo_typeS md_pseudo_table[] =
 
 int sh_relax;		/* set if -relax seen */
 
+int sh_notas = TRUE;    /* set if -notas seen */
+
 /* Whether -small was seen.  */
 
 int sh_small;
@@ -487,6 +490,7 @@ const relax_typeS md_relax_table[C (END, 0)] = {
 #undef EMPTY
 
 static struct hash_control *opcode_hash_control;	/* Opcode mnemonics */
+static struct hash_control *relax_hash_control;        /* relax count fixup */
 
 
 #ifdef OBJ_ELF
@@ -920,6 +924,9 @@ int
 sh_optimize_expr (expressionS *l, operatorT op, expressionS *r)
 {
   bfd_vma frag_off;
+  
+  if (sh_relax == 1)
+    return 0;
 
   if (op == O_subtract
       && l->X_op == O_symbol
@@ -1721,6 +1728,24 @@ get_specific (sh_opcode_info *opcode, sh_operand_i
 	      if (user->type != A_REG_N || user->reg != 0)
 		goto fail;
 	      break;
+	/* For use by ST40-300 EXPERIMENTAL mulr instructions.
+	   Not for submission to netsources.  */
+	    case A_R1:
+	      /* opcode needs r1 */
+	      if (user->type != A_REG_N || user->reg != 1)
+		goto fail;
+	      break;
+	    case A_R2:
+	      /* opcode needs r2 */
+	      if (user->type != A_REG_N || user->reg != 2)
+		goto fail;
+	      break;
+	    case A_R3:
+	      /* opcode needs r3 */
+	      if (user->type != A_REG_N || user->reg != 3)
+		goto fail;
+	      break;
+	/* End of experimental.  */
 	    case A_R0_GBR:
 	      if (user->type != A_R0_GBR || user->reg != 0)
 		goto fail;
@@ -2587,6 +2612,9 @@ find_cooked_opcode (char **str_p)
   if (nlen == 0)
     as_bad (_("can't find opcode "));
 
+  if (sh_notas && strncasecmp (name, "tas.b", strlen ("tas.b")) == 0)
+    as_bad (_("tas.b use")); 
+
   return (sh_opcode_info *) hash_find (opcode_hash_control, name);
 }
 
@@ -3144,6 +3172,8 @@ enum options
 #ifdef OBJ_ELF
   OPTION_FDPIC,
 #endif
+  OPTION_TAS,
+  OPTION_NOTAS,
   OPTION_DUMMY  /* Not used.  This is just here to make it easy to add and subtract options from this enum.  */
 };
 
@@ -3170,7 +3200,9 @@ struct option md_longopts[] =
   {"no-expand",              no_argument, NULL, OPTION_NO_EXPAND},
   {"expand-pt32",            no_argument, NULL, OPTION_PT32},
 #endif /* HAVE_SH64 */
-  { "h-tick-hex", no_argument,	      NULL, OPTION_H_TICK_HEX  },
+  { "h-tick-hex", no_argument, NULL, OPTION_H_TICK_HEX  },
+  { "notas", no_argument, NULL, OPTION_NOTAS  },
+  { "tas", no_argument, NULL, OPTION_TAS  },
 
 #ifdef OBJ_ELF
   {"fdpic", no_argument, NULL, OPTION_FDPIC},
@@ -3315,6 +3347,14 @@ md_parse_option (int c, char *arg ATTRIBUTE_UNUSED
       break;
 #endif /* OBJ_ELF */
 
+    case OPTION_NOTAS:
+      sh_notas = 1;
+      break;
+
+    case OPTION_TAS:
+      sh_notas = 0;
+      break;
+
     default:
       return 0;
     }
@@ -3335,6 +3375,9 @@ SH options:\n\
 --small			align sections to 4 byte boundaries, not 16\n\
 --dsp			enable sh-dsp insns, and disable floating-point ISAs.\n\
 --allow-reg-prefix	allow '$' as a register name prefix.\n\
+--h-tick-hex            support H'00 style hex constants in addition to 0x00 style.\n\
+--notas                 disallow 'tas.b' instruction.\n\
+--tas                   allow use of 'tas.b' instruction.\n\
 --isa=[any		use most appropriate isa\n\
     | dsp               same as '-dsp'\n\
     | fp"));
@@ -3373,40 +3416,29 @@ SH options:\n\
 #endif /* OBJ_ELF */
 }
 
-/* This struct is used to pass arguments to sh_count_relocs through
-   bfd_map_over_sections.  */
-
-struct sh_count_relocs
-{
-  /* Symbol we are looking for.  */
-  symbolS *sym;
-  /* Count of relocs found.  */
-  int count;
-};
-
 /* Count the number of fixups in a section which refer to a particular
    symbol.  This is called via bfd_map_over_sections.  */
 
 static void
-sh_count_relocs (bfd *abfd ATTRIBUTE_UNUSED, segT sec, void *data)
+sh_count_relocs (bfd *abfd ATTRIBUTE_UNUSED, segT sec,
+		 void *data ATTRIBUTE_UNUSED)
 {
-  struct sh_count_relocs *info = (struct sh_count_relocs *) data;
   segment_info_type *seginfo;
-  symbolS *sym;
   fixS *fix;
 
   seginfo = seg_info (sec);
   if (seginfo == NULL)
     return;
 
-  sym = info->sym;
   for (fix = seginfo->fix_root; fix != NULL; fix = fix->fx_next)
     {
-      if (fix->fx_addsy == sym)
-	{
-	  ++info->count;
-	  fix->fx_tcbit = 1;
-	}
+      fixS *frcnt = NULL;
+
+      if (fix->fx_addsy != NULL)
+	frcnt = hash_find (relax_hash_control, S_GET_NAME (fix->fx_addsy));
+
+      if (frcnt)
+	++frcnt->fx_offset;
     }
 }
 
@@ -3444,7 +3476,7 @@ sh_frob_section (bfd *abfd ATTRIBUTE_UNUSED, segT
       symbolS *sym;
       bfd_vma val;
       fixS *fscan;
-      struct sh_count_relocs info;
+      fixS *frcnt;
 
       if (fix->fx_r_type != BFD_RELOC_SH_USES)
 	continue;
@@ -3482,12 +3514,6 @@ sh_frob_section (bfd *abfd ATTRIBUTE_UNUSED, segT
 	  continue;
 	}
 
-      if (fscan->fx_tcbit)
-	{
-	  /* We've already done this one.  */
-	  continue;
-	}
-
       /* The variable fscan should also be a fixup to a local symbol
 	 in the same section.  */
       sym = fscan->fx_addsy;
@@ -3502,22 +3528,18 @@ sh_frob_section (bfd *abfd ATTRIBUTE_UNUSED, segT
 	  continue;
 	}
 
-      /* Now we look through all the fixups of all the sections,
-	 counting the number of times we find a reference to sym.  */
-      info.sym = sym;
-      info.count = 0;
-      bfd_map_over_sections (stdoutput, sh_count_relocs, &info);
-
-      if (info.count < 1)
-	abort ();
-
       /* Generate a BFD_RELOC_SH_COUNT fixup at the location of sym.
 	 We have already adjusted the value of sym to include the
 	 fragment address, so we undo that adjustment here.  */
-      subseg_change (sec, 0);
-      fix_new (fscan->fx_frag,
-	       S_GET_VALUE (sym) - fscan->fx_frag->fr_address,
-	       4, &abs_symbol, info.count, 0, BFD_RELOC_SH_COUNT);
+
+      if (!hash_find (relax_hash_control,S_GET_NAME (sym)))
+	{
+	  subseg_change (sec, 0);
+	  frcnt = fix_new (fscan->fx_frag,
+			   S_GET_VALUE (sym) - fscan->fx_frag->fr_address,
+			   4, &abs_symbol, 0, 0, BFD_RELOC_SH_COUNT);
+	  hash_insert (relax_hash_control, S_GET_NAME(sym), frcnt);
+	}
     }
 }
 
@@ -3541,7 +3563,13 @@ sh_frob_file (void)
   if (! sh_relax)
     return;
 
+  relax_hash_control = hash_new ();
+
   bfd_map_over_sections (stdoutput, sh_frob_section, NULL);
+
+  bfd_map_over_sections (stdoutput, sh_count_relocs, NULL);
+
+  hash_die (relax_hash_control);
 }
 
 /* Called after relaxing.  Set the correct sizes of the fragments, and
@@ -3754,6 +3782,24 @@ sh_cons_align (int nbytes)
   record_alignment (now_seg, nalign);
 }
 
+/* Returns FALSE if there is some sh specific reason why the
+   subtraction of two same-section symbols cannot be computed by
+   the assembler.  */
+
+bfd_boolean
+sh_allow_local_subtract (expressionS * left ATTRIBUTE_UNUSED,
+			 expressionS * right ATTRIBUTE_UNUSED,
+			 segT section ATTRIBUTE_UNUSED)
+{
+  /* If we are not performing linker relaxation then we have nothing
+     to worry about.  */
+  if (sh_relax == 0)
+    return TRUE;
+  
+  /* TODO : can be refine.  */
+  return FALSE;
+}
+
 /* When relaxing, we need to output a reloc for any .align directive
    that requests alignment to a four byte boundary or larger.  This is
    also where we check for misaligned data.  */
@@ -3762,7 +3808,7 @@ void
 sh_handle_align (fragS *frag)
 {
   int bytes = frag->fr_next->fr_address - frag->fr_address - frag->fr_fix;
-
+  
   if (frag->fr_type == rs_align_code)
     {
       static const unsigned char big_nop_pattern[] = { 0x00, 0x09 };
@@ -3799,9 +3845,59 @@ sh_handle_align (fragS *frag)
 	  || frag->fr_type == rs_align_code)
       && frag->fr_address + frag->fr_fix > 0
       && frag->fr_offset > 1
-      && now_seg != bss_section)
-    fix_new (frag, frag->fr_fix, 2, &abs_symbol, frag->fr_offset, 0,
-	     BFD_RELOC_SH_ALIGN);
+      && (bfd_get_section_flags (stdoutput, now_seg) & SEC_CODE))
+    {
+       fix_new (frag, frag->fr_fix, 2, &abs_symbol, frag->fr_offset, 0,
+	       BFD_RELOC_SH_ALIGN);
+		  
+
+       /* Sometimes (rare cases when obstack_room has decided to), the rs_align below
+            rs_xxx   ()           {  }
+            rs_align (fr_fix=4, ) { symb=.L1 }
+	    xxx                   { symb=.L2 }
+	    ...
+
+	  Can be split into rs_fill+rs_align :
+            rs_xxx   ()           {  }
+            rs_fill  (fr_fix=4, ) { symb=.L1 }
+	    rs_align (fr_fix=0, ) { symb=.L2 }
+	    ...
+
+	  In that case, we need to retrieve the previous rs_fill in 
+	  order to fix the symbol .L1 and mark it as used in reloc.
+       */
+       fragS *frag_symbols = frag;
+       if (frag->fr_fix==0)
+       	{
+	  segment_info_type *seginfo = seg_info (now_seg);
+	  fragS *fragp = seginfo->frchainP->frch_root;
+	  
+       	  for ( ; fragp && fragp->fr_next!=frag ; fragp=fragp->fr_next)
+	     /*nothing*/;
+
+	  if (fragp && fragp->fr_type==rs_fill && fragp->region==frag->region)
+	     frag_symbols = fragp;
+	}
+
+
+      /* As it is possible that several symbols which have the same offset,
+	 could be impacted in a different way by a .align, like in this example:
+	 .L1
+	 .align 2
+	 .L2
+	 We produce align relocs with symbols which are not impacted by the
+	 .align.  */
+      symbolS *symp;
+      for (symp = symbol_rootP; symp; symp = symbol_next(symp))
+	{ 
+	  if (symbol_get_frag(symp) == frag_symbols)
+	    {
+	      fix_new (frag, frag->fr_fix, 2, symp, frag->fr_offset, 0,
+		       BFD_RELOC_SH_ALIGN);
+	      symbol_mark_used_in_reloc(symp);
+	    }
+	}
+    }
 }
 
 /* See whether the relocation should be resolved locally.  */
@@ -3879,6 +3975,10 @@ sh_fix_adjustable (fixS *fixP)
       || fixP->fx_r_type == BFD_RELOC_VTABLE_ENTRY)
     return 0;
 
+  if (sh_relax && (fixP->fx_r_type == BFD_RELOC_SH_ALIGN
+      || SWITCH_TABLE (fixP)))
+    return 0;
+  
   return 1;
 }
 
@@ -3943,7 +4043,6 @@ apply_full_field_fix (fixS *fixP, char *buf, bfd_v
       if (howto && !howto->partial_inplace)
 	{
 	  fixP->fx_addnumber = val;
-	  return;
 	}
     }
   md_number_to_chars (buf, val, size);
@@ -4013,7 +4112,12 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg A
     val -= S_GET_VALUE  (fixP->fx_addsy);
 
   if (SWITCH_TABLE (fixP))
-    val -= S_GET_VALUE  (fixP->fx_subsy);
+    {
+      if (sh_relax)
+	val = S_GET_VALUE  (fixP->fx_addsy);
+      val -= S_GET_VALUE  (fixP->fx_subsy);
+      *valP = val;
+    }
 
   max = min = 0;
   shift = 0;
@@ -4052,7 +4156,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg A
       break;
     case BFD_RELOC_SH_DISP20:
       if (! target_big_endian)
-	abort();
+	as_bad (_("Not supported for little endian"));
       max = 0x7ffff;
       min = -0x80000;
       buf[1] = (buf[1] & 0x0f) | ((val >> 12) & 0xf0);
@@ -4061,7 +4165,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg A
       break;
     case BFD_RELOC_SH_DISP20BY8:
       if (!target_big_endian)
-	abort();
+	as_bad (_("Not supported for little endian"));
       max = 0x7ffff;
       min = -0x80000;
       shift = 8;
@@ -4112,7 +4216,8 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg A
 
     case BFD_RELOC_SH_PCRELIMM8BY4:
       /* If we are dealing with a known destination ... */
-      if ((fixP->fx_addsy == NULL || S_IS_DEFINED (fixP->fx_addsy))
+      if (!sh_relax
+	  && (fixP->fx_addsy == NULL || S_IS_DEFINED (fixP->fx_addsy))
 	  && (fixP->fx_subsy == NULL || S_IS_DEFINED (fixP->fx_addsy)))
       {
 	/* Don't silently move the destination due to misalignment.
@@ -4419,11 +4524,13 @@ md_pcrel_from_section (fixS *fixP, segT sec)
 
 /* Create a reloc.  */
 
-arelent *
+arelent **
 tc_gen_reloc (asection *section ATTRIBUTE_UNUSED, fixS *fixp)
 {
+  static arelent * relocs[MAX_RELOC_EXPANSION + 1];
   arelent *rel;
   bfd_reloc_code_real_type r_type;
+  arelent * rel2 = xmalloc (sizeof * rel);
 
   rel = (arelent *) xmalloc (sizeof (arelent));
   rel->sym_ptr_ptr = (asymbol **) xmalloc (sizeof (asymbol *));
@@ -4432,8 +4539,22 @@ tc_gen_reloc (asection *section ATTRIBUTE_UNUSED,
 
   r_type = fixp->fx_r_type;
 
+  relocs[0] = rel;
+  relocs[1] = NULL;
+
   if (SWITCH_TABLE (fixp))
     {
+      if (sh_relax)
+	{
+	  relocs[1] = rel2;
+
+	  rel2->address = rel->address;
+	  rel2->howto = bfd_reloc_type_lookup (stdoutput, BFD_RELOC_SH_SYM_DIFF);
+	  rel2->sym_ptr_ptr = (asymbol **) xmalloc (sizeof (asymbol *));
+	  *rel2->sym_ptr_ptr = symbol_get_bfdsym (fixp->fx_addsy);
+          rel2->addend = fixp->fx_offset;
+	}
+
       *rel->sym_ptr_ptr = symbol_get_bfdsym (fixp->fx_subsy);
       rel->addend = 0;
       if (r_type == BFD_RELOC_16)
@@ -4482,10 +4603,20 @@ tc_gen_reloc (asection *section ATTRIBUTE_UNUSED,
     }
 #ifdef OBJ_ELF
   else if (rel->howto->type == R_SH_IND12W)
-    rel->addend += fixp->fx_offset - 4;
+    {
+     /* Work-around to undo (by anticipation) the addend set
+        in bfd_install_relocation() because this reloc is not
+        partial_inplace */
+      if (fixp->fx_addsy->bsym->flags & BSF_GLOBAL)
+	as_bad_where (fixp->fx_file, fixp->fx_line,
+		      _("unsupported relocation %s to global symbol"),
+		      bfd_get_reloc_code_name (r_type));
+
+      rel->addend += fixp->fx_offset - 4;
+    }
 #endif
 
-  return rel;
+  return relocs;
 }
 
 #ifdef OBJ_ELF
Index: binutils/gas/config/tc-sh.h
===================================================================
--- binutils.orig/gas/config/tc-sh.h	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/config/tc-sh.h	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,7 @@
 /* This file is tc-sh.h
    Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
    2003, 2004, 2005, 2006, 2007, 2008, 2010 Free Software Foundation, Inc.
+   Copyright (c) 2009  STMicroelectronics.
 
    This file is part of GAS, the GNU Assembler.
 
@@ -34,12 +35,20 @@ struct internal_reloc;
 /* Whether -relax was used.  */
 extern int sh_relax;
 
+/* Whether -notas was used.  */
+extern int sh_notas;
+
 /* Whether -small was used.  */
 extern int sh_small;
 
 /* Don't try to break words.  */
 #define WORKING_DOT_WORD
 
+#define LOCAL_LABEL_PREFIX '.'
+#define FAKE_LABEL_NAME ".L0\001"
+
+#define LEX_QM		(LEX_BEGIN_NAME) /* allow `?' begin of labels */
+
 /* We require .long, et. al., to be aligned correctly.  */
 #define md_cons_align(nbytes) sh_cons_align (nbytes)
 extern void sh_cons_align (int);
@@ -68,19 +77,18 @@ extern int sh_force_relocation (struct fix *);
    to know about all such entries so that it can adjust them if
    necessary.  */
 
-#define SWITCH_TABLE(FIX)				\
-  ((FIX)->fx_addsy != NULL				\
-   && (FIX)->fx_subsy != NULL				\
-   && S_GET_SEGMENT ((FIX)->fx_addsy) == text_section	\
-   && S_GET_SEGMENT ((FIX)->fx_subsy) == text_section	\
-   && ((FIX)->fx_r_type == BFD_RELOC_32			\
-       || (FIX)->fx_r_type == BFD_RELOC_16		\
+#define SWITCH_TABLE(FIX)						\
+  ((FIX)->fx_addsy != NULL						\
+   && (FIX)->fx_subsy != NULL						\
+   && (((S_GET_SEGMENT ((FIX)->fx_addsy))->flags & SEC_CODE)		\
+       || ((S_GET_SEGMENT ((FIX)->fx_subsy))->flags & SEC_CODE))	\
+   && ((FIX)->fx_r_type == BFD_RELOC_32					\
+       || (FIX)->fx_r_type == BFD_RELOC_16				\
        || (FIX)->fx_r_type == BFD_RELOC_8))
 
 #define TC_FORCE_RELOCATION_SUB_SAME(FIX, SEC)		\
   (! SEG_NORMAL (SEC)					\
-   || TC_FORCE_RELOCATION (FIX)				\
-   || (sh_relax && SWITCH_TABLE (FIX)))
+   || TC_FORCE_RELOCATION (FIX))
 
 /* Don't complain when we leave fx_subsy around.  */
 #define TC_VALIDATE_FIX_SUB(FIX, SEG)			\
@@ -228,6 +236,16 @@ extern bfd_boolean sh_fix_adjustable (struct fix *
    && ((FIX)->fx_r_type == BFD_RELOC_32_PLT_PCREL	\
        || (sh_relax && SWITCH_TABLE (FIX))))
 
+/* Only allow call frame debug info optimization when linker relaxation is
+   not enabled as otherwise we could generate the DWARF directives without
+   the relocs necessary to patch them up.  */
+#define md_allow_eh_opt (sh_relax == 0)
+
+/* The difference between same-section symbols may be affected by linker
+   relaxation, so do not resolve such expressions in the assembler.  */
+#define md_allow_local_subtract(l,r,s) sh_allow_local_subtract (l, r, s)
+extern bfd_boolean sh_allow_local_subtract (expressionS *, expressionS *, segT);
+
 #define md_parse_name(name, exprP, mode, nextcharP) \
   sh_parse_name ((name), (exprP), (mode), (nextcharP))
 int sh_parse_name (char const *, expressionS *,
@@ -254,6 +272,12 @@ extern int sh_regname_to_dw2regnum (char *);
 #define DWARF2_DEFAULT_RETURN_COLUMN 17
 #define DWARF2_CIE_DATA_ALIGNMENT (-4)
 
+#define RELOC_EXPANSION_POSSIBLE
+#define MAX_RELOC_EXPANSION 2
+
+#define DWARF2_USE_FIXED_ADVANCE_PC sh_relax
+#define TC_FINALIZE_SYMS_BEFORE_SIZE_SEG (sh_relax == 0)
+
 #endif /* OBJ_ELF */
 
 #define H_TICK_HEX 1
Index: binutils/gas/write.c
===================================================================
--- binutils.orig/gas/write.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/write.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -392,6 +392,8 @@ chain_frchains_together_1 (segT section, struct fr
   fragS dummy, *prev_frag = &dummy;
   fixS fix_dummy, *prev_fix = &fix_dummy;
 
+  dummy.fr_type = 0;
+
   for (; frchp; frchp = frchp->frch_next)
     {
       prev_frag->fr_next = frchp->frch_root;
Index: binutils/gas/ChangeLog.st40
===================================================================
--- binutils.orig/gas/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/gas/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,118 @@
+2012-11-13  Christian Bruel  <christian.bruel@st.com>
+
+	* tc-sh.c (tc_gen_reloc): Warn for global R_SH_IND12W reloc.
+
+2013-06-19  Laurent Alfonsi  <laurent.alfonsi@st.com>
+
+	* config/tc-sh.c (tc_gen_reloc): SYM_DIFF relocs uses the addend stored
+	in fixp.
+
+2013-01-09  Christian Bruel  <christian.bruel@st.com>
+
+	* write.c (chain_frchains_together_1 ): Avoid uninitialized warning.
+
+2012-12-17  Christian Bruel  <christian.bruel@st.com>
+
+	* config/tc-sh.c (md_show_usage): List --tas and --h-tick-hex in --help
+
+2012-02-06  Laurent Alfonsi  <laurent.alfonsi@st.com>
+
+	* tc-sh.c (sh_handle_align): Relaxation fix in assembler
+
+2010-09-02  Christian Bruel  <christian.bruel@st.com>
+
+	* remap.c (remap_debug_filename): translate filename for CYGPATH.
+
+2010-07-06  Christian Bruel  <christian.bruel@st.com>
+
+	* config/tc-sh.h (OPTION_TAS): Defined.
+	* config/tc-sh.c (sh_tas): Defined and use.
+	* doc/c-sh.tex (--tas): Document.
+	* config/tc-sh.c (sh_notas): Change default.
+
+2010-03-17  Christian Bruel  <christian.bruel@st.com>
+
+	* config/tc-sh.c (build_Mytes): Better report for IMM0_20 IMM0_20BY8.
+
+2010-02-09  Yvan Roux  <yvan.roux@st.com>
+
+	* config/tc-sh.c (sh_frob_file): Use a linear algorithm instead of a
+	quadratic one.
+	(sh_frob_section): Likewise.
+	(sh_count_relocs): Likewise.
+	(relax_hash_control): Defined.
+
+2009-08-29  Matt Fleming  <matt@console-pimps.org>
+
+	* config/tc-sh.c (md_apply_fix): Extend sign of the offset value
+	for 64-bit host.
+
+2009-10-09  Yvan Roux  <yvan.roux@st.com>
+
+	* config/tc-sh.h (DWARF2_USE_FIXED_ADVANCE_PC): Defined.
+	(TC_FINALIZE_SYMS_BEFORE_SIZE_SEG): Defined.
+
+2009-09-22  Yvan Roux  <yvan.roux@st.com>
+
+	* config/tc-sh.h (SWITCH_TABLE): True only when the two
+	symbols are in a code section.
+	(TC_FORCE_RELOCATION_SUB_SAME): Remove redundant condition.
+
+2009-09-15  Yvan Roux  <yvan.roux@st.com>
+
+	* config/tc-sh.h (RELOC_EXPANSION_POSSIBLE): Defined.
+	(MAX_RELOC_EXPANSION): Defined.
+	* config/tc-sh.c (tc_gen_reloc): Generate two relocations for
+	a two symbols difference when relaxing.
+	(sh_fix_adjustable): Likewise.
+	(md_apply_fix): Likewise.
+
+2009-09-11  Christian Bruel  <christian.bruel@st.com>
+	
+	* config/tc-sh.h (OPTION_NOTAS): Defined.
+	* config/tc-sh.c (sh_notas): Defined and use.
+	* doc/c-sh.tex (--notas): Document.
+
+2009-05-15  Yvan Roux  <yvan.roux@st.com>
+
+	* config/tc-sh.h (SWITCH_TABLE): Handle sections != text_section.
+	(md_allow_local_subtract): Defined.
+	* config/tc-sh.c (sh_allow_local_subtract): New function.
+
+2009-05-12  Yvan Roux  <yvan.roux@st.com>
+
+	* config/tc-sh.h (md_allow_eh_opt): Defined.
+
+2009-03-18  Christian Bruel  <christian.bruel@st.com>
+
+	* config/tc-sh.h (LEX_QM): Allow '?' begin of labels.
+
+2008-11-19  Christian Bruel  <christian.bruel@st.com>
+
+	* config/tc-sh.h (FAKE_LABEL_NAME): Defined.
+
+2008-11-12  Yvan Roux  <yvan.roux@st.com>
+
+	* config/tc-sh.c (sh_handle_align): Fix relaxation.
+	(sh_fix_adjustable): Likewise.
+	(md_apply_fix): Likewise.
+
+2006-03-09  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	Fix INSbl16166:
+	* config/tc-sh.c (md_apply_fix): Make sure BFD_RELOC_SH_PCRELIMM8BY4
+	relocations are properly aligned, and not negative.
+
+2005-01-18  DJ Delorie  <dj@redhat.com>
+
+	Fix INSbl23528:
+	* config/tc-sh.c (get_specific): Only check limits when the
+	operand matches the expected argument.
+
+2006-03-01  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* config/tc-sh.c (get_specific): Add cases for A_R1, A_R2 and A_R3.
+
+2006-01-31  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* configure.tgt: Add sh-superh-elf.
Index: binutils/gas/configure
===================================================================
--- binutils.orig/gas/configure	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/configure	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -640,6 +640,7 @@ cgen_cpu_prefix
 GDBINIT
 NO_WERROR
 WARN_CFLAGS
+SIM
 OTOOL64
 OTOOL
 LIPO
@@ -11187,7 +11188,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 11190 "configure"
+#line 11191 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -11293,7 +11294,7 @@ else
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 11296 "configure"
+#line 11297 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -11531,6 +11532,8 @@ CC="$lt_save_CC"
 
 
 
+
+
 # Check whether --enable-targets was given.
 if test "${enable_targets+set}" = set; then :
   enableval=$enable_targets; case "${enableval}" in
Index: binutils/gas/configure.tgt
===================================================================
--- binutils.orig/gas/configure.tgt	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/configure.tgt	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -375,6 +375,7 @@ case ${generic_target} in
       *)	endian=big ;;
     esac ;;
   sh*-*-symbianelf*)			fmt=elf endian=little ;;
+  sh-superh-elf)			fmt=elf endian=little ;;
   sh-*-elf*)				fmt=elf ;;
   sh-*-uclinux* | sh[12]-*-uclinux*)	fmt=elf em=uclinux ;;
   sh-*-coff*)				fmt=coff ;;
Index: binutils/gas/remap.c
===================================================================
--- binutils.orig/gas/remap.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/remap.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -77,6 +77,8 @@ remap_debug_filename (const char *filename)
   const char *name;
   size_t name_len;
 
+  CYGPATH (filename);
+
   for (map = debug_prefix_maps; map; map = map->next)
     if (filename_ncmp (filename, map->old_prefix, map->old_len) == 0)
       break;
Index: binutils/gas/Makefile.am
===================================================================
--- binutils.orig/gas/Makefile.am	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gas/Makefile.am	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -405,6 +405,30 @@ check-DEJAGNU: site.exp
 	else echo "WARNING: could not find \`runtest'" 1>&2; :;\
 	fi
 
+site.exp: Makefile
+	@echo 'Making a new site.exp file...'
+	@echo '## these variables are automatically generated by make ##' >site.tmp
+	@echo '# Do not edit here.  If you wish to override these values' >>site.tmp
+	@echo '# edit the last section' >>site.tmp
+	@echo 'set srcdir $(srcdir)' >>site.tmp
+	@echo "set objdir `pwd`" >>site.tmp
+	@echo 'set build_alias "$(build_alias)"' >>site.tmp
+	@echo 'set build_triplet $(build_triplet)' >>site.tmp
+	@echo 'set host_alias "$(host_alias)"' >>site.tmp
+	@echo 'set host_triplet $(host_triplet)' >>site.tmp
+	@echo 'set target_alias "$(target_alias)"' >>site.tmp
+	@echo 'set target_triplet $(target_triplet)' >>site.tmp
+	@echo 'set target_list ${target_alias}' >>site.tmp
+	@echo 'set boards_dir ${srcdir}/../../boards' >>site.tmp
+	@echo 'set SIM "$(SIM)"' >>site.tmp
+	@echo 'set CC_FOR_TARGET "$(CC_FOR_TARGET)"' >>site.tmp
+	@echo '## All variables above are generated by configure. Do Not Edit ##' >>site.tmp
+	@test ! -f site.exp || \
+	  sed '1,/^## All variables above are.*##/ d' site.exp >> site.tmp
+	@-rm -f site.bak
+	@test ! -f site.exp || mv site.exp site.bak
+	@mv site.tmp site.exp
+
 # The m68k operand parser.
 
 EXTRA_as_new_SOURCES += config/m68k-parse.y config/bfin-parse.y
Index: binutils/Makefile.tpl
===================================================================
--- binutils.orig/Makefile.tpl	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/Makefile.tpl	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -396,6 +396,7 @@ AS = @AS@
 AR = @AR@
 AR_FLAGS = rc
 CC = @CC@
+SIM = @SIM@
 CXX = @CXX@
 DLLTOOL = @DLLTOOL@
 LD = @LD@
Index: binutils/include/ChangeLog.st40
===================================================================
--- binutils.orig/include/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/include/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,7 @@
+2012-10-11  Laurent Alfonsi  <laurent.alfonsi@st.com>
+
+	* bfdlink.h: Add bfd_is_symbol_to_wrap function.
+
+2006-03-27  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* libiberty.h: Add support for cygpath.c.
Index: binutils/include/bfdlink.h
===================================================================
--- binutils.orig/include/bfdlink.h	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/include/bfdlink.h	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -180,6 +180,10 @@ extern struct bfd_link_hash_entry *bfd_link_hash_l
   (struct bfd_link_hash_table *, const char *, bfd_boolean create,
    bfd_boolean copy, bfd_boolean follow);
 
+/* Check if the symbol name parameter is a symbol to wrap. */
+extern bfd_boolean bfd_is_symbol_to_wrap
+  (bfd *, struct bfd_link_info *, const char *);
+
 /* Look up an entry in the main linker hash table if the symbol might
    be wrapped.  This should only be used for references to an
    undefined symbol, not for definitions of a symbol.  */
Index: binutils/include/elf/ChangeLog.st40
===================================================================
--- binutils.orig/include/elf/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/include/elf/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,13 @@
+2009-09-15  Yvan Roux  <yvan.roux@st.com>
+
+	* sh.h: Add R_SH_SYM_DIFF reloc.
+
+2006-03-01  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* sh.h (EF_SH_MACH_MASK): Extend mask to allow for ST40-300.
+	(EF_ST40_300_SH2A_NOFPU, EF_ST40_300_SH4A_NOFPU): Define.
+	(EF_ST40_300_NOFPU, EF_ST40_300_SH4Ai, EF_ST40_300): Likewise.
+	(EF_SH_BFD_TABLE): Add blank entries 25-49,
+	bfd_mach_st40_300_nofpu_or_sh2a_nofpu,
+	bfd_mach_st40_300_nofpu_or_sh4a_nofpu, bfd_mach_st40_300_nofpu,
+	bfd_mach_st40_300_or_sh4a and bfd_mach_st40_300.
Index: binutils/include/elf/sh.h
===================================================================
--- binutils.orig/include/elf/sh.h	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/include/elf/sh.h	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,7 @@
 /* SH ELF support for BFD.
    Copyright 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2010
    Free Software Foundation, Inc.
+   Copyright (c) 2006  STMicroelectronics.
 
    This file is part of BFD, the Binary File Descriptor library.
 
@@ -23,7 +24,7 @@
 
 /* Processor specific flags for the ELF header e_flags field.  */
 
-#define EF_SH_MACH_MASK	0x1f
+#define EF_SH_MACH_MASK	0x3f
 #define EF_SH_UNKNOWN	   0 /* For backwards compatibility.  */
 #define EF_SH1		   1
 #define EF_SH2		   2
@@ -48,6 +49,12 @@
 #define EF_SH2A_SH4        23
 #define EF_SH2A_SH3E       24
 
+#define EF_ST40_300_SH2A_NOFPU 50
+#define EF_ST40_300_SH4A_NOFPU 51
+#define EF_ST40_300_NOFPU      52
+#define EF_ST40_300_SH4A       53
+#define EF_ST40_300            54
+
 /* This one can only mix in objects from other EF_SH5 objects.  */
 #define EF_SH5		  10
 
@@ -78,7 +85,15 @@
 /* EF_SH2A_SH4_NOFPU    */ bfd_mach_sh2a_nofpu_or_sh4_nommu_nofpu, \
 /* EF_SH2A_SH3_NOFPU    */ bfd_mach_sh2a_nofpu_or_sh3_nommu, \
 /* EF_SH2A_SH4          */ bfd_mach_sh2a_or_sh4 , \
-/* EF_SH2A_SH3E         */ bfd_mach_sh2a_or_sh3e
+/* EF_SH2A_SH3E         */ bfd_mach_sh2a_or_sh3e, \
+/* 25 - 29              */ 0, 0, 0, 0, 0, \
+/* 30 - 39              */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
+/* 40 - 49              */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \
+/* EF_ST40_300_SH2A_NOFPU */ bfd_mach_st40_300_nofpu_or_sh2a_nofpu, \
+/* EF_ST40_300_SH4A_NOFPU */ bfd_mach_st40_300_nofpu_or_sh4a_nofpu, \
+/* EF_ST40_300_NOFPU    */ bfd_mach_st40_300_nofpu, \
+/* EF_ST40_300_SH4A     */ bfd_mach_st40_300_or_sh4a, \
+/* EF_ST40_300          */ bfd_mach_st40_300
 
 /* Convert arch_sh* into EF_SH*.  */
 int sh_find_elf_flags (unsigned int arch_set);
@@ -134,8 +149,9 @@ START_RELOC_NUMBERS (elf_sh_reloc_type)
   RELOC_NUMBER (R_SH_LOOP_END, 11)
 
   FAKE_RELOC (R_SH_FIRST_INVALID_RELOC, 12)
-  FAKE_RELOC (R_SH_LAST_INVALID_RELOC, 21)
-
+  FAKE_RELOC (R_SH_LAST_INVALID_RELOC, 20)
+  
+  RELOC_NUMBER (R_SH_SYM_DIFF, 21)
   RELOC_NUMBER (R_SH_GNU_VTINHERIT, 22)
   RELOC_NUMBER (R_SH_GNU_VTENTRY, 23)
   RELOC_NUMBER (R_SH_SWITCH8, 24)
Index: binutils/include/libiberty.h
===================================================================
--- binutils.orig/include/libiberty.h	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/include/libiberty.h	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -2,6 +2,7 @@
 
    Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
    2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
+   Copyright (C) 2006 STMicroelectronics
    
    Note - certain prototypes declared in this header file are for
    functions whoes implementation copyright does not belong to the
@@ -678,9 +679,21 @@ extern unsigned long libiberty_len;
    (char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len))
 #endif
 
+#ifdef __MINGW32__
+/* Reassign the pointer PATH without freeing anything.  */
+extern char *cygpath (const char *path);
+#define CYGPATH(path) do {path = cygpath (path);} while(0)
+
+/* Reassign the pointer PATH and free the previous content.  */
+extern void cygpath_replace (char **path);
+#else
+/* If these were properly empty statements then there might be warnings
+   which would kill a -Werror build.  */
+#define CYGPATH(path) do {} while (0)
+#endif
+
 #ifdef __cplusplus
 }
 #endif
 
-
 #endif /* ! defined (LIBIBERTY_H) */
Index: binutils/libiberty/configure.ac
===================================================================
--- binutils.orig/libiberty/configure.ac	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/libiberty/configure.ac	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -185,6 +185,7 @@ case "${host}" in
   *-*-freebsd2.2.[[012]])	frag=mh-fbsd21 ;;
   i370-*-opened*)       frag=mh-openedition ;;
   i[[34567]]86-*-windows*)	frag=mh-windows ;;
+  *-*-mingw*)		frag=mh-mingw ;;
 esac
 
 if [[ -n "${frag}" ]]; then
Index: binutils/libiberty/ChangeLog.st40
===================================================================
--- binutils.orig/libiberty/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/libiberty/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,24 @@
+2010-04-12  Christian Bruel  <christian.bruel@st.com>
+
+	* wrap_file.c: Fix prototypes.
+	Remove rename wrapper.
+	* cygpath.c: Shut-up warnings.
+	
+2009-10-01  Antony King  <antony.king@st.com>
+
+	* vasprintf.c [_GNU_SOURCE]: Define to enable C99 compatible vsprintf
+	when compiling for MinGW.
+
+2006-05-15  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* cygpath.c (cygpath): Convert pathnames consisting only of a
+	drive specifier to a valid directory (e.g 'c:' -> 'c:/').
+
+2006-03-15  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	Fix INSbl25520:
+	* cygpath.c: New file.
+	* config/mh-mingw: New file.
+	* configure.ac: Add mh-mingw makefile fragment when host is MinGW.
+	* configure: Regenerate.
+	* Makefile.in: Add cygpath.[co] .
Index: binutils/libiberty/wrap_file.c
===================================================================
--- binutils.orig/libiberty/wrap_file.c	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/libiberty/wrap_file.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,138 @@
+/*
+  THIS FILE HAS BEEN MODIFIED OR ADDED BY STMicroelectronics, Inc. 1999-2009
+*/
+/*
+ * wrap_fopen.c
+ *
+ * This file redefines the standard library functions 
+ * open, create, fopen, fdopen, freopen, remove, rename, unlink, stat for native WIN32 build.
+ * Its purpose is to preprocess argument strings in order to
+ * convert CYGWIN like paths specifiers into native WIN32 paths
+ * It uses the GNU ld -wrap functionality to replace
+ * at link time calls to fopen into calls to __wrap_fopen.
+ *
+ * This file must be linked with any DLL or EXE object
+ * and the linker command line must have the following  option:
+ * -Wl,-wrap,open,-wrap,creat,-wrap,fopen,-wrap,freopen,-wrap,remove,-wrap,rename,-wrap,unlink,-wrap,stat
+ *
+ */
+
+#ifdef __MINGW32__
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <dirent.h>
+#include <unistd.h>
+
+#include "libiberty.h"
+
+/*
+ * Declare real versions of functions.
+ */
+extern int __real_open (const char *pathname, int flags, mode_t mode);
+extern int __real_creat (const char *pathname, mode_t mode);
+extern FILE *__real_fopen (const char *path, const char *mode);
+extern FILE *__real_freopen (const char *path, const char *mode, FILE *stream);
+extern int __real_unlink (const char *pathname);
+extern int __real_remove (const char *pathname);
+extern int __real_stat (const char *file_name, struct stat *buf);
+extern int __real_chdir (const char *path);
+extern int __real_rmdir (const char *pathname); 
+extern DIR *__real_opendir (const char *name);
+extern int __real_access (const char *pathname, int mode);
+
+/*
+ * Following is the implementation of replacement functions.
+ */
+int 
+__wrap_open (const char *pathname, int flags, mode_t mode)
+{
+  int r;
+  char *path = cygpath (pathname);
+  r = __real_open (path, flags, mode);
+  return r;
+}
+
+int 
+__wrap_creat (const char *pathname, mode_t mode)
+{
+  int r;
+  char *path = cygpath (pathname);
+  r = __real_creat (path, mode);
+  return r;
+}
+
+FILE *
+__wrap_fopen (const char *pathname, const char *mode)
+{
+  FILE *f;
+  char *path = cygpath (pathname);
+  f = __real_fopen (path, mode);
+  return f;
+}
+
+FILE *__wrap_freopen (const char *pathname, const char *mode, FILE *stream)
+{
+  FILE *f;
+  char *path = cygpath (pathname);
+  f = __real_freopen (path, mode, stream);
+  return f;
+}
+
+int __wrap_unlink (const char *pathname) 
+{
+  int r;
+  char *path = cygpath (pathname);
+  r = __real_unlink (path);
+  return r;
+}
+
+int __wrap_remove (const char *pathname)
+{
+  int r;
+  char *path = cygpath (pathname);
+  r = __real_remove (path);
+  return r;
+}
+
+int __wrap_stat(const char *pathname, struct stat *buf)
+{
+  int r;
+  char *path = cygpath (pathname);
+  r = __real_stat (path, buf);
+  return r;
+}
+
+int __wrap_chdir(const char *pathname)
+{
+  int r;
+  char *path = cygpath (pathname);
+  r = __real_chdir (path);
+  return r;
+}
+
+int __wrap_rmdir(const char *pathname)
+{
+  int r;
+  char *path = cygpath (pathname);
+  r = __real_rmdir (path);
+  return r;
+}
+
+DIR *__wrap_opendir(const char *pathname)
+{
+  DIR *d;
+  char *path = cygpath (pathname);
+  d = __real_opendir (path);
+  return d;
+}
+
+int __wrap_access(const char *pathname, int mode)
+{
+  int r; 
+  char *path = cygpath (pathname);
+  r = __real_access (path, mode);
+  return r;
+}
+
+#endif /* __MINGW32__ */
Index: binutils/libiberty/cygpath.c
===================================================================
--- binutils.orig/libiberty/cygpath.c	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/libiberty/cygpath.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,358 @@
+/* Basic Cygwin pathname support for MinGW.
+
+   Copyright (C) 2006 STMicroelectronics
+
+   This file is part of the libiberty library.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 51 Franklin Street - Fifth Floor,
+   Boston, MA 02110-1301, USA.
+
+
+   This file implements a limited amount of support for Cygwin paths.
+   It is intended for use by MinGW programs that must interact with Cygwin.
+
+   It is limited to absolute paths only.  I.e. Those beginning with Cygwin
+   mounts, such as /cygdrive/...  See the comment on cygpath() below.  */
+
+#include "libiberty.h"
+#include <string.h>
+#include <ctype.h>
+#include <windows.h>
+
+
+/* These are all the possible settings for the ST_CYGPATH_MODE
+   environment variable.  */
+static enum
+{
+  mode_unset,
+  mode_off,
+  mode_normal,
+  mode_full
+} mode = mode_unset;
+
+
+/* These are the values extracted from the registry.
+   They are extracted the first time cygpath is called.  */
+static const char *cygdrive = NULL;
+static struct mount
+{
+  /* The name of the Cygwin mount point.  E.g. "/usr/bin"  */
+  char *mount;
+
+  /* The actual Windows path that the mount translates to.  */
+  char *actual;
+
+  struct mount *next;
+} *mounts = NULL;
+
+
+/* Read a string from the Windows Registry.
+   KEY should be a valid handle from RegOpenKeyEx().
+   NAME should be the name of the value within the key.
+   The value should be of type REG_SZ.
+   If the value does not exist, is of the wrong typei, or another error
+   occurs, then NULL is returned.
+   Otherwise a malloced string is returned.  */
+static char *
+read_string_from_registry (HKEY key, const char *name)
+{
+  DWORD valuetype = REG_NONE;
+  DWORD valuesize = 0;
+  char *value = NULL;
+
+  if (RegQueryValueEx (key, name, NULL, &valuetype,
+		       NULL, &valuesize) == ERROR_SUCCESS
+      && valuetype == REG_SZ)
+    {
+      value = (char *)xmalloc (valuesize);
+      if (RegQueryValueEx (key, name, NULL, &valuetype, (unsigned char *)value,
+			   &valuesize) != ERROR_SUCCESS)
+	{
+	  free (value);
+	  value = NULL;
+	}
+    }
+
+  return value;
+}
+
+
+/* Fill in the mounts list (mounts is defined statically above).
+   All subkeys (not values) of KEY that contain a REG_SZ value named 'native'
+   are added to the start of the mounts list.  */
+static void
+read_mounts (HKEY key)
+{
+  int mountsize = 15;
+  char *mount = (char *)xmalloc (mountsize);
+  DWORD size = mountsize;
+  int index = 0;
+  int retval = 0;
+
+  /* For each subkey ...  */
+  while ((retval = RegEnumKeyEx (key, index, mount, &size, 0, NULL, 0, NULL))
+	 != ERROR_NO_MORE_ITEMS)
+    {
+      struct mount *newmount;
+      HKEY subkey;
+      char *actual;
+
+      switch (retval) {
+      case ERROR_MORE_DATA:
+	/* The buffer wasn't large enough for this key name.
+	   Unlike RegQueryValueEx, RegEnumKeyEx won't tell us how big it
+	   should be, so just make it bigger and try again.
+	   Note that this code path does NOT increment index.
+       	   Most of the time we will only be dealing with short strings.  */
+	mountsize += 10;
+	mount = (char *)xrealloc (mount, mountsize);
+	break;
+
+      case ERROR_SUCCESS:
+	/* Find the actual windows path.  */
+  	if (RegOpenKeyEx (key, mount, 0, KEY_READ, &subkey) != ERROR_SUCCESS)
+	  {
+	    index++;
+	    break;
+	  }
+	actual = read_string_from_registry (subkey, "native");	
+	RegCloseKey (subkey);
+	if (actual == NULL)
+	  {
+	    index++;
+	    break;
+	  }
+
+	/* Create the new entry in the mount table.  */
+	newmount = (struct mount *)xmalloc (sizeof (struct mount));
+	newmount->mount = xstrdup (mount);
+	newmount->actual = actual;
+	newmount->next = mounts;
+	mounts = newmount;
+	index++;
+	break;
+
+      default:
+	/* Don't infinite loop should any other return value occur.  */
+        index++;
+      }
+
+      /* The last call to RegEnumKeyEx may have clobbered size.
+         Fix it before the next call.  */
+      size = mountsize;
+    }
+
+  free (mount);
+}
+
+
+/* The top level registry reading function.
+   Open the keys, call the above functions to get the right values,
+   and clean up.  */
+static void
+read_registry (void)
+{
+  HKEY hcu_key, hlm_key;
+
+  /* Get key handles for the two places cygwin keeps its registry data.  */
+  if (RegOpenKeyEx (HKEY_CURRENT_USER,
+		    "Software\\Cygnus Solutions\\Cygwin\\mounts v2",
+		    0, KEY_READ, &hcu_key) != ERROR_SUCCESS)
+    hcu_key = NULL;
+
+  if (RegOpenKeyEx (HKEY_LOCAL_MACHINE,
+		    "SOFTWARE\\Cygnus Solutions\\Cygwin\\mounts v2",
+		    0, KEY_READ, &hlm_key) != ERROR_SUCCESS)
+    hlm_key = NULL;
+
+  /* Get the virtual mount point used for windows drives.  */
+  if (hcu_key)
+    cygdrive = read_string_from_registry (hcu_key, "cygdrive prefix");
+  if (hlm_key && cygdrive == NULL)
+    cygdrive = read_string_from_registry (hlm_key, "cygdrive prefix");
+
+  /* Read the other mount points.
+     Read hlm before hcu to ensure hcu settings get used by preference
+     by being closer on the mounts stack.  */
+  if (hlm_key)
+    read_mounts (hlm_key);
+  if (hcu_key)
+    read_mounts (hcu_key);
+
+  if (hlm_key)
+    RegCloseKey (hlm_key);
+  if (hcu_key)
+    RegCloseKey (hcu_key);
+}
+
+
+/* Given a path of unknown variety, return the same path with any
+   Cygwin mount points substituted.
+   This function always returns a malloced string which should be
+   freed when the the caller is finished with it.
+
+   The mapping is affected by the ST_CYGPATH_MODE environment variable.
+   See the fprintf messages below for full information.
+
+   It can replace /cygdrive/<letter>/..... style pathnames, even if the
+   user has used 'mount -c' to an alternative string.
+
+   It can replace (if enabled) other Cygwin mount points, such as
+   the usual '/', '/usr/bin', '/usr/lib', as well as any other user defined
+   mount points.
+
+   It does NOT attempt to convert any pathnames that look like native Windows
+   names - such as those starting with '<letter>:' or double slash (UNC).
+
+   It does NOT handle relative pathnames passing through cygwin mounts
+   (e.g. '../cygdrive/c'), or absolute paths with repeated directory
+   separators or relative elements within the mount name
+   (e.g. '/usr/./bin').
+   
+   It does NOT allow backslash \ directory separators within the actual mount
+   path (e.g. '/usr\bin').  Cygwin does not always allow them there either.  */
+char *
+cygpath (const char *path)
+{
+  char *result = NULL;
+
+  if (path == NULL)
+    return NULL;
+
+  /* If this is the first time this function has been called then read the
+     environment and registry.  */
+  if (mode == mode_unset)
+    {
+      char *env = getenv ("ST_CYGPATH_MODE");
+
+      if (env == NULL || strcmp (env, "normal") == 0)
+    	mode = mode_normal;
+      else if (strcmp (env, "full") == 0)
+	mode = mode_full;
+      else if (strcmp (env, "off") == 0)
+	mode = mode_off;
+
+      if (mode != mode_off)
+	read_registry();
+
+      if (mode == mode_unset)
+	{
+	  /* The variable was set, but not to any known value.
+	     Set up a default and print an informational message
+	     for the user.  */
+	  mode = mode_normal;
+	  fprintf (stderr, "ST_CYGPATH_MODE should be one of:\n");
+	  fprintf (stderr, " off    - Disable all path translation.\n");
+	  fprintf (stderr, " normal - Translate %s only.\n", cygdrive);
+	  fprintf (stderr, " full   - Translate all Cygwin mounts.\n");
+	}
+    }
+
+  /* First, test if this can only be a windows (non-cygwin) path.
+     This includes paths that start with a drive letter or UNC double slash.  */
+  if ((isalpha (path[0]) && path[1] == ':')
+      || ((path[0] == '\\' || path[0] == '/')
+	  && (path[1] == '\\' || path[1] == '/')))
+    result = xstrdup (path);
+
+  /* Second, handle /cygdrive/<letter>/ (or whatever) paths.  */
+  if (!result && cygdrive != NULL && (mode == mode_normal || mode == mode_full))
+    {
+      int length = strlen (cygdrive);
+      /* Note that cygwin does not allow '\\' instead of '/' in cygdrive.  */
+      if (strncmp (cygdrive, path, length) == 0
+	  && (path[length] == '/' || path[length] == '\\'
+	      || path[length] == '\0')
+	  && isalpha (path[length+1]))
+        {
+	  result = (char *)xmalloc (strlen (path) - length+1 + 1);
+	  result[0] = path[length+1];
+	  result[1] = ':';
+	  strcpy (result + 2, path + length + 2);
+	}
+    }
+
+  /* Third, handle other types of cygwin path.  */
+  if (!result && mounts != NULL && mode == mode_full)
+    {
+      int matched = 0;
+      struct mount *foundat = NULL;
+      struct mount *mount = mounts;
+      /* Find the longest matching mount point.
+	 This is important. If we just used the first matching mount point
+	 it would probably always match '/' when '/usr/bin' is right.
+	 Use the first of equal length matches - this allows current-user
+	 mounts to override 'local machine' mounts (can this happen?).
+         It is a match only if the matching part is followed by a directory
+         separator or the end of the path, except for the root mount point.  */
+      while (mount != NULL)
+	{
+	  int length = strlen (mount->mount);
+	  if (strncmp (mount->mount, path, length) == 0
+	      && matched < length
+	      && (length == 1 /* Special case for root mount point '/'.  */
+		  || path[length] == '/' || path[length] == '\\'
+		  || path[length] == '\0'))
+	    {
+	      matched = length;
+	      foundat = mount;
+	    }
+	  mount = mount->next;
+	}
+      if (matched)
+	{
+	  /* There was a match so do the substitution.
+	     If matched is 1 then it can only be the root mount point, in
+	     which case we do not want to remove the matched part as it is the 
+	     directory separator.  */
+	  if (matched == 1)
+	    matched = 0;
+	  result = (char *)xmalloc (strlen (foundat->actual) + strlen (path) + 1
+			    - matched);
+	  strcpy (result, foundat->actual);
+	  strcat (result, path + matched);
+	}
+    }
+
+  if (result)
+    {
+      /* Ensure that the return is never just a drive letter.
+	 This is not a valid directory on Windows, but code often
+	 trims trailing slashes.  */
+      int length = strlen(result);
+      if (result[length-1] == ':')
+	{
+	  result = (char *)xrealloc (result, length+2);
+	  result[length] = '/';
+	  result[length+1] = '\0';
+	}
+      return result;
+    }
+
+  /* If we get here then it must have been some other kind of path.  */
+  return xstrdup (path);
+}
+
+
+/* This is just to make inserting the conversion more convenient.
+   The CYGPATH_REPLACE is conditionally compiled so it is harder to
+   add clean up code to go with it without this.  */
+void
+cygpath_replace (char **path)
+{
+  char *result = cygpath (*path);
+  free (*path);
+  *path = result;
+}
Index: binutils/libiberty/Makefile.in
===================================================================
--- binutils.orig/libiberty/Makefile.in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/libiberty/Makefile.in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -4,6 +4,7 @@
 # Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
 # 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
 # Free Software Foundation
+#   Copyright (C) 2006 STMicroelectronics
 #
 # This file is part of the libiberty library.
 # Libiberty is free software; you can redistribute it and/or
@@ -125,7 +126,7 @@ COMPILE.c = $(CC) -c @DEFS@ $(CFLAGS) $(CPPFLAGS)
 CFILES = alloca.c argv.c asprintf.c atexit.c				\
 	basename.c bcmp.c bcopy.c bsearch.c bzero.c			\
 	calloc.c choose-temp.c clock.c concat.c cp-demangle.c		\
-	 cp-demint.c cplus-dem.c crc32.c				\
+	 cp-demint.c cplus-dem.c crc32.c cygpath.c			\
 	dwarfnames.c dyn-string.c					\
 	fdmatch.c ffs.c fibheap.c filename_cmp.c floatformat.c		\
 	fnmatch.c fopen_unlocked.c					\
@@ -155,7 +156,7 @@ CFILES = alloca.c argv.c asprintf.c atexit.c				\
 	timeval-utils.c tmpnam.c					\
 	unlink-if-ordinary.c						\
 	vasprintf.c vfork.c vfprintf.c vprintf.c vsnprintf.c vsprintf.c	\
-	waitpid.c							\
+	waitpid.c wrap_file.c						\
 	xatexit.c xexit.c xmalloc.c xmemdup.c xstrdup.c xstrerror.c	\
 	 xstrndup.c
 
@@ -198,6 +199,7 @@ CONFIGURED_OFILES = ./asprintf.$(objext) ./atexit.
 	./basename.$(objext) ./bcmp.$(objext) ./bcopy.$(objext)		\
 	./bsearch.$(objext) ./bzero.$(objext)				\
 	./calloc.$(objext) ./clock.$(objext) ./copysign.$(objext)	\
+	./cygpath.$(objext)						\
 	./_doprnt.$(objext)						\
 	 ./ffs.$(objext)						\
 	./getcwd.$(objext) ./getpagesize.$(objext)			\
@@ -221,7 +223,7 @@ CONFIGURED_OFILES = ./asprintf.$(objext) ./atexit.
 	./tmpnam.$(objext)						\
 	./vasprintf.$(objext) ./vfork.$(objext) ./vfprintf.$(objext)	\
 	 ./vprintf.$(objext) ./vsnprintf.$(objext) ./vsprintf.$(objext)	\
-	./waitpid.$(objext)
+	./waitpid.$(objext) ./wrap_file.$(objext)
 
 # These files are installed if the library has been configured to do so.
 INSTALLED_HEADERS =                                                     \
@@ -629,6 +631,12 @@ $(CONFIGURED_OFILES): stamp-picdir
 	else true; fi
 	$(COMPILE.c) $(srcdir)/dwarfnames.c $(OUTPUT_OPTION)
 
+./cygpath.$(objext): $(srcdir)/cygpath.c config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h
+	if [ x"$(PICFLAG)" != x ]; then \
+	  $(COMPILE.c) $(PICFLAG) $(srcdir)/cygpath.c -o pic/$@; \
+	else true; fi
+	$(COMPILE.c) $(srcdir)/cygpath.c $(OUTPUT_OPTION)
+
 ./dyn-string.$(objext): $(srcdir)/dyn-string.c config.h $(INCDIR)/ansidecl.h \
 	$(INCDIR)/dyn-string.h $(INCDIR)/libiberty.h
 	if [ x"$(PICFLAG)" != x ]; then \
@@ -1214,6 +1222,13 @@ $(CONFIGURED_OFILES): stamp-picdir
 	else true; fi
 	$(COMPILE.c) $(srcdir)/waitpid.c $(OUTPUT_OPTION)
 
+./wrap_file.$(objext): $(srcdir)/wrap_file.c  config.h $(INCDIR)/ansidecl.h \
+	$(INCDIR)/libiberty.h
+	if [ x"$(PICFLAG)" != x ]; then \
+	  $(COMPILE.c) $(PICFLAG) $(srcdir)/wrap_file.c -o pic/$@; \
+	else true; fi
+	$(COMPILE.c) $(srcdir)/wrap_file.c $(OUTPUT_OPTION)
+
 ./xatexit.$(objext): $(srcdir)/xatexit.c config.h $(INCDIR)/ansidecl.h \
 	$(INCDIR)/libiberty.h
 	if [ x"$(PICFLAG)" != x ]; then \
Index: binutils/libiberty/config/mh-mingw
===================================================================
--- binutils.orig/libiberty/config/mh-mingw	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/libiberty/config/mh-mingw	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1 @@
+EXTRA_OFILES=cygpath.o wrap_file.o
Index: binutils/libiberty/configure
===================================================================
--- binutils.orig/libiberty/configure	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/libiberty/configure	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -4842,6 +4842,7 @@ case "${host}" in
   *-*-freebsd2.2.[012])	frag=mh-fbsd21 ;;
   i370-*-opened*)       frag=mh-openedition ;;
   i[34567]86-*-windows*)	frag=mh-windows ;;
+  *-*-mingw*)		frag=mh-mingw ;;
 esac
 
 if [ -n "${frag}" ]; then
Index: binutils/libiberty/cp-demangle.c
===================================================================
--- binutils.orig/libiberty/cp-demangle.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/libiberty/cp-demangle.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -5203,7 +5203,7 @@ d_demangle_callback (const char *mangled, int opti
     }
   type;
   struct d_info di;
-  struct demangle_component *dc;
+  struct demangle_component *dc = NULL;
   int status;
 
   if (mangled[0] == '_' && mangled[1] == 'Z')
Index: binutils/libiberty/vasprintf.c
===================================================================
--- binutils.orig/libiberty/vasprintf.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/libiberty/vasprintf.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,7 @@
 /* Like vsprintf but provides a pointer to malloc'd storage, which must
    be freed by the caller.
    Copyright (C) 1994, 2003, 2011 Free Software Foundation, Inc.
+   Copyright (C) 2009 STMicroelectronics
 
 This file is part of the libiberty library.
 Libiberty is free software; you can redistribute it and/or
@@ -18,6 +19,10 @@ License along with libiberty; see the file COPYING
 not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 Boston, MA 02110-1301, USA.  */
 
+/* Define to enable C99 compatible vsprintf in MinGW.  */
+#undef  _GNU_SOURCE
+#define _GNU_SOURCE
+
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
Index: binutils/binutils/doc/Makefile.in
===================================================================
--- binutils.orig/binutils/doc/Makefile.in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/binutils/doc/Makefile.in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -199,6 +199,7 @@ RANLIB = @RANLIB@
 SED = @SED@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
+SIM = @SIM@
 STRIP = @STRIP@
 USE_NLS = @USE_NLS@
 VERSION = @VERSION@
Index: binutils/binutils/configure.in
===================================================================
--- binutils.orig/binutils/configure.in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/binutils/configure.in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -19,6 +19,8 @@ AC_USE_SYSTEM_EXTENSIONS
 ACX_LARGEFILE
 LT_INIT
 
+AC_SUBST(SIM)
+
 AC_ARG_ENABLE(targets,
 [  --enable-targets        alternative target configurations],
 [case "${enableval}" in
Index: binutils/binutils/stabs.c
===================================================================
--- binutils.orig/binutils/stabs.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/binutils/stabs.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -2593,7 +2593,7 @@ parse_stab_members (void *dhandle, struct stab_han
 	  bfd_boolean constp, volatilep, staticp;
 	  bfd_vma voffset;
 	  debug_type context;
-	  const char *physname;
+	  const char *physname = NULL;
 	  bfd_boolean varargs;
 
 	  if (look_ahead_type != DEBUG_TYPE_NULL)
Index: binutils/binutils/ChangeLog.st40
===================================================================
--- binutils.orig/binutils/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/binutils/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,31 @@
+2011-12-04  Christian Bruel  <christian.bruel@st.com>
+
+       * stabs.c (parse_stab_members): Initialize physname.
+
+2010-09-02  Christian Bruel  <christian.bruel@st.com>
+
+	* readelf.c (target_specific_reloc_handling): Handle SH relocations.
+
+2009-08-14  Christian Bruel  <christian.bruel@st.com>
+
+	* dwarf.c (display_debug_frames): Remove invalid frame_need_space.
+
+2007-09-07  Antony King  <antony.king@st.com>
+
+	Fix INSbl25564:
+	* dwarf.c (display_debug_frames): Ignore CFI entries with
+	negative register numbers.
+
+2006-03-01  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* readelf.c (get_machine_flags): Recognise EF_ST40_300_SH2A_NOFPU,
+	EF_ST40_300_SH4A_NOFPU, EF_ST40_300_NOFPU, EF_ST40_300_SH4A,
+	and EF_ST40_300.
+
+2005-04-27  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	Fix INSbl23649:
+	* arsup.c (ibfd): New variable.
+	(ar_open): Prevent loss of unsaved data. Remove local definition of
+	ibfd variable.
+	(ar_save): Clean up ibfd data.
Index: binutils/binutils/readelf.c
===================================================================
--- binutils.orig/binutils/readelf.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/binutils/readelf.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -2,6 +2,7 @@
    Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
    2008, 2009, 2010, 2011, 2012
    Free Software Foundation, Inc.
+   Copyright (c) 2006  STMicroelectronics.
 
    Originally developed by Eric Youngdale <eric@andante.jic.com>
    Modifications by Nick Clifton <nickc@redhat.com>
@@ -2512,6 +2513,11 @@ get_machine_flags (unsigned e_flags, unsigned e_ma
 	    case EF_SH2A_SH3_NOFPU: strcat (buf, ", sh2a-nofpu-or-sh3-nommu"); break;
 	    case EF_SH2A_SH4: strcat (buf, ", sh2a-or-sh4"); break;
 	    case EF_SH2A_SH3E: strcat (buf, ", sh2a-or-sh3e"); break;
+	    case EF_ST40_300_SH2A_NOFPU: strcat (buf, ", st40-300-nofpu-or-sh2a-nofpu"); break;
+	    case EF_ST40_300_SH4A_NOFPU: strcat (buf, ", st40-300-nofpu-or-sh4a-nofpu"); break;
+	    case EF_ST40_300_NOFPU: strcat (buf, ", st40-300-nofpu"); break;
+	    case EF_ST40_300_SH4A: strcat (buf, ", st40-300-or-sh4a"); break;
+	    case EF_ST40_300: strcat (buf, ", st40-300"); break;
 	    default: strcat (buf, _(", unknown ISA")); break;
 	    }
 
@@ -9759,6 +9765,10 @@ target_specific_reloc_handling (Elf_Internal_Rela
 
   switch (elf_header.e_machine)
     {
+    case EM_SH:
+      return reloc_type == 21 || reloc_type == 24
+	|| reloc_type == 25 || reloc_type == 26;
+
     case EM_MN10300:
     case EM_CYGNUS_MN10300:
       {
Index: binutils/binutils/Makefile.am
===================================================================
--- binutils.orig/binutils/Makefile.am	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/binutils/Makefile.am	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -162,12 +162,36 @@ check-DEJAGNU: site.exp
 	EXPECT=$(EXPECT); export EXPECT; \
 	runtest=$(RUNTEST); \
 	if $(SHELL) -c "$$runtest --version" > /dev/null 2>&1; then \
-	  CC_FOR_TARGET="$(CC_FOR_TARGET)" CFLAGS_FOR_TARGET="$(CFLAGS)" \
+	  CC_FOR_TARGET="$(CC_FOR_TARGET)" CFLAGS_FOR_TARGET="$(FLAGS_FOR_TARGET)" \
 		$$runtest --tool $(DEJATOOL) --srcdir $${srcdir}/testsuite \
 			$(RUNTESTFLAGS); \
 	else echo "WARNING: could not find \`runtest'" 1>&2; :;\
 	fi
 
+site.exp: Makefile
+	@echo 'Making a new site.exp file...'
+	@test ! -f site.bak || rm -f site.bak
+	@echo '## these variables are automatically generated by make ##' > $@-t
+	@echo '# Do not edit here.  If you wish to override these values' >> $@-t
+	@echo '# edit the last section' >> $@-t
+	@echo 'set tool $(DEJATOOL)' >> $@-t
+	@echo 'set srcdir $(srcdir)' >> $@-t
+	@echo 'set objdir' `pwd` >> $@-t
+	@echo 'set host_alias $(host_alias)' >> $@-t
+	@echo 'set host_triplet $(host_triplet)' >> $@-t
+	@echo 'set target_alias $(target_alias)' >> $@-t
+	@echo 'set target_triplet $(target_triplet)' >> $@-t
+	@echo 'set build_alias $(build_alias)' >> $@-t
+	@echo 'set build_triplet $(build_triplet)' >> $@-t
+	@echo 'set target_list ${target_alias}' >> $@-t
+	@echo 'set boards_dir ${srcdir}/../../boards' >> $@-t
+	@echo 'set SIM "$(SIM)"' >> $@-t
+	@echo 'set CC_FOR_TARGET "$(CC_FOR_TARGET)"' >> $@-t
+	@echo '## All variables above are generated by configure. Do Not Edit ##' >> $@-t
+	@test ! -f site.exp || sed '1,/^## All variables above are.*##/ d' site.exp >> $@-t
+	@test ! -f site.exp || mv site.exp site.bak
+	@mv $@-t site.exp
+
 installcheck-local:
 	/bin/sh $(srcdir)/sanity.sh $(bindir)
 
Index: binutils/binutils/Makefile.in
===================================================================
--- binutils.orig/binutils/Makefile.in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/binutils/Makefile.in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -342,6 +342,7 @@ RANLIB = @RANLIB@
 SED = @SED@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
+SIM = @SIM@
 STRIP = @STRIP@
 USE_NLS = @USE_NLS@
 VERSION = @VERSION@
@@ -1058,25 +1059,6 @@ GTAGS:
 
 distclean-tags:
 	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
-site.exp: Makefile
-	@echo 'Making a new site.exp file...'
-	@echo '## these variables are automatically generated by make ##' >site.tmp
-	@echo '# Do not edit here.  If you wish to override these values' >>site.tmp
-	@echo '# edit the last section' >>site.tmp
-	@echo 'set srcdir $(srcdir)' >>site.tmp
-	@echo "set objdir `pwd`" >>site.tmp
-	@echo 'set build_alias "$(build_alias)"' >>site.tmp
-	@echo 'set build_triplet $(build_triplet)' >>site.tmp
-	@echo 'set host_alias "$(host_alias)"' >>site.tmp
-	@echo 'set host_triplet $(host_triplet)' >>site.tmp
-	@echo 'set target_alias "$(target_alias)"' >>site.tmp
-	@echo 'set target_triplet $(target_triplet)' >>site.tmp
-	@echo '## All variables above are generated by configure. Do Not Edit ##' >>site.tmp
-	@test ! -f site.exp || \
-	  sed '1,/^## All variables above are.*##/ d' site.exp >> site.tmp
-	@-rm -f site.bak
-	@test ! -f site.exp || mv site.exp site.bak
-	@mv site.tmp site.exp
 
 distclean-DEJAGNU:
 	-rm -f site.exp site.bak
@@ -1243,12 +1225,36 @@ check-DEJAGNU: site.exp
 	EXPECT=$(EXPECT); export EXPECT; \
 	runtest=$(RUNTEST); \
 	if $(SHELL) -c "$$runtest --version" > /dev/null 2>&1; then \
-	  CC_FOR_TARGET="$(CC_FOR_TARGET)" CFLAGS_FOR_TARGET="$(CFLAGS)" \
+	  CC_FOR_TARGET="$(CC_FOR_TARGET)" CFLAGS_FOR_TARGET="$(FLAGS_FOR_TARGET)" \
 		$$runtest --tool $(DEJATOOL) --srcdir $${srcdir}/testsuite \
 			$(RUNTESTFLAGS); \
 	else echo "WARNING: could not find \`runtest'" 1>&2; :;\
 	fi
 
+site.exp: Makefile
+	@echo 'Making a new site.exp file...'
+	@test ! -f site.bak || rm -f site.bak
+	@echo '## these variables are automatically generated by make ##' > $@-t
+	@echo '# Do not edit here.  If you wish to override these values' >> $@-t
+	@echo '# edit the last section' >> $@-t
+	@echo 'set tool $(DEJATOOL)' >> $@-t
+	@echo 'set srcdir $(srcdir)' >> $@-t
+	@echo 'set objdir' `pwd` >> $@-t
+	@echo 'set host_alias $(host_alias)' >> $@-t
+	@echo 'set host_triplet $(host_triplet)' >> $@-t
+	@echo 'set target_alias $(target_alias)' >> $@-t
+	@echo 'set target_triplet $(target_triplet)' >> $@-t
+	@echo 'set build_alias $(build_alias)' >> $@-t
+	@echo 'set build_triplet $(build_triplet)' >> $@-t
+	@echo 'set target_list ${target_alias}' >> $@-t
+	@echo 'set boards_dir ${srcdir}/../../boards' >> $@-t
+	@echo 'set SIM "$(SIM)"' >> $@-t
+	@echo 'set CC_FOR_TARGET "$(CC_FOR_TARGET)"' >> $@-t
+	@echo '## All variables above are generated by configure. Do Not Edit ##' >> $@-t
+	@test ! -f site.exp || sed '1,/^## All variables above are.*##/ d' site.exp >> $@-t
+	@test ! -f site.exp || mv site.exp site.bak
+	@mv $@-t site.exp
+
 installcheck-local:
 	/bin/sh $(srcdir)/sanity.sh $(bindir)
 
Index: binutils/binutils/dwarf.c
===================================================================
--- binutils.orig/binutils/dwarf.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/binutils/dwarf.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,7 @@
 /* dwarf.c -- display DWARF contents of a BFD binary file
    Copyright 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
    Free Software Foundation, Inc.
+   Copyright (c) 2010  STMicroelectronics.
 
    This file is part of GNU Binutils.
 
@@ -5158,7 +5159,6 @@ display_debug_frames (struct dwarf_section *sectio
 		  break;
 		case DW_CFA_restore_extended:
 		  reg = LEB ();
-		  frame_need_space (fc, reg);
 		  if (frame_need_space (fc, reg) >= 0)
 		    fc->col_type[reg] = DW_CFA_undefined;
 		  break;
Index: binutils/binutils/configure
===================================================================
--- binutils.orig/binutils/configure	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/binutils/configure	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -650,6 +650,7 @@ YFLAGS
 YACC
 NO_WERROR
 WARN_CFLAGS
+SIM
 OTOOL64
 OTOOL
 LIPO
@@ -11548,6 +11549,8 @@ CC="$lt_save_CC"
 
 
 
+
+
 # Check whether --enable-targets was given.
 if test "${enable_targets+set}" = set; then :
   enableval=$enable_targets; case "${enableval}" in
Index: binutils/binutils/arsup.c
===================================================================
--- binutils.orig/binutils/arsup.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/binutils/arsup.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,7 @@
 /* arsup.c - Archive support for MRI compatibility
    Copyright 1992, 1994, 1995, 1996, 1997, 1999, 2000, 2001, 2002, 2003,
    2004, 2005, 2007, 2008 Free Software Foundation, Inc.
+   Copyright (c) 2006  STMicroelectronics.
 
    This file is part of GNU Binutils.
 
@@ -146,6 +147,7 @@ maybequit (void)
 }
 
 
+static bfd *ibfd = NULL;
 void
 ar_open (char *name, int t)
 {
@@ -153,6 +155,14 @@ ar_open (char *name, int t)
   const char *bname = lbasename (name);
   real_name = name;
 
+  if (ibfd)
+    {
+      fprintf (stderr,_("%s: Cannot OPEN second file until after SAVE\n"),
+	       program_name);
+      maybequit ();
+      return;
+    }
+
   /* Prepend tmp- to the beginning, to avoid file-name clashes after
      truncation on filesystems with limited namespaces (DOS).  */
   sprintf (tname, "%.*stmp-%s", (int) (bname - name), name, bname);
@@ -172,7 +182,6 @@ ar_open (char *name, int t)
 	{
 	  bfd **ptr;
 	  bfd *element;
-	  bfd *ibfd;
 
 	  ibfd = bfd_openr (name, NULL);
 
@@ -335,9 +344,11 @@ ar_save (void)
       char *ofilename = xstrdup (bfd_get_filename (obfd));
 
       bfd_close (obfd);
+      if (ibfd) bfd_close (ibfd);
 
       smart_rename (ofilename, real_name, 0);
       obfd = 0;
+      ibfd = 0;
       free (ofilename);
     }
 }
Index: binutils/bfd/cpu-sh.c
===================================================================
--- binutils.orig/bfd/cpu-sh.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/cpu-sh.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -2,6 +2,7 @@
    Copyright 1993, 1994, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005,
    2007 Free Software Foundation, Inc.
    Hacked by Steve Chamberlain of Cygnus Support.
+   Copyright (c) 2009  STMicroelectronics.
 
    This file is part of BFD, the Binary File Descriptor library.
 
@@ -45,6 +46,11 @@
 #define SH2A_NOFPU_OR_SH3_NOMMU_NEXT       arch_info_struct + 17
 #define SH2A_OR_SH4_NEXT                   arch_info_struct + 18
 #define SH2A_OR_SH3E_NEXT                  arch_info_struct + 19
+#define ST40_300_NOFPU_OR_SH2A_NOFPU_NEXT  arch_info_struct + 20
+#define ST40_300_NOFPU_OR_SH4A_NOFPU_NEXT  arch_info_struct + 21
+#define ST40_300_NOFPU_NEXT                arch_info_struct + 22
+#define ST40_300_OR_SH4A_NEXT              arch_info_struct + 23
+#define ST40_300_NEXT                      arch_info_struct + 24
 #define SH64_NEXT                          NULL
 
 static const bfd_arch_info_type arch_info_struct[] =
@@ -335,6 +341,81 @@ static const bfd_arch_info_type arch_info_struct[]
     SH2A_OR_SH3E_NEXT
   },
   {
+    32,				/* 32 bits in a word.  */
+    32,				/* 32 bits in an address.  */
+    8,				/* 8 bits in a byte.  */
+    bfd_arch_sh,
+    bfd_mach_st40_300_nofpu_or_sh2a_nofpu,
+    "sh",			/* Architecture name.  */
+    "st40-300-nofpu-or-sh2a-nofpu",		/* Machine name.  */
+    1,
+    FALSE,			/* Not the default.  */
+    bfd_default_compatible,
+    bfd_default_scan,
+    bfd_arch_default_fill,
+    ST40_300_NOFPU_OR_SH2A_NOFPU_NEXT
+  },
+  {
+    32,				/* 32 bits in a word.  */
+    32,				/* 32 bits in an address.  */
+    8,				/* 8 bits in a byte.  */
+    bfd_arch_sh,
+    bfd_mach_st40_300_nofpu_or_sh4a_nofpu,
+    "sh",			/* Architecture name.  */
+    "st40-300-nofpu-or-sh4a-nofpu",		/* Machine name.  */
+    1,
+    FALSE,			/* Not the default.  */
+    bfd_default_compatible,
+    bfd_default_scan,
+    bfd_arch_default_fill,
+    ST40_300_NOFPU_OR_SH4A_NOFPU_NEXT
+  },
+  {
+    32,				/* 32 bits in a word.  */
+    32,				/* 32 bits in an address.  */
+    8,				/* 8 bits in a byte.  */
+    bfd_arch_sh,
+    bfd_mach_st40_300_nofpu,
+    "sh",			/* Architecture name.  */
+    "st40-300-nofpu",		/* Machine name.  */
+    1,
+    FALSE,			/* Not the default.  */
+    bfd_default_compatible,
+    bfd_default_scan,
+    bfd_arch_default_fill,
+    ST40_300_NOFPU_NEXT
+  },
+  {
+    32,				/* 32 bits in a word.  */
+    32,				/* 32 bits in an address.  */
+    8,				/* 8 bits in a byte.  */
+    bfd_arch_sh,
+    bfd_mach_st40_300_or_sh4a,
+    "sh",			/* Architecture name.  */
+    "st40-300-or-sh4a",		/* Machine name.  */
+    1,
+    FALSE,			/* Not the default.  */
+    bfd_default_compatible,
+    bfd_default_scan,
+    bfd_arch_default_fill,
+    ST40_300_OR_SH4A_NEXT
+  },
+  {
+    32,				/* 32 bits in a word.  */
+    32,				/* 32 bits in an address.  */
+    8,				/* 8 bits in a byte.  */
+    bfd_arch_sh,
+    bfd_mach_st40_300,
+    "sh",			/* Architecture name.  */
+    "st40-300",			/* Machine name.  */
+    1,
+    FALSE,			/* Not the default.  */
+    bfd_default_compatible,
+    bfd_default_scan,
+    bfd_arch_default_fill,
+    ST40_300_NEXT
+  },
+  {
     64,				/* 64 bits in a word.  */
     64,				/* 64 bits in an address.  */
     8,				/* 8 bits in a byte.  */
@@ -399,6 +480,12 @@ static struct { unsigned long bfd_mach, arch, arch
   { bfd_mach_sh4_nofpu,       arch_sh4_nofpu,       arch_sh4_nofpu_up },
   { bfd_mach_sh4_nommu_nofpu, arch_sh4_nommu_nofpu, arch_sh4_nommu_nofpu_up },
   { bfd_mach_sh4a_nofpu,      arch_sh4a_nofpu,      arch_sh4a_nofpu_up },
+
+  { bfd_mach_st40_300_nofpu_or_sh2a_nofpu,           arch_st40_300_nofpu_or_sh2a_nofpu,	  arch_st40_300_nofpu_or_sh2a_nofpu_up },
+  { bfd_mach_st40_300_nofpu_or_sh4a_nofpu,           arch_st40_300_nofpu_or_sh4a_nofpu,	  arch_st40_300_nofpu_or_sh4a_nofpu_up },
+  { bfd_mach_st40_300_nofpu,  arch_st40_300_nofpu,   arch_st40_300_nofpu_up },
+  { bfd_mach_st40_300_or_sh4a,arch_st40_300_or_sh4a, arch_st40_300_or_sh4a_up },
+  { bfd_mach_st40_300,        arch_st40_300,         arch_st40_300_up },
   { 0, 0, 0 }   /* Terminator.  */
 };
 
Index: binutils/bfd/doc/ChangeLog.st40
===================================================================
--- binutils.orig/bfd/doc/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/bfd/doc/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,15 @@
+2009-10-28  Antony King  <antony.king@st.com>
+
+	* Makefile.am: Fix libiberty/libiberty.a chew.c link order.
+	* Makefile.in: Regenerate.
+	
+2007-10-02  Antony King  <antony.king@st.com>
+
+	* Makefile.am: Add libiberty.a to $(MKDOC).
+	* Makefile.in: Regenerate.
+
+2006-01-06  Denis Pilat  <denis.pilat@st.com>
+
+	Apply the insight minGW patch 
+	http://sourceforge.net/forum/forum.php?forum_id=511897 for the following:
+	* chew.c: Prevent \r\n line endings.
Index: binutils/bfd/doc/Makefile.in
===================================================================
--- binutils.orig/bfd/doc/Makefile.in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/doc/Makefile.in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -758,7 +758,7 @@ uninstall-am: uninstall-dvi-am uninstall-html-am u
 
 $(MKDOC): $(srcdir)/chew.c
 	$(CC_FOR_BUILD) -o chew.$$$$ $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD) \
-	  $(H_CFLAGS) $(AM_CPPFLAGS) $(srcdir)/chew.c; \
+	  $(H_CFLAGS) $(AM_CPPFLAGS) $(srcdir)/chew.c ../../libiberty/libiberty.a; \
 	$(SHELL) $(srcdir)/../../move-if-change chew.$$$$ $(MKDOC)
 
 protos: libbfd.h libcoff.h bfd.h
Index: binutils/bfd/doc/chew.c
===================================================================
--- binutils.orig/bfd/doc/chew.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/doc/chew.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -84,6 +84,7 @@
    Foo.  */
 
 #include "ansidecl.h"
+#include "libiberty.h"
 #include <assert.h>
 #include <stdio.h>
 #include <ctype.h>
@@ -93,6 +94,12 @@
 #define DEF_SIZE 5000
 #define STACK 50
 
+#ifdef __MINGW32__
+/* Prevent \r\n\ line endings */
+#include <fcntl.h>
+unsigned int _CRT_fmode = _O_BINARY;
+#endif
+
 int internal_wanted;
 int internal_mode;
 
Index: binutils/bfd/doc/Makefile.am
===================================================================
--- binutils.orig/bfd/doc/Makefile.am	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/doc/Makefile.am	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -61,7 +61,7 @@ AM_CPPFLAGS = -I.. -I$(srcdir)/.. -I$(srcdir)/../.
 
 $(MKDOC): $(srcdir)/chew.c
 	$(CC_FOR_BUILD) -o chew.$$$$ $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD) \
-	  $(H_CFLAGS) $(AM_CPPFLAGS) $(srcdir)/chew.c; \
+	  $(H_CFLAGS) $(AM_CPPFLAGS) $(srcdir)/chew.c ../../libiberty/libiberty.a; \
 	$(SHELL) $(srcdir)/../../move-if-change chew.$$$$ $(MKDOC)
 
 protos: libbfd.h libcoff.h bfd.h
Index: binutils/bfd/archures.c
===================================================================
--- binutils.orig/bfd/archures.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/archures.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -3,6 +3,7 @@
    2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
    2012 Free Software Foundation, Inc.
    Hacked by John Gilmore and Steve Chamberlain of Cygnus Support.
+   Copyright (c) 2006  STMicroelectronics.
 
    This file is part of BFD, the Binary File Descriptor library.
 
@@ -290,6 +291,11 @@ DESCRIPTION
 .#define bfd_mach_sh4        0x40
 .#define bfd_mach_sh4_nofpu  0x41
 .#define bfd_mach_sh4_nommu_nofpu  0x42
+.#define bfd_mach_st40_300   0x430
+.#define bfd_mach_st40_300_nofpu 0x431
+.#define bfd_mach_st40_300_nofpu_or_sh2a_nofpu 0x432
+.#define bfd_mach_st40_300_nofpu_or_sh4a_nofpu 0x433
+.#define bfd_mach_st40_300_or_sh4a 0x434
 .#define bfd_mach_sh4a       0x4a
 .#define bfd_mach_sh4a_nofpu 0x4b
 .#define bfd_mach_sh4al_dsp  0x4d
Index: binutils/bfd/elf32-sh-relocs.h
===================================================================
--- binutils.orig/bfd/elf32-sh-relocs.h	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/elf32-sh-relocs.h	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -215,13 +215,27 @@
   EMPTY_HOWTO (18),
   EMPTY_HOWTO (19),
   EMPTY_HOWTO (20),
-  EMPTY_HOWTO (21),
+  /*EMPTY_HOWTO (21),*/
 
   /* The remaining relocs are a GNU extension used for relaxing.  The
      final pass of the linker never needs to do anything with any of
      these relocs.  Any required operations are handled by the
      relaxation code.  */
 
+  HOWTO (R_SH_SYM_DIFF,		/* type */
+	 0,			/* rightshift */
+	 0,			/* size (0 = byte, 1 = short, 2 = long) */
+	 0,			/* bitsize */
+	 FALSE,			/* pc_relative */
+	 0,			/* bitpos */
+	 complain_overflow_dont, /* complain_on_overflow */
+	 sh_elf_ignore_reloc,	/* special_function */
+	 "R_SH_SYM_DIFF",		/* name */
+	 FALSE,			/* partial_inplace */
+	 0,			/* src_mask */
+	 0,			/* dst_mask */
+	 TRUE),			/* pcrel_offset */
+
   /* GNU extension to record C++ vtable hierarchy */
   HOWTO (R_SH_GNU_VTINHERIT, /* type */
 	 0,			/* rightshift */
Index: binutils/bfd/config.bfd
===================================================================
--- binutils.orig/bfd/config.bfd	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/config.bfd	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1370,7 +1370,7 @@ case "${targ}" in
     ;;
 
 #ifdef BFD64
-  shl*-*-elf* | sh[1234]l*-*-elf* | sh3el*-*-elf* | shl*-*-kaos*)
+  sh*-superh-elf* | shl*-*-elf* | sh[1234]l*-*-elf* | sh3el*-*-elf* | shl*-*-kaos*)
     targ_defvec=bfd_elf32_shl_vec
     targ_selvecs="bfd_elf32_sh_vec shlcoff_vec shcoff_vec shlcoff_small_vec shcoff_small_vec bfd_elf32_sh64_vec bfd_elf32_sh64l_vec bfd_elf64_sh64_vec bfd_elf64_sh64l_vec"
     targ_underscore=yes
Index: binutils/bfd/linker.c
===================================================================
--- binutils.orig/bfd/linker.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/linker.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -491,6 +491,49 @@ _bfd_link_hash_table_init
   return bfd_hash_table_init (&table->table, newfunc, entsize);
 }
 
+/* Check if the symbol STRIKNG might be wrapped.  */
+
+bfd_boolean
+bfd_is_symbol_to_wrap (bfd *abfd, 
+                       struct bfd_link_info *info, 
+		       const char *string)
+{
+  if (info->wrap_hash != NULL)
+    {
+      const char *l;
+
+      l = string;
+      if (*l == bfd_get_symbol_leading_char (abfd) || *l == info->wrap_char)
+	{
+	  ++l;
+	}
+
+#undef WRAP
+#define WRAP "__wrap_"
+      if (!strncmp(WRAP, l, strlen(WRAP)) && 
+          bfd_hash_lookup (info->wrap_hash, l+strlen(WRAP), FALSE, FALSE)!=NULL)
+        return 1;
+
+      if (bfd_hash_lookup (info->wrap_hash, l, FALSE, FALSE) != NULL)
+        return 1;
+#undef WRAP
+
+#undef  REAL
+#define REAL "__real_"
+      if (!strncmp(REAL, l, strlen(REAL)) &&
+          bfd_hash_lookup (info->wrap_hash, l+strlen(REAL), FALSE, FALSE)!=NULL)
+	return 1;
+	
+      if (*l == '_'
+	  && CONST_STRNEQ (l, REAL)
+	  && bfd_hash_lookup (info->wrap_hash, l + sizeof REAL - 1,
+			      FALSE, FALSE) != NULL)
+	return 1;
+#undef  REAL
+    }
+    return 0;
+}
+
 /* Look up a symbol in a link hash table.  If follow is TRUE, we
    follow bfd_link_hash_indirect and bfd_link_hash_warning links to
    the real symbol.  */
Index: binutils/bfd/elf-eh-frame.c
===================================================================
--- binutils.orig/bfd/elf-eh-frame.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/elf-eh-frame.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -801,6 +801,23 @@ _bfd_elf_parse_eh_frame (bfd *abfd, struct bfd_lin
 
 	      /* Chain together the FDEs for each section.  */
 	      rsec = _bfd_elf_gc_mark_rsec (info, sec, gc_mark_hook, cookie);
+
+	      /* Iterates over all relocs corresponding to this address */
+	      if (get_elf_backend_data (abfd)->elf_machine_code == EM_SH 
+	         && info->relax_pass)
+		while (rsec==NULL)
+		  {
+		    cookie->rel++;
+		    if (GET_RELOC(buf)==NULL)
+		      {
+			/* This reloc doesnot correspond to this address anymore :
+		           Step back once */
+			cookie->rel--;
+			break;
+		      }
+		    rsec = _bfd_elf_gc_mark_rsec(info, sec, gc_mark_hook, cookie);
+		  }
+
 	      /* RSEC will be NULL if FDE was cleared out as it was belonging to
 		 a discarded SHT_GROUP.  */
 	      if (rsec)
Index: binutils/bfd/po/ChangeLog.st40
===================================================================
--- binutils.orig/bfd/po/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/bfd/po/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,4 @@
+2006-03-15  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* Make-in (SRC-POTFILES, BLD-POTFILES): Swap chmod and mv commands for
+	windows compatibility.
Index: binutils/bfd/po/Make-in
===================================================================
--- binutils.orig/bfd/po/Make-in	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/po/Make-in	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,7 @@
 # Makefile for program source directory in GNU NLS utilities package.
 # Copyright (C) 1995, 1996, 1997 by Ulrich Drepper <drepper@gnu.ai.mit.edu>
 # Copyright 2001, 2003, 2006, 2007, 2009 Free Software Foundation, Inc.
+# Copyright (c) 2006  STMicroelectronics.
 #
 # This file may be copied and used freely without restrictions.  It can
 # be used in projects which are not available under the GNU Public License
@@ -258,8 +259,8 @@ SRC-POTFILES: SRC-POTFILES.in
 	            -e '/^[ 	]*$$/d' \
 		    -e "s@.*@	$$posrcprefix& \\\\@" < $(srcdir)/$@.in \
 		| sed -e '$$s/\\$$//') > $@-t \
-	    && chmod a-w $@-t \
-	    && mv $@-t $@ )
+	    && mv $@-t $@ \
+	    && chmod a-w $@ )
 
 BLD-POTFILES: BLD-POTFILES.in
 	  ( rm -f $@-t $@ \
@@ -267,8 +268,8 @@ BLD-POTFILES: BLD-POTFILES.in
 	            -e '/^[ 	]*$$/d' \
 		    -e "s@.*@	../& \\\\@" < $(srcdir)/$@.in \
 		| sed -e '$$s/\\$$//') > $@-t \
-	    && chmod a-w $@-t \
-	    && mv $@-t $@ )
+	    && mv $@-t $@ \
+	    && chmod a-w $@ )
 
 SRC-POTFILES.in: @MAINT@ ../Makefile
 	cd .. && $(MAKE) po/SRC-POTFILES.in
Index: binutils/bfd/elf32-sh.c
===================================================================
--- binutils.orig/bfd/elf32-sh.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/elf32-sh.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -3,6 +3,7 @@
    2006, 2007, 2008, 2009, 2010, 2011, 2012
    Free Software Foundation, Inc.
    Contributed by Ian Lance Taylor, Cygnus Support.
+   Copyright (c) 2009  STMicroelectronics.
 
    This file is part of BFD, the Binary File Descriptor library.
 
@@ -32,12 +33,27 @@
 #include "libiberty.h"
 #include "../opcodes/sh-opc.h"
 
+/* Used to hold data for function called through bfd_map_over_sections.  */
+struct sh_relaxed_section_info 
+{
+  bfd_size_type size;
+  bfd_vma base;
+  bfd_vma addr;
+  bfd_vma toaddr;
+  int count;
+  bfd_boolean overflow_avoided;
+  Elf_Internal_Rela *irelalign;
+};
+
+/* Used during relaxation to store the potential section's byte deletion.  */
+static int sh_relax_imprecision = 0;
+
 static bfd_reloc_status_type sh_elf_reloc
   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);
 static bfd_reloc_status_type sh_elf_ignore_reloc
   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);
 static bfd_boolean sh_elf_relax_delete_bytes
-  (bfd *, asection *, bfd_vma, int);
+(bfd *, asection *, bfd_vma, int, struct bfd_link_info *);
 static bfd_boolean sh_elf_align_loads
   (bfd *, asection *, Elf_Internal_Rela *, bfd_byte *, bfd_boolean *);
 #ifndef SH64_ELF
@@ -84,6 +100,34 @@ static reloc_howto_type sh_vxworks_howto_table[] =
 #include "elf32-sh-relocs.h"
 };
 
+
+
+/* Initialize relaxation variables : For the moment only debug purpose */
+#define debug(lev, ...) if (relax_debug_level>=lev) printf(__VA_ARGS__);
+static int relax_debug_level=0;
+static int relax_debug_nb_relaxed=0x7fffffff;
+static void sh_elf_relax_init(void)
+{
+   static int init_done=0;
+   char *envvar;
+   
+   if (init_done) return;
+   
+   envvar = getenv("RELAX_DEBUG");
+   if (envvar) {
+	relax_debug_level = atoi(envvar);
+	printf("-- RELAX_DEBUG = %d\n", relax_debug_level);
+   }
+   
+   envvar = getenv("NB_RELAXED");
+   if (envvar) {
+	relax_debug_nb_relaxed = atoi(envvar);
+	printf("-- NB_RELAXED = %d\n", relax_debug_nb_relaxed);
+   }
+   init_done=1;
+}
+
+
 /* Return true if OUTPUT_BFD is a VxWorks object.  */
 
 static bfd_boolean
@@ -332,6 +376,7 @@ static const struct elf_reloc_map sh_reloc_map[] =
   { BFD_RELOC_SH_PCRELIMM8BY2, R_SH_DIR8WPZ },
   { BFD_RELOC_SH_PCRELIMM8BY4, R_SH_DIR8WPL },
   { BFD_RELOC_8_PCREL, R_SH_SWITCH8 },
+  { BFD_RELOC_SH_SYM_DIFF, R_SH_SYM_DIFF },
   { BFD_RELOC_SH_SWITCH16, R_SH_SWITCH16 },
   { BFD_RELOC_SH_SWITCH32, R_SH_SWITCH32 },
   { BFD_RELOC_SH_USES, R_SH_USES },
@@ -486,7 +531,8 @@ sh_elf_info_to_howto (bfd *abfd, arelent *cache_pt
 
   cache_ptr->howto = get_howto_table (abfd) + r;
 }
-
+
+
 /* This function handles relaxing for SH ELF.  See the corresponding
    function in coff-sh.c for a description of what this does.  FIXME:
    There is a lot of duplication here between this code and the COFF
@@ -533,6 +579,14 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
 
   have_code = FALSE;
 
+  /* Init reduction storing.  */
+  sh_elf_relax_init();
+  sh_relax_imprecision = 0;
+  
+  debug(1, "# SECTION [%lx] %s\n", 
+	(unsigned long) ((unsigned long) sec->output_section->vma + sec->output_offset),
+	bfd_get_section_name (abfd, sec));
+
   irelend = internal_relocs + sec->reloc_count;
   for (irel = internal_relocs; irel < irelend; irel++)
     {
@@ -540,7 +594,8 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
       unsigned short insn;
       Elf_Internal_Rela *irelfn, *irelscan, *irelcount;
       bfd_signed_vma foff;
-
+      int cur_insn;
+      
       if (ELF32_R_TYPE (irel->r_info) == (int) R_SH_CODE)
 	have_code = TRUE;
 
@@ -626,26 +681,28 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
 	  if (isymbuf == NULL)
 	    goto error_return;
 	}
-
+	  
       /* Get the value of the symbol referred to by the reloc.  */
-      if (ELF32_R_SYM (irelfn->r_info) < symtab_hdr->sh_info)
+           if (ELF32_R_SYM (irelfn->r_info) < symtab_hdr->sh_info)
 	{
 	  /* A local symbol.  */
 	  Elf_Internal_Sym *isym;
-
+	  asection *isec;
+ 
 	  isym = isymbuf + ELF32_R_SYM (irelfn->r_info);
-	  if (isym->st_shndx
-	      != (unsigned int) _bfd_elf_section_from_bfd_section (abfd, sec))
-	    {
-	      ((*_bfd_error_handler)
-	       (_("%B: 0x%lx: warning: symbol in unexpected section"),
-		abfd, (unsigned long) paddr));
-	      continue;
-	    }
 
+	  if (isym->st_shndx == SHN_UNDEF)
+	    isec = bfd_und_section_ptr;
+	  else if (isym->st_shndx == SHN_ABS)
+	    isec = bfd_abs_section_ptr;
+	  else if (isym->st_shndx == SHN_COMMON)
+	    isec = bfd_com_section_ptr;
+	  else
+	    isec = bfd_section_from_elf_index (abfd, isym->st_shndx);
+
 	  symval = (isym->st_value
-		    + sec->output_section->vma
-		    + sec->output_offset);
+		    + isec->output_section->vma
+		    + isec->output_offset);
 	}
       else
 	{
@@ -680,16 +737,34 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
 		 + sec->output_section->vma
 		 + sec->output_offset
 		 + 4));
-      /* A branch to an address beyond ours might be increased by an
-	 .align that doesn't move when bytes behind us are deleted.
-	 So, we add some slop in this calculation to allow for
-	 that.  */
-      if (foff < -0x1000 || foff >= 0x1000 - 8)
+
+      /* We take a margin of 0x2 to be able to remove the register load instruction 
+	     without any problem. In fact, the to-be-created relocation is not finalized 
+		 yet when calling the relax_check_overflow function : BSR offset is not 
+		 determined yet at this point (insn = 0xb000). Therefore it cannot detect 
+		 an overflow on this very relocation. That's why the margin is necessary.
+	  */
+      if (foff < -(0x1000 - sh_relax_imprecision) || 
+      		foff >= (0x1000 - sh_relax_imprecision))
 	{
 	  /* After all that work, we can't shorten this function call.  */
 	  continue;
 	}
 
+      /* For debug purpose only : */
+      if (relax_debug_nb_relaxed-- <= 0)
+	{
+	  continue;
+	}
+
+      debug(1,"  foff = %x  from,to={%lx,%lx} imprecision=%x\n", (unsigned int) foff, 
+	    (unsigned long) ((unsigned long) irel->r_offset + sec->output_section->vma + sec->output_offset), 
+	(unsigned long) symval, (unsigned int) sh_relax_imprecision);
+/*
+      debug(1,"  from={%lx + %lx + %lx}\n", (unsigned long) sec->output_section->vma, 
+        (unsigned long) sec->output_offset, (unsigned long) irel->r_offset);
+*/
+
       /* Shorten the function call.  */
 
       /* For simplicity of coding, we are going to modify the section
@@ -718,7 +793,26 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
       /* We can't fully resolve this yet, because the external
 	 symbol value may be changed by future relaxing.  We let
 	 the final link phase handle it.  */
-      bfd_put_16 (abfd, (bfd_vma) 0xb000, contents + irel->r_offset);
+      cur_insn = bfd_get_16 (abfd, contents + irel->r_offset);
+      if ((cur_insn & 0xf0ff) == 0x402b)
+	{
+	  /* jmp (0x4X2b) -> bra (0xaXXX) conversion.  */
+	  bfd_vma jmp = (bfd_vma)0xa000;
+	  bfd_put_16 (abfd, jmp, contents + irel->r_offset);
+	}
+      else if ((cur_insn & 0xf0ff) == 0x400b)
+	{
+	  /* jsr (0x4X0b) -> bsr (0xbXXX) conversion.  */
+	  bfd_vma jsr = (bfd_vma)0xb000;
+	  bfd_put_16 (abfd, jsr, contents + irel->r_offset);
+	}
+      else
+	{
+	  (*_bfd_error_handler)
+	    (_("%B: 0x%lx: warning: opcode 0x%x unexpected for relaxation"),
+	     abfd, (unsigned long) irel->r_offset, cur_insn);
+	  goto error_return;
+	}
 
       irel->r_addend = -4;
 
@@ -726,7 +820,7 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
 	 DIR32's word in memory (we read and add it above).  However,
 	 the jsr we create does NOT have this offset encoded, so we
 	 have to add it to the addend to preserve it.  */
-      irel->r_addend += bfd_get_32 (abfd, contents + paddr);
+      irel->r_addend +=  bfd_get_32 (abfd, contents + paddr);
 
       /* See if there is another R_SH_USES reloc referring to the same
 	 register load.  */
@@ -752,7 +846,7 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
 	  break;
 
       /* Delete the register load.  */
-      if (! sh_elf_relax_delete_bytes (abfd, sec, laddr, 2))
+      if (! sh_elf_relax_delete_bytes (abfd, sec, laddr, 2, link_info))
 	goto error_return;
 
       /* That will change things, so, just in case it permits some
@@ -786,7 +880,8 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
 	 previous call to sh_elf_relax_delete_bytes.  */
       if (irelcount->r_addend == 0)
 	{
-	  if (! sh_elf_relax_delete_bytes (abfd, sec, irelfn->r_offset, 4))
+	  if (! sh_elf_relax_delete_bytes (abfd, sec, irelfn->r_offset, 4, 
+					   link_info))
 	    goto error_return;
 	}
 
@@ -795,7 +890,7 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
 
   /* Look for load and store instructions that we can align on four
      byte boundaries.  */
-  if ((elf_elfheader (abfd)->e_flags & EF_SH_MACH_MASK) != EF_SH4
+  if ((elf_elfheader (abfd)->e_flags & EF_SH_MACH_MASK) == EF_SH1
       && have_code)
     {
       bfd_boolean swapped;
@@ -820,7 +915,6 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
 	{
 	  elf_section_data (sec)->relocs = internal_relocs;
 	  elf_section_data (sec)->this_hdr.contents = contents;
-	  symtab_hdr->contents = (unsigned char *) isymbuf;
 	}
     }
 
@@ -868,18 +962,415 @@ sh_elf_relax_section (bfd *abfd, asection *sec,
   return FALSE;
 }
 
+/* Read input_bfd's symbols.  */
+static Elf_Internal_Sym *
+retrieve_local_syms (bfd *input_bfd)
+{
+  Elf_Internal_Shdr *symtab_hdr;
+  Elf_Internal_Sym *isymbuf;
+  size_t locsymcount;
+
+  symtab_hdr = &elf_tdata (input_bfd)->symtab_hdr;
+  locsymcount = symtab_hdr->sh_info;
+
+  isymbuf = (Elf_Internal_Sym *) symtab_hdr->contents;
+  if (isymbuf == NULL && locsymcount != 0)
+    isymbuf = bfd_elf_get_elf_syms (input_bfd, symtab_hdr, locsymcount, 0,
+				    NULL, NULL, NULL);
+
+  /* Save the symbols for this input file so they won't be read again.  */
+  if (isymbuf && isymbuf != (Elf_Internal_Sym *) symtab_hdr->contents)
+    symtab_hdr->contents = (unsigned char *) isymbuf;
+
+  return isymbuf;
+}
+
+/* Get the ouput value for a symbol number.  */
+static bfd_vma
+get_elf_r_symndx_value (bfd *abfd, unsigned long r_symndx)
+{
+  Elf_Internal_Shdr *symtab_hdr = &elf_tdata (abfd)->symtab_hdr;
+  bfd_vma symval = 0;
+
+  if (r_symndx < symtab_hdr->sh_info)
+    {
+      Elf_Internal_Sym *isym;
+      asection *isec;
+      isym = retrieve_local_syms (abfd) + r_symndx;
+
+      if (isym->st_shndx == SHN_UNDEF)
+	isec = bfd_und_section_ptr;
+      else if (isym->st_shndx == SHN_ABS)
+	isec = bfd_abs_section_ptr;
+      else if (isym->st_shndx == SHN_COMMON)
+	isec = bfd_com_section_ptr;
+      else
+	isec = bfd_section_from_elf_index (abfd, isym->st_shndx);
+
+      symval = (isym->st_value
+		+ isec->output_section->vma
+		+ isec->output_offset);
+    }
+  else
+    {
+      unsigned long indx = r_symndx - symtab_hdr->sh_info;
+      struct elf_link_hash_entry *h =
+	elf_sym_hashes (abfd)[indx];
+
+      BFD_ASSERT (h != NULL);
+      while (h->root.type == bfd_link_hash_indirect
+             || h->root.type == bfd_link_hash_warning)
+	h = (struct elf_link_hash_entry *) h->root.u.i.link;
+      if (h->root.type == bfd_link_hash_defined
+          || h->root.type == bfd_link_hash_defweak)
+	symval = (h->root.u.def.value
+		  + h->root.u.def.section->output_section->vma
+		  + h->root.u.def.section->output_offset);
+    }
+  return symval;
+}
+
+/* Computes the output value of a relocation symbol, if this
+   symbol is a global one.  */
+static bfd_boolean
+sh_elf_get_global_sym_output_value_from_reloc (bfd *abfd,
+					       Elf_Internal_Rela *reloc,
+					       bfd_vma *symval)
+{
+  unsigned long r_symndx = ELF32_R_SYM (reloc->r_info);
+  Elf_Internal_Shdr *symtab_hdr;
+  
+  symtab_hdr = &elf_symtab_hdr (abfd);
+  
+  if (r_symndx >= symtab_hdr->sh_info) 
+    {
+      unsigned long indx;
+      struct elf_link_hash_entry *h;
+      indx = r_symndx - symtab_hdr->sh_info;
+      h = elf_sym_hashes (abfd)[indx];
+      BFD_ASSERT (h != NULL);
+      if (h->root.type != bfd_link_hash_defined
+	  && h->root.type != bfd_link_hash_defweak)
+	{
+	  /* This appears to be a reference to an undefined
+	     symbol.  Just ignore it--it will be caught by the
+	     regular reloc processing.  */
+	  return FALSE;
+	}
+      
+      *symval = (h->root.u.def.value
+		 + h->root.u.def.section->output_section->vma
+		 + h->root.u.def.section->output_offset);
+      return TRUE;
+    }
+  return FALSE;
+}
+
+/* We need to check if byte deletion could introduce overflows in
+   pc relative relocations.  */
+static void
+sh_elf_relax_check_overflow (bfd *abfd, asection *sec, void *ptr)
+{
+  struct sh_relaxed_section_info *rsec_info = ptr;
+  
+  Elf_Internal_Shdr *symtab_hdr;
+  Elf_Internal_Sym *isymbuf;
+  
+  Elf_Internal_Rela *internal_relocs;
+  Elf_Internal_Rela *irelscan, *irelscanend;
+  bfd_byte *sec_contents;
+  bfd_vma real_addr = rsec_info->addr + rsec_info->base;
+  bfd_vma real_toaddr = rsec_info->toaddr + rsec_info->base;
+  bfd_vma sec_base = sec->output_offset + sec->output_section->vma;
+
+  if (rsec_info->overflow_avoided)
+    return;
+  
+  if ((sec_base < rsec_info->base)
+      ||(sec->flags & SEC_RELOC) == 0
+      || sec->reloc_count == 0)
+    return;
+
+  symtab_hdr = &elf_symtab_hdr (abfd);
+  isymbuf = (Elf_Internal_Sym *) symtab_hdr->contents;
+  sec_contents = elf_section_data (sec)->this_hdr.contents;
+  if (sec_contents == NULL)
+    return;
+  
+  internal_relocs = (_bfd_elf_link_read_relocs
+		     (abfd, sec, NULL, (Elf_Internal_Rela *) NULL, TRUE));
+  if (internal_relocs == NULL)
+    return;
+
+  irelscanend = internal_relocs + sec->reloc_count;
+  for (irelscan = internal_relocs; irelscan < irelscanend; irelscan++)
+    {
+      bfd_vma stop, adj_addr;
+      bfd_vma start = 0;
+      int insn = 0;
+      bfd_signed_vma range = 0;
+      bfd_signed_vma off, adjust;
+	
+      if (ELF32_R_TYPE (irelscan->r_info) == (int) R_SH_SYM_DIFF)
+	  continue;
+
+      if (ELF32_R_TYPE (irelscan->r_info) == (int) R_SH_ALIGN
+	  && (sec_base + irelscan->r_offset) >= (rsec_info->base 
+						 + rsec_info->size))
+	continue;
+	
+      start = sec_base + irelscan->r_offset;
+      insn = bfd_get_16 (abfd, sec_contents + irelscan->r_offset);
+      
+      switch ((enum elf_sh_reloc_type) ELF32_R_TYPE (irelscan->r_info))
+	{
+	default:
+	  start = stop = real_addr; 
+	  break;
+	  
+	case R_SH_DIR8WPN:
+	  if (!sh_elf_get_global_sym_output_value_from_reloc(abfd,irelscan,&stop))
+	    {
+	      off = insn & 0xff;
+	      if (off & 0x80)
+		off -= 0x100;
+	      stop = (bfd_vma) ((bfd_signed_vma) start + 4 + off * 2);
+	    }
+	  else
+	    stop += irelscan->r_addend;
+	  debug(3,"         [check.1] start,stop={%lx,%lx}, irel={%lx,%lx}   insn=%x\n", 
+	       	(unsigned long) start, (unsigned long) stop, 
+		(unsigned long) irelscan->r_offset, (unsigned long) irelscan->r_addend, 
+		(unsigned int)insn);
+	  break;
+	  
+	case R_SH_DIR8WPZ:
+	  if (!sh_elf_get_global_sym_output_value_from_reloc(abfd,irelscan,&stop))
+	    {
+	      off = insn & 0xff;
+	      stop = start + 4 + off * 2;
+	    }
+	  else
+	    stop += irelscan->r_addend;
+	  debug(3,"         [check.2] start,stop={%lx,%lx}, irel={%lx,%lx}   insn=%x\n", 
+	       	(unsigned long) start, (unsigned long) stop, 
+		(unsigned long) irelscan->r_offset, (unsigned long) irelscan->r_addend, 
+		(unsigned int)insn);
+	  break;
+	  
+	case R_SH_DIR8WPL:
+	  if (!sh_elf_get_global_sym_output_value_from_reloc(abfd,irelscan,&stop))
+	    {
+	      off = insn & 0xff;
+	      stop = (start & ~(bfd_vma) 3) + 4 + off * 4;
+	    }
+	  else
+	    stop += irelscan->r_addend;
+	  debug(3,"         [check.3] start,stop={%lx,%lx} irel={%lx,%lx}   insn=%x\n", 
+	       	(unsigned long) start, (unsigned long) stop, 
+		(unsigned long) irelscan->r_offset, (unsigned long) irelscan->r_addend, 
+		(unsigned int)insn);
+	  break;
+	  
+	case R_SH_IND12W:
+          off = insn & 0xfff;
+	  if (sh_elf_get_global_sym_output_value_from_reloc(abfd,irelscan,&stop))
+	    {
+	      stop += irelscan->r_addend+4;
+	      debug(3,"         [check.4.1] start,stop={%lx,%lx}, rel={%lx,%lx}   insn=%x\n", 
+	       	(unsigned long) start, (unsigned long) stop, 
+		(unsigned long) irelscan->r_offset, (unsigned long) irelscan->r_addend, 
+		(unsigned int)insn);
+	    }
+	  else if (off)
+	    {
+	      if (off & 0x800)
+		off -= 0x1000;
+	      stop = (bfd_vma) ((bfd_signed_vma) start + 4 + off * 2);
+	      debug(3,"         [check.4.2] start,stop={%lx,%lx}, rel={%lx,%lx}   insn=%x"
+	      	"  (secbase=%x)\n", (unsigned long) start, (unsigned long) stop, 
+		(unsigned long) irelscan->r_offset, (unsigned long) irelscan->r_addend, 
+		(unsigned int)insn, (unsigned int)sec_base);
+	    }
+	  else
+	    {
+	      bfd_vma dest_sec_base = 
+	      	get_elf_r_symndx_value(abfd, ELF32_R_SYM (irelscan->r_info));
+	      stop = dest_sec_base + irelscan->r_addend + 4;
+	      debug(3,"         [check.4.3] start,stop={%lx,%lx}, rel={%lx,%lx}   insn=%x"
+	      	"  (secbase=%x)\n", (unsigned long) start, (unsigned long) stop, 
+		(unsigned long) irelscan->r_offset, (unsigned long) irelscan->r_addend, 
+		(unsigned int)insn, (unsigned int)dest_sec_base);
+	    }
+	  break;
+	  
+	case R_SH_SWITCH8:
+	case R_SH_SWITCH16:
+	  {
+	    int reloc_found = 0;
+	    Elf_Internal_Rela *nrelscan = irelscan+1;
+	    
+	    /* Gas emits R_SH_SYM_DIFF just after its R_SH_SWITCH.  */
+	    if (ELF32_R_TYPE (nrelscan->r_info) == (int) R_SH_SYM_DIFF
+	    	&& nrelscan->r_offset == irelscan->r_offset)
+	      reloc_found = 1;
+	    /* If it's not the case, look for it.  */
+	    else
+	      {
+		nrelscan = elf_section_data (sec)->relocs;
+		for (; nrelscan < irelscanend; nrelscan++)
+		  {
+		    if (nrelscan->r_offset == irelscan->r_offset
+			&& ELF32_R_TYPE (nrelscan->r_info) == (int) R_SH_SYM_DIFF)
+		      {
+			reloc_found = 1;
+			break;
+		      }
+		  }
+	      }
+	    
+	    start = sec_base + (isymbuf + ELF32_R_SYM(irelscan->r_info))->st_value;
+	    if (start == real_toaddr)
+	      {
+		Elf_Internal_Rela *sirelscan = elf_section_data (sec)->relocs;
+		for (; sirelscan < irelscanend; sirelscan++)
+		  {
+		    if (ELF32_R_TYPE (sirelscan->r_info) == (int) R_SH_ALIGN
+			&& sirelscan->r_offset == rsec_info->toaddr
+			&& (ELF32_R_SYM(sirelscan->r_info)
+			    == ELF32_R_SYM(irelscan->r_info)))
+		      start -= rsec_info->count;
+		  }
+	      }
+	    
+	    if(reloc_found)
+	      {
+		stop = sec_base + (isymbuf + ELF32_R_SYM(nrelscan->r_info))->st_value + nrelscan->r_addend;
+		if (stop == real_toaddr)
+		  {
+		    Elf_Internal_Rela *sirelscan = elf_section_data (sec)->relocs;
+		    for (; sirelscan < irelscanend; sirelscan++)
+		      {
+			if (ELF32_R_TYPE (sirelscan->r_info) == (int) R_SH_ALIGN
+			    && sirelscan->r_offset == rsec_info->toaddr
+			    && (ELF32_R_SYM(sirelscan->r_info) 
+				== ELF32_R_SYM(nrelscan->r_info)))
+			  {
+			    stop -= rsec_info->count;
+			  }
+		      }
+		  }
+	      }
+	    else
+	      {
+		if (ELF32_R_TYPE (irelscan->r_info) == (int) R_SH_SWITCH16)
+		  range = bfd_get_signed_16 (abfd, sec_contents 
+					     + irelscan->r_offset);
+		else if (ELF32_R_TYPE (irelscan->r_info) == (int) R_SH_SWITCH8)
+		  range = bfd_get_8 (abfd, sec_contents + irelscan->r_offset);
+		stop = (bfd_vma) ((bfd_signed_vma) start + range);
+	      }
+	    break;
+	  }
+	}
+      
+      adj_addr = real_addr + rsec_info->count;
+      if (start >= adj_addr 
+	  && start < real_toaddr 
+	  && (stop < adj_addr || stop >= real_toaddr))
+	adjust = rsec_info->count;
+      else if (stop >= adj_addr 
+	       && stop < real_toaddr 
+	       &&(start < adj_addr || start >= real_toaddr))
+	adjust = - rsec_info->count;
+      else if (sec_base != rsec_info->base
+	       && ((stop < sec_base && stop > real_addr) 
+		   || stop > (sec_base+sec->size)))
+	{
+	  if (start < stop)
+	    adjust = sh_relax_imprecision + rsec_info->count;
+	  else if (start > stop)
+	    adjust = - (sh_relax_imprecision + rsec_info->count);
+	  else
+	    adjust = 0;
+	}
+      else
+	adjust = 0;
+      
+      if (adjust != 0) 
+	{
+	  range = stop + adjust - start;
+	  switch ((enum elf_sh_reloc_type) ELF32_R_TYPE (irelscan->r_info))
+	    {
+	    overflow_detected:
+	      rsec_info->overflow_avoided = TRUE;
+	      rsec_info->irelalign = NULL;
+	      rsec_info->toaddr = rsec_info->addr + rsec_info->count;
+	      debug(1,"        => Overflow on type %d : start,stop={%lx,%lx}"
+	      	" (adjust=%lx) : range=%x  (insn=%x)\n", (int)irelscan->r_info, 
+	      	(unsigned long) (start), (unsigned long) (stop), 
+		(unsigned long)(adjust), (unsigned int) range, (unsigned int) insn);
+	      break;
+	      
+	    default:
+	      abort ();
+	      break;
+	      
+	    case R_SH_DIR8WPN:
+	      range -= 4;
+	      if (range < -(bfd_signed_vma)0xf8 
+		  || range >= (bfd_signed_vma)0xf7)
+		goto overflow_detected;
+	      break;
+		  
+	    case R_SH_DIR8WPZ:
+	      range -= 4;
+	      if (range > (bfd_signed_vma)0x1f6)
+		goto overflow_detected;
+	      break;
+	      
+	    case R_SH_DIR8WPL:
+	      range -= 4;
+	      if (range > (bfd_signed_vma)0x3f3)
+		goto overflow_detected;
+	      break;
+	      
+	    case R_SH_IND12W:
+	      range -= 4;
+ 	      if ((range < (bfd_signed_vma)-0xff8) 
+		  || (range >= (bfd_signed_vma)0xff8))
+		goto overflow_detected;
+	      break;
+	      
+	    case R_SH_SWITCH8:
+	      if (range < -(bfd_signed_vma) 0x78 
+		  || range >= (bfd_signed_vma) 0x78)
+		goto overflow_detected;
+	      break;
+	      
+	    case R_SH_SWITCH16:
+	      if (range < -(bfd_signed_vma) 0x7ff8 
+		  || range >= (bfd_signed_vma)0x7ff8)
+		goto overflow_detected;
+	      break;
+	    }
+	}
+    }
+}
+
 /* Delete some bytes from a section while relaxing.  FIXME: There is a
    lot of duplication between this function and sh_relax_delete_bytes
    in coff-sh.c.  */
 
 static bfd_boolean
 sh_elf_relax_delete_bytes (bfd *abfd, asection *sec, bfd_vma addr,
-			   int count)
+			   int count,struct bfd_link_info *link_info)
 {
   Elf_Internal_Shdr *symtab_hdr;
   unsigned int sec_shndx;
   bfd_byte *contents;
   Elf_Internal_Rela *irel, *irelend;
+  Elf_Internal_Rela *sirel, *sirelend;
   Elf_Internal_Rela *irelalign;
   bfd_vma toaddr;
   Elf_Internal_Sym *isymbuf, *isym, *isymend;
@@ -887,6 +1378,7 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
   struct elf_link_hash_entry **end_hashes;
   unsigned int symcount;
   asection *o;
+  bfd *ibfd;
 
   symtab_hdr = &elf_symtab_hdr (abfd);
   isymbuf = (Elf_Internal_Sym *) symtab_hdr->contents;
@@ -894,7 +1386,7 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
   sec_shndx = _bfd_elf_section_from_bfd_section (abfd, sec);
 
   contents = elf_section_data (sec)->this_hdr.contents;
-
+  
   /* The deletion must stop at the next ALIGN reloc for an aligment
      power larger than the number of bytes we are deleting.  */
 
@@ -903,6 +1395,7 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 
   irel = elf_section_data (sec)->relocs;
   irelend = irel + sec->reloc_count;
+
   for (; irel < irelend; irel++)
     {
       if (ELF32_R_TYPE (irel->r_info) == (int) R_SH_ALIGN
@@ -914,14 +1407,47 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 	  break;
 	}
     }
+  
+  /* Check if byte deletion could produce an overflow, and fix
+     the problem by restricting the moved area.  */
+  
+  struct sh_relaxed_section_info rsec_info;
+  rsec_info.size = sec->size;
+  rsec_info.base = sec->output_offset + sec->output_section->vma;
+  rsec_info.addr = addr;
+  rsec_info.toaddr = toaddr;
+  rsec_info.count = count;
+  rsec_info.overflow_avoided = FALSE;
+  rsec_info.irelalign = irelalign;
 
-  /* Actually delete the bytes.  */
+  debug(1,"    - Checking ... addr=%x\n", 
+  	(unsigned int) (rsec_info.base + rsec_info.addr + addr));
+	
+  for (ibfd = link_info->input_bfds; ibfd != NULL; ibfd = ibfd->link_next) 
+    bfd_map_over_sections(ibfd,sh_elf_relax_check_overflow,&rsec_info);
+  
+  toaddr = rsec_info.toaddr;
+  irelalign = rsec_info.irelalign;
+  
+  if (count > (int)(toaddr - addr))
+    count = (int)(toaddr - addr);
+
+    /* Actually delete the bytes.  */
   memmove (contents + addr, contents + addr + count,
 	   (size_t) (toaddr - addr - count));
-  if (irelalign == NULL)
-    sec->size -= count;
+  if (irelalign == NULL && !rsec_info.overflow_avoided)
+    {
+      debug(1,"     => Deleting %d bytes... Addr=%lx (irelal=%p over_avoid=%d)\n", 
+      	count, (unsigned long) (rsec_info.base + addr - count), 
+	irelalign, rsec_info.overflow_avoided);
+      sec->size -= count;
+      sh_relax_imprecision += count;
+    }
   else
     {
+      debug(1,"     => Inserting nops : %d bytes... Addr=%lx (irelal=%p over_avoid=%d)\n", 
+      	count, (unsigned long) (rsec_info.base + addr - count), 
+	irelalign, rsec_info.overflow_avoided);
       int i;
 
 #define NOP_OPCODE (0x0009)
@@ -931,15 +1457,73 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 	bfd_put_16 (abfd, (bfd_vma) NOP_OPCODE, contents + toaddr - count + i);
     }
 
+  /* Adjust the local symbols defined in this section.  */
+  isymend = isymbuf + symtab_hdr->sh_info;
+  for (isym = isymbuf; isym < isymend; isym++)
+    {	
+      if (isym->st_shndx == sec_shndx
+          && isym->st_value > addr
+          && isym->st_value < toaddr)
+	{
+	  if (isym->st_value < addr + count)
+	    isym->st_value = addr;
+	  else
+	    isym->st_value -= count;
+	}
+      /* Adjust the function symbol's size as well.  */
+      else if (isym->st_shndx == sec_shndx
+	       && ELF_ST_TYPE (isym->st_info) == STT_FUNC
+	       && isym->st_value + isym->st_size > addr
+	       && isym->st_value + isym->st_size < toaddr)
+	{
+	  isym->st_size -= count;
+	}
+    }
+  
+  sirel = elf_section_data (sec)->relocs;
+  sirelend = sirel + sec->reloc_count;
+
+  for (; sirel < sirelend; sirel++)
+    {
+      if (ELF32_R_SYM (sirel->r_info) < symtab_hdr->sh_info
+          && ELF32_R_TYPE (sirel->r_info) == (int) R_SH_IND12W
+          && (isymbuf + ELF32_R_SYM (sirel->r_info))->st_shndx == sec_shndx
+          && sirel->r_addend+4 > addr
+          && sirel->r_addend+4 < toaddr)
+	{
+	  int insn;
+	  if (sirel->r_offset <= addr || sirel->r_offset >= toaddr)
+	    insn = bfd_get_16 (abfd, contents + sirel->r_offset);
+	  else
+	    insn = bfd_get_16 (abfd, contents + sirel->r_offset - count);
+	  
+	  int off = (insn & 0xfff);
+	  if (!off)
+	    sirel->r_addend -= count;
+	}
+    }
+
+  sirel = elf_section_data (sec)->relocs;
+  
+  for (; sirel < sirelend; sirel++)
+    {
+      if (ELF32_R_TYPE (sirel->r_info) == (int) R_SH_ALIGN
+          && sirel->r_offset == (toaddr)
+          && (ELF32_R_SYM(sirel->r_info) < symtab_hdr->sh_info))
+        {
+          if ( (isymbuf+ELF32_R_SYM(sirel->r_info))->st_value == toaddr)
+            (isymbuf+ELF32_R_SYM(sirel->r_info))->st_value -= count;
+        }
+    }
+  
   /* Adjust all the relocs.  */
   for (irel = elf_section_data (sec)->relocs; irel < irelend; irel++)
     {
       bfd_vma nraddr, stop;
       bfd_vma start = 0;
       int insn = 0;
-      int off, adjust, oinsn;
+      int off, adjust;
       bfd_signed_vma voff = 0;
-      bfd_boolean overflow;
 
       /* Get the new reloc address.  */
       nraddr = irel->r_offset;
@@ -1017,18 +1601,20 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 
 	case R_SH_DIR8WPN:
 	  off = insn & 0xff;
-	  if (off & 0x80)
-	    off -= 0x100;
-	  stop = (bfd_vma) ((bfd_signed_vma) start + 4 + off * 2);
+	  if (! off)
+	    start = stop = addr;
+	  else 
+	    {
+	      if (off & 0x80)
+		off -= 0x100;
+	      stop = (bfd_vma) ((bfd_signed_vma) start + 4 + off * 2);
+	    }
 	  break;
 
 	case R_SH_IND12W:
 	  off = insn & 0xfff;
-	  if (! off)
+	  if (! off) 
 	    {
-	      /* This has been made by previous relaxation.  Since the
-		 relocation will be against an external symbol, the
-		 final relocation will just do the right thing.  */
 	      start = stop = addr;
 	    }
 	  else
@@ -1046,6 +1632,11 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 	      if (stop > addr && stop < toaddr)
 		irel->r_addend -= count;
 	    }
+	    debug(2,"       [delete.1] R_SH_IND12W : irel={%lx,%lx}  "
+	    	"start,stop={%lx,%lx}  addr,toaddr={%lx,%lx}  insn=%x\n", 
+	        (unsigned long) irel->r_offset, (unsigned long) nraddr, 
+		(unsigned long)start, (unsigned long)stop, 
+		(unsigned long)addr, (unsigned long)toaddr, (unsigned int)insn);
 	  break;
 
 	case R_SH_DIR8WPZ:
@@ -1057,7 +1648,7 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 	  off = insn & 0xff;
 	  stop = (start & ~(bfd_vma) 3) + 4 + off * 4;
 	  break;
-
+	  
 	case R_SH_SWITCH8:
 	case R_SH_SWITCH16:
 	case R_SH_SWITCH32:
@@ -1069,27 +1660,56 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 	     both the r_offset field and the section contents.
 	     N.B. in gas / coff bfd, the elf bfd r_addend is called r_offset,
 	     and the elf bfd r_offset is called r_vaddr.  */
+	  {
+	    int reloc_found = 0;
+	    Elf_Internal_Rela *nrel = irel+1;
+	    
+	    /* Gas emits R_SH_SYM_DIFF just after its R_SH_SWITCH.  */
+	    if (ELF32_R_TYPE (nrel->r_info) == (int) R_SH_SYM_DIFF
+	    	&& nrel->r_offset == irel->r_offset)
+	      reloc_found = 1;
+	    /* If it's not the case, look for it.  */
+	    else
+	      {
+		nrel = elf_section_data (sec)->relocs;
+		for (; nrel < irelend; nrel++)
+		  {
+		    if (nrel->r_offset == irel->r_offset
+			&& ELF32_R_TYPE (nrel->r_info) == (int) R_SH_SYM_DIFF)
+		      {
+		      reloc_found = 1;
+		      break;
+		      }
+		  }
+	      }
 
-	  stop = irel->r_offset;
-	  start = (bfd_vma) ((bfd_signed_vma) stop - (long) irel->r_addend);
-
-	  if (start > addr
-	      && start < toaddr
-	      && (stop <= addr || stop >= toaddr))
-	    irel->r_addend += count;
-	  else if (stop > addr
-		   && stop < toaddr
-		   && (start <= addr || start >= toaddr))
-	    irel->r_addend -= count;
-
-	  if (ELF32_R_TYPE (irel->r_info) == (int) R_SH_SWITCH16)
-	    voff = bfd_get_signed_16 (abfd, contents + nraddr);
-	  else if (ELF32_R_TYPE (irel->r_info) == (int) R_SH_SWITCH8)
-	    voff = bfd_get_8 (abfd, contents + nraddr);
-	  else
-	    voff = bfd_get_signed_32 (abfd, contents + nraddr);
-	  stop = (bfd_vma) ((bfd_signed_vma) start + voff);
-
+	    start = (isymbuf+ELF32_R_SYM(irel->r_info))->st_value;
+	    
+	    if(reloc_found)
+	      {
+		stop = (isymbuf+ELF32_R_SYM(nrel->r_info))->st_value + nrel->r_addend;
+		voff = (bfd_signed_vma)(stop - start);
+		if (ELF32_R_TYPE (irel->r_info) == (int) R_SH_SWITCH16)
+		  bfd_put_signed_16 (abfd, (bfd_vma) voff, contents + nraddr);
+		else if (ELF32_R_TYPE (irel->r_info) == (int) R_SH_SWITCH8)
+		  bfd_put_signed_8 (abfd, (bfd_vma) voff, contents + nraddr);
+		else
+		  bfd_put_signed_32 (abfd, (bfd_vma) voff, contents + nraddr);
+		
+		irel->r_offset = nraddr;
+		continue;
+	      }
+	    else
+	      {
+		if (ELF32_R_TYPE (irel->r_info) == (int) R_SH_SWITCH16)
+		  voff = bfd_get_signed_16 (abfd, contents + nraddr);
+		else if (ELF32_R_TYPE (irel->r_info) == (int) R_SH_SWITCH8)
+		  voff = bfd_get_8 (abfd, contents + nraddr);
+		else
+		  voff = bfd_get_signed_32 (abfd, contents + nraddr);
+		stop = (bfd_vma) ((bfd_signed_vma) start + voff);
+	      }
+	  }
 	  break;
 
 	case R_SH_USES:
@@ -1099,22 +1719,20 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 			    + 4);
 	  break;
 	}
-
-      if (start > addr
-	  && start < toaddr
-	  && (stop <= addr || stop >= toaddr))
+      
+      if (start >= addr + count 
+	  && start < toaddr 
+	  && (stop < addr + count || stop >= toaddr))
 	adjust = count;
-      else if (stop > addr
-	       && stop < toaddr
-	       && (start <= addr || start >= toaddr))
+      else if (stop >= addr + count 
+	       && stop < toaddr 
+	       && (start < addr + count || start >= toaddr))
 	adjust = - count;
       else
 	adjust = 0;
 
       if (adjust != 0)
 	{
-	  oinsn = insn;
-	  overflow = FALSE;
 	  switch ((enum elf_sh_reloc_type) ELF32_R_TYPE (irel->r_info))
 	    {
 	    default:
@@ -1122,17 +1740,18 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 	      break;
 
 	    case R_SH_DIR8WPN:
+	      insn += adjust / 2;
+	      bfd_put_16 (abfd, (bfd_vma) insn, contents + nraddr);
+	      break;
+
 	    case R_SH_DIR8WPZ:
 	      insn += adjust / 2;
-	      if ((oinsn & 0xff00) != (insn & 0xff00))
-		overflow = TRUE;
 	      bfd_put_16 (abfd, (bfd_vma) insn, contents + nraddr);
 	      break;
 
 	    case R_SH_IND12W:
 	      insn += adjust / 2;
-	      if ((oinsn & 0xf000) != (insn & 0xf000))
-		overflow = TRUE;
+	      debug(2,"       [delete.2] adjust=%x, insn=%x\n", adjust, insn);
 	      bfd_put_16 (abfd, (bfd_vma) insn, contents + nraddr);
 	      break;
 
@@ -1145,22 +1764,16 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 		  if ((irel->r_offset & 3) == 0)
 		    ++insn;
 		}
-	      if ((oinsn & 0xff00) != (insn & 0xff00))
-		overflow = TRUE;
 	      bfd_put_16 (abfd, (bfd_vma) insn, contents + nraddr);
 	      break;
 
 	    case R_SH_SWITCH8:
 	      voff += adjust;
-	      if (voff < 0 || voff >= 0xff)
-		overflow = TRUE;
 	      bfd_put_8 (abfd, voff, contents + nraddr);
 	      break;
 
 	    case R_SH_SWITCH16:
 	      voff += adjust;
-	      if (voff < - 0x8000 || voff >= 0x8000)
-		overflow = TRUE;
 	      bfd_put_signed_16 (abfd, (bfd_vma) voff, contents + nraddr);
 	      break;
 
@@ -1174,14 +1787,6 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 	      break;
 	    }
 
-	  if (overflow)
-	    {
-	      ((*_bfd_error_handler)
-	       (_("%B: 0x%lx: fatal: reloc overflow while relaxing"),
-		abfd, (unsigned long) irel->r_offset));
-	      bfd_set_error (bfd_error_bad_value);
-	      return FALSE;
-	    }
 	}
 
       irel->r_offset = nraddr;
@@ -1213,110 +1818,209 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
       irelscanend = internal_relocs + o->reloc_count;
       for (irelscan = internal_relocs; irelscan < irelscanend; irelscan++)
 	{
-	  /* Dwarf line numbers use R_SH_SWITCH32 relocs.  */
-	  if (ELF32_R_TYPE (irelscan->r_info) == (int) R_SH_SWITCH32)
+
+	  if (ocontents == NULL)
 	    {
-	      bfd_vma start, stop;
-	      bfd_signed_vma voff;
-
-	      if (ocontents == NULL)
+	      if (elf_section_data (o)->this_hdr.contents != NULL)
+		ocontents = elf_section_data (o)->this_hdr.contents;
+	      else
 		{
-		  if (elf_section_data (o)->this_hdr.contents != NULL)
-		    ocontents = elf_section_data (o)->this_hdr.contents;
-		  else
+		  /* We always cache the section contents.
+		     Perhaps, if info->keep_memory is FALSE, we
+		     should free them, if we are permitted to,
+		     when we leave sh_coff_relax_section.  */
+		  if (!bfd_malloc_and_get_section (abfd, o, &ocontents))
 		    {
-		      /* We always cache the section contents.
-			 Perhaps, if info->keep_memory is FALSE, we
-			 should free them, if we are permitted to,
-			 when we leave sh_coff_relax_section.  */
-		      if (!bfd_malloc_and_get_section (abfd, o, &ocontents))
-			{
-			  if (ocontents != NULL)
-			    free (ocontents);
-			  return FALSE;
-			}
-
-		      elf_section_data (o)->this_hdr.contents = ocontents;
+		      if (ocontents != NULL)
+			free (ocontents);
+		      return FALSE;
 		    }
+		  
+		  elf_section_data (o)->this_hdr.contents = ocontents;
 		}
+	    }
 
-	      stop = irelscan->r_offset;
-	      start
-		= (bfd_vma) ((bfd_signed_vma) stop - (long) irelscan->r_addend);
+	  switch ((enum elf_sh_reloc_type) ELF32_R_TYPE (irelscan->r_info))
+	    {
+	    default:
+	      break;
 
-	      /* STOP is in a different section, so it won't change.  */
-	      if (start > addr && start < toaddr)
-		irelscan->r_addend += count;
+	    case R_SH_SWITCH32:
+	    case R_SH_SWITCH16:
+	    case R_SH_SWITCH8:
+	      {
+		bfd_vma start, stop;
+		bfd_signed_vma voff = 0;
+		int reloc_found = 0;
+		Elf_Internal_Rela * nrelscan = irelscan+1;
 
-	      voff = bfd_get_signed_32 (abfd, ocontents + irelscan->r_offset);
-	      stop = (bfd_vma) ((bfd_signed_vma) start + voff);
+		/* Gas emits R_SH_SYM_DIFF just after its R_SH_SWITCH.  */
+		if (ELF32_R_TYPE (nrelscan->r_info) == (int) R_SH_SYM_DIFF
+		    && nrelscan->r_offset == irelscan->r_offset)
+		  reloc_found = 1;
+		/* If it's not the case, look for it.  */
+		else
+		  {
+		    nrelscan = elf_section_data (o)->relocs;
+		    for (; nrelscan < irelscanend; nrelscan++)
+		      {
+			if (nrelscan->r_offset == irelscan->r_offset
+			    && ELF32_R_TYPE (nrelscan->r_info)
+			    == (int) R_SH_SYM_DIFF)
+			  {
+			    reloc_found = 1;
+			    break;
+			  }
+		      }
+		  }
 
-	      if (start > addr
-		  && start < toaddr
-		  && (stop <= addr || stop >= toaddr))
-		bfd_put_signed_32 (abfd, (bfd_vma) voff + count,
-				   ocontents + irelscan->r_offset);
-	      else if (stop > addr
-		       && stop < toaddr
-		       && (start <= addr || start >= toaddr))
-		bfd_put_signed_32 (abfd, (bfd_vma) voff - count,
-				   ocontents + irelscan->r_offset);
-	    }
+		if (reloc_found)
+		  {
+		    start = get_elf_r_symndx_value(abfd, ELF32_R_SYM(irelscan->r_info));
+		    stop = get_elf_r_symndx_value(abfd, ELF32_R_SYM(nrelscan->r_info)) + nrelscan->r_addend;
+		    voff = (bfd_signed_vma)(stop - start);
+		    if (ELF32_R_TYPE (irelscan->r_info) == (int) R_SH_SWITCH32)
+		      bfd_put_signed_32 (abfd, (bfd_vma) voff,
+					 ocontents + irelscan->r_offset);
+		    else if (ELF32_R_TYPE (irelscan->r_info)
+			     == (int) R_SH_SWITCH16)
+		      bfd_put_signed_16 (abfd, (bfd_vma) voff,
+					 ocontents + irelscan->r_offset);
+		    else if (ELF32_R_TYPE (irelscan->r_info)
+			     == (int) R_SH_SWITCH8)
+		      bfd_put_signed_8 (abfd, (bfd_vma) voff,
+					ocontents + irelscan->r_offset);
+		  }
+		else
+		  {
+		    start = (isymbuf + ELF32_R_SYM (irelscan->r_info))->st_value;
+		    if (ELF32_R_TYPE (irelscan->r_info) == (int) R_SH_SWITCH32)
+		      voff = bfd_get_signed_32 (abfd,
+						ocontents + irelscan->r_offset);
+		    else if (ELF32_R_TYPE (irelscan->r_info)
+			     == (int) R_SH_SWITCH16)
+		      voff = bfd_get_signed_16 (abfd,
+						ocontents + irelscan->r_offset);
+		    else if (ELF32_R_TYPE (irelscan->r_info)
+			     == (int) R_SH_SWITCH8)
+		      voff = bfd_get_signed_8 (abfd,
+					       ocontents + irelscan->r_offset);
+		    stop = (bfd_vma) ((bfd_signed_vma) start + voff);
+	
+		    if (start >= addr + count
+			&& start < toaddr
+			&& (stop < addr + count || stop >= toaddr))
+		      {
+			if (ELF32_R_TYPE (irelscan->r_info)
+			    == (int) R_SH_SWITCH32)
+			  bfd_put_signed_32 (abfd, (bfd_vma) voff + count,
+					     ocontents + irelscan->r_offset);
+			else if (ELF32_R_TYPE (irelscan->r_info)
+				 == (int) R_SH_SWITCH16)
+			  bfd_put_signed_16 (abfd, (bfd_vma) voff + count,
+					     ocontents + irelscan->r_offset);
+			else if (ELF32_R_TYPE (irelscan->r_info)
+				 == (int) R_SH_SWITCH8)
+			  bfd_put_signed_8 (abfd, (bfd_vma) voff + count,
+					    ocontents + irelscan->r_offset);
+		      }
+		    else if (stop >= addr + count
+			     && stop < toaddr
+			     && (start < addr + count || start >= toaddr))
+		      {
+			if (ELF32_R_TYPE (irelscan->r_info)
+			    == (int) R_SH_SWITCH32)
+			  bfd_put_signed_32 (abfd, (bfd_vma) voff - count,
+					     ocontents + irelscan->r_offset);
+			else if (ELF32_R_TYPE (irelscan->r_info)
+				 == (int) R_SH_SWITCH16)
+			  bfd_put_signed_16 (abfd, (bfd_vma) voff - count,
+					     ocontents + irelscan->r_offset);
+			else if (ELF32_R_TYPE (irelscan->r_info)
+				 == (int) R_SH_SWITCH8)
+			  bfd_put_signed_8 (abfd, (bfd_vma) voff - count,
+					    ocontents + irelscan->r_offset);
+		      }
+		  }
+		break;
+	      }
 
-	  if (ELF32_R_TYPE (irelscan->r_info) != (int) R_SH_DIR32)
-	    continue;
+	    case R_SH_REL32:
+	      {
+		isym = isymbuf + ELF32_R_SYM (irelscan->r_info);
+		if (isym->st_shndx == sec_shndx)
+		  {
+		    bfd_vma dep, val;
 
-	  if (ELF32_R_SYM (irelscan->r_info) >= symtab_hdr->sh_info)
-	    continue;
+		    dep = bfd_get_32 (abfd, ocontents + irelscan->r_offset);
+		    val = dep + isym->st_value;
+		    if (val > addr && val < toaddr)
+		      {
+			if (isym->st_value <= addr)
+			  bfd_put_32 (abfd, dep - count,
+				      ocontents + irelscan->r_offset);
+			else if (isym->st_value >= toaddr)
+			  bfd_put_32 (abfd, dep + count,
+				      ocontents + irelscan->r_offset);
+		      }
 
+		    if (isym->st_value > addr && isym->st_value <= addr)
+		      {
+			if (val <= addr)
+			  bfd_put_32 (abfd, dep - count,
+				      ocontents + irelscan->r_offset);
+			else if (val >= toaddr)
+			  bfd_put_32 (abfd, dep + count,
+				      ocontents + irelscan->r_offset);
+		      }
+		  }
+		break;
+	      }
 
-	  isym = isymbuf + ELF32_R_SYM (irelscan->r_info);
-	  if (isym->st_shndx == sec_shndx
-	      && (isym->st_value <= addr
-		  || isym->st_value >= toaddr))
-	    {
-	      bfd_vma val;
+	    case R_SH_DIR32:
+	      {
+		if (ELF32_R_SYM (irelscan->r_info) >= symtab_hdr->sh_info)
+		  break;
 
-	      if (ocontents == NULL)
-		{
-		  if (elf_section_data (o)->this_hdr.contents != NULL)
-		    ocontents = elf_section_data (o)->this_hdr.contents;
-		  else
-		    {
-		      /* We always cache the section contents.
-			 Perhaps, if info->keep_memory is FALSE, we
-			 should free them, if we are permitted to,
-			 when we leave sh_coff_relax_section.  */
-		      if (!bfd_malloc_and_get_section (abfd, o, &ocontents))
-			{
-			  if (ocontents != NULL)
-			    free (ocontents);
-			  return FALSE;
-			}
+		isym = isymbuf + ELF32_R_SYM (irelscan->r_info);
+		if (isym->st_shndx == sec_shndx
+		    && (isym->st_value <= addr
+			|| isym->st_value >= toaddr))
+		  {
+		    bfd_vma val;
 
-		      elf_section_data (o)->this_hdr.contents = ocontents;
-		    }
-		}
+		    val = bfd_get_32 (abfd, ocontents + irelscan->r_offset);
+		    val += isym->st_value;
+		    if (val > addr && val < toaddr)
+		      bfd_put_32 (abfd, val - count,
+				  ocontents + irelscan->r_offset);
+		  }
+		break;
+	      }
 
-	      val = bfd_get_32 (abfd, ocontents + irelscan->r_offset);
-	      val += isym->st_value;
-	      if (val > addr && val < toaddr)
-		bfd_put_32 (abfd, val - count,
-			    ocontents + irelscan->r_offset);
+	    case R_SH_IND12W:
+	      {
+		if (ELF32_R_SYM (irelscan->r_info) >= symtab_hdr->sh_info)
+		  break;
+
+		isym = isymbuf + ELF32_R_SYM (irelscan->r_info);
+		if (isym->st_shndx == sec_shndx
+		    && irelscan->r_addend+4 > addr
+		    && irelscan->r_addend+4 < toaddr)
+		  {
+		    int insn,off;
+
+		    insn = bfd_get_16 (abfd, ocontents + irelscan->r_offset);
+		    off = (insn & 0xfff);
+		    if (!off)
+		      irelscan->r_addend -= count;
+		  }
+		break;
+	      }
 	    }
 	}
     }
 
-  /* Adjust the local symbols defined in this section.  */
-  isymend = isymbuf + symtab_hdr->sh_info;
-  for (isym = isymbuf; isym < isymend; isym++)
-    {
-      if (isym->st_shndx == sec_shndx
-	  && isym->st_value > addr
-	  && isym->st_value < toaddr)
-	isym->st_value -= count;
-    }
-
   /* Now adjust the global symbols defined in this section.  */
   symcount = (symtab_hdr->sh_size / sizeof (Elf32_External_Sym)
 	      - symtab_hdr->sh_info);
@@ -1331,8 +2035,18 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 	  && sym_hash->root.u.def.value > addr
 	  && sym_hash->root.u.def.value < toaddr)
 	{
-	  sym_hash->root.u.def.value -= count;
+	  if (sym_hash->root.u.def.value < addr + count)
+	    sym_hash->root.u.def.value = addr;
+	  else
+	    sym_hash->root.u.def.value -= count;
 	}
+      /* Adjust the function symbol's size as well.  */
+      else if (sym_hash->root.type == bfd_link_hash_defined
+	       && sym_hash->root.u.def.section == sec
+	       && sym_hash->type == STT_FUNC
+	       && sym_hash->root.u.def.value + sym_hash->size > addr
+	       && sym_hash->root.u.def.value + sym_hash->size < toaddr)
+	sym_hash->size -= count;
     }
 
   /* See if we can move the ALIGN reloc forward.  We have adjusted
@@ -1348,7 +2062,8 @@ sh_elf_relax_delete_bytes (bfd *abfd, asection *se
 	{
 	  /* Tail recursion.  */
 	  return sh_elf_relax_delete_bytes (abfd, sec, alignaddr,
-					    (int) (alignto - alignaddr));
+					    (int) (alignto - alignaddr),
+					    link_info);
 	}
     }
 
@@ -1438,7 +2153,89 @@ sh_elf_swap_insns (bfd *abfd, asection *sec, void
   Elf_Internal_Rela *internal_relocs = (Elf_Internal_Rela *) relocs;
   unsigned short i1, i2;
   Elf_Internal_Rela *irel, *irelend;
+  bfd_boolean overflow = FALSE;
 
+  /* check a potential reloc overflow.  */
+  irelend = internal_relocs + sec->reloc_count;
+  for (irel = internal_relocs; irel < irelend; irel++)
+    {
+      enum elf_sh_reloc_type type;
+      int add = 0;
+
+      type = (enum elf_sh_reloc_type) ELF32_R_TYPE (irel->r_info);
+
+      if (irel->r_offset == addr)
+	{
+	  add = -2;
+	}
+      else if (irel->r_offset == addr + 2)
+	{
+	  add = 2;
+	}
+
+      if (add != 0)
+	{
+	  bfd_byte *loc;
+	  unsigned short insn, oinsn;
+
+	  loc = contents + irel->r_offset;
+	  overflow = FALSE;
+	  switch (type)
+	    {
+	    default:
+	      break;
+
+	    case R_SH_DIR8WPN:
+	      insn = bfd_get_16 (abfd, loc);
+	      oinsn = insn;
+	      insn += add / 2;
+	      if ((oinsn & 0xff80) != (insn & 0xff80))
+		overflow = TRUE;
+	      break;
+
+	    case R_SH_DIR8WPZ:
+	      insn = bfd_get_16 (abfd, loc);
+	      oinsn = insn;
+	      insn += add / 2;
+	      if ((oinsn & 0xff00) != (insn & 0xff00))
+		overflow = TRUE;
+	      break;
+
+	    case R_SH_IND12W:
+	      insn = bfd_get_16 (abfd, loc);
+	      oinsn = insn;
+	      insn += add / 2;
+	      if ((oinsn & 0xf800) != (insn & 0xf800))
+		overflow = TRUE;
+	      break;
+
+	    case R_SH_DIR8WPL:
+	      /* This reloc ignores the least significant 3 bits of
+		 the program counter before adding in the offset.
+		 This means that if ADDR is at an even address, the
+		 swap will not affect the offset.  If ADDR is an at an
+		 odd address, then the instruction will be crossing a
+		 four byte boundary, and must be adjusted.  */
+	      if ((addr & 3) != 0)
+		{
+		  insn = bfd_get_16 (abfd, loc);
+		  oinsn = insn;
+		  insn += add / 2;
+		  if ((oinsn & 0xff00) != (insn & 0xff00))
+		    overflow = TRUE;
+		}
+
+	      break;
+	    }
+
+	}
+    }
+
+	  if (overflow)
+	    {
+	      return TRUE;
+	    }
+
   /* Swap the instructions themselves.  */
   i1 = bfd_get_16 (abfd, contents + addr);
   i2 = bfd_get_16 (abfd, contents + addr + 2);
@@ -1474,9 +2271,9 @@ sh_elf_swap_insns (bfd *abfd, asection *sec, void
 
 	  off = irel->r_offset + 4 + irel->r_addend;
 	  if (off == addr)
-	    irel->r_offset += 2;
+	    irel->r_addend += 2;
 	  else if (off == addr + 2)
-	    irel->r_offset -= 2;
+	    irel->r_addend -= 2;
 	}
 
       if (irel->r_offset == addr)
@@ -1495,8 +2292,7 @@ sh_elf_swap_insns (bfd *abfd, asection *sec, void
       if (add != 0)
 	{
 	  bfd_byte *loc;
-	  unsigned short insn, oinsn;
-	  bfd_boolean overflow;
+	  unsigned short insn;
 
 	  loc = contents + irel->r_offset;
 	  overflow = FALSE;
@@ -1506,21 +2302,20 @@ sh_elf_swap_insns (bfd *abfd, asection *sec, void
 	      break;
 
 	    case R_SH_DIR8WPN:
+	      insn = bfd_get_16 (abfd, loc);
+	      insn += add / 2;
+	      bfd_put_16 (abfd, (bfd_vma) insn, loc);
+	      break;
+
 	    case R_SH_DIR8WPZ:
 	      insn = bfd_get_16 (abfd, loc);
-	      oinsn = insn;
 	      insn += add / 2;
-	      if ((oinsn & 0xff00) != (insn & 0xff00))
-		overflow = TRUE;
 	      bfd_put_16 (abfd, (bfd_vma) insn, loc);
 	      break;
 
 	    case R_SH_IND12W:
 	      insn = bfd_get_16 (abfd, loc);
-	      oinsn = insn;
 	      insn += add / 2;
-	      if ((oinsn & 0xf000) != (insn & 0xf000))
-		overflow = TRUE;
 	      bfd_put_16 (abfd, (bfd_vma) insn, loc);
 	      break;
 
@@ -1534,24 +2329,12 @@ sh_elf_swap_insns (bfd *abfd, asection *sec, void
 	      if ((addr & 3) != 0)
 		{
 		  insn = bfd_get_16 (abfd, loc);
-		  oinsn = insn;
 		  insn += add / 2;
-		  if ((oinsn & 0xff00) != (insn & 0xff00))
-		    overflow = TRUE;
 		  bfd_put_16 (abfd, (bfd_vma) insn, loc);
 		}
 
 	      break;
 	    }
-
-	  if (overflow)
-	    {
-	      ((*_bfd_error_handler)
-	       (_("%B: 0x%lx: fatal: reloc overflow while relaxing"),
-		abfd, (unsigned long) irel->r_offset));
-	      bfd_set_error (bfd_error_bad_value);
-	      return FALSE;
-	    }
 	}
     }
 
@@ -1602,6 +2385,8 @@ struct elf_sh_plt_info
   const struct elf_sh_plt_info *short_plt;
 };
 
+int sh_hw_wa;
+
 #ifdef INCLUDE_SHMEDIA
 
 /* The size in bytes of an entry in the procedure linkage table.  */
@@ -1812,13 +2597,14 @@ install_plt_field (bfd *output_bfd, bfd_boolean co
 
 /* Return the type of PLT associated with ABFD.  PIC_P is true if
    the object is position-independent.  */
-
 static const struct elf_sh_plt_info *
 get_plt_info (bfd *abfd ATTRIBUTE_UNUSED, bfd_boolean pic_p)
 {
   return &elf_sh_plts[pic_p][!bfd_big_endian (abfd)];
 }
+
 #else
+
 /* The size in bytes of an entry in the procedure linkage table.  */
 
 #define ELF_PLT_ENTRY_SIZE 28
@@ -1857,7 +2643,7 @@ static const bfd_byte elf_sh_plt0_entry_le[ELF_PLT
   0x03, 0xd0,	/* mov.l 1f,r0 */
   0x02, 0x60,	/* mov.l @r0,r0 */
   0x2b, 0x40,	/* jmp @r0 */
-  0xf6, 0x60,	/*  mov.l @r15+,r0 */
+  0xf6, 0x60,	/* mov.l @r15+,r0 */
   0x09, 0x00,	/* nop */
   0x09, 0x00,	/* nop */
   0x09, 0x00,	/* nop */
@@ -1983,6 +2769,83 @@ static const struct elf_sh_plt_info elf_sh_plts[2]
   }
 };
 
+#define ELF_WA_ENTRY_SIZE 32
+
+static const bfd_byte elf_wa_plt0_entry_le[ELF_WA_ENTRY_SIZE] =
+{
+  0x05, 0xd0,	/* mov.l 2f,r0 */
+  0x02, 0x60,	/* mov.l @r0,r0 */
+  0x06, 0x2f,	/* mov.l r0,@-r15 */
+  0x03, 0xd0,	/* mov.l 1f,r0 */
+  0x02, 0x60,	/* mov.l @r0,r0 */
+  0x2b, 0x40,	/* jmp @r0 */
+  0xf6, 0x60,	/* mov.l @r15+,r0 */
+  0x09, 0x00,	/* nop */
+  0x09, 0x00,	/* nop */
+  0x09, 0x00,	/* nop */
+  0, 0, 0, 0,	/* 1: replaced with address of .got.plt + 8.  */
+  0, 0, 0, 0,	/* 2: replaced with address of .got.plt + 4.  */
+};
+
+/* Sebsequent entries in an absolute procedure linkage table look like
+   this.  */
+
+static const bfd_byte elf_wa_plt_entry_le[ELF_WA_ENTRY_SIZE] =
+{
+  0x04, 0xd0,	/* mov.l 1f,r0 */
+  0x02, 0x60,	/* mov.l @r0,r0 */
+  0x02, 0xd1,	/* mov.l 0f,r1 */
+  0x2b, 0x40,   /* jmp @r0 */
+  0x13, 0x60,	/*  mov r1,r0 */
+  0x03, 0xd1,	/* mov.l 2f,r1 */
+  0x2b, 0x40,	/* jmp @r0 */
+  0x09, 0x00,	/*  nop */
+  0, 0, 0, 0,	/* 0: replaced with address of .PLT0.  */
+  0, 0, 0, 0,	/* 1: replaced with address of this symbol in .got.  */
+  0, 0, 0, 0,	/* 2: replaced with offset into relocation table.  */
+};
+
+/* Entries in a PIC procedure linkage table look like this.  */
+
+static const bfd_byte elf_wa_pic_plt_entry_le[ELF_WA_ENTRY_SIZE] =
+{
+  0x04, 0xd0,	/* mov.l 1f,r0 */
+  0xce, 0x00,	/* mov.l @(r0,r12),r0 */
+  0x2b, 0x40,	/* jmp @r0 */
+  0x09, 0x00,	/*  nop */
+  0xc2, 0x50,	/* mov.l @(8,r12),r0 */
+  0x03, 0xd1,	/* mov.l 2f,r1 */
+  0x2b, 0x40,	/* jmp @r0 */
+  0xc1, 0x50,	/*  mov.l @(4,r12),r0 */
+  0x09, 0x00,	/*  nop */
+  0x09, 0x00,	/* nop */
+  0, 0, 0, 0,	/* 1: replaced with address of this symbol in .got.  */
+  0, 0, 0, 0    /* 2: replaced with offset into relocation table.  */
+};
+
+static const struct elf_sh_plt_info elf_wa_plts[2] = {
+    {
+      /* Little-endian non-PIC.  */
+      elf_wa_plt0_entry_le,
+      ELF_WA_ENTRY_SIZE,
+      { MINUS_ONE, 24, 20 },
+      elf_wa_plt_entry_le,
+      ELF_WA_ENTRY_SIZE,
+      { 20, 16, 24, FALSE },
+      8, FALSE
+    },
+    {
+      /* Little-endian PIC.  */
+      elf_wa_plt0_entry_le,
+      ELF_WA_ENTRY_SIZE,
+      { MINUS_ONE, MINUS_ONE, MINUS_ONE },
+      elf_wa_pic_plt_entry_le,
+      ELF_WA_ENTRY_SIZE,
+      { 20, MINUS_ONE, 24, FALSE },
+      8, FALSE
+    },
+};
+
 #define VXWORKS_PLT_HEADER_SIZE 12
 #define VXWORKS_PLT_ENTRY_SIZE 24
 
@@ -2273,6 +3136,8 @@ static const struct elf_sh_plt_info fdpic_sh2a_plt
 static const struct elf_sh_plt_info *
 get_plt_info (bfd *abfd, bfd_boolean pic_p)
 {
+  if (sh_hw_wa)
+    return &elf_wa_plts[pic_p];
   if (fdpic_object_p (abfd))
     {
       /* If any input file requires SH2A we can use a shorter PLT
@@ -2700,7 +3565,7 @@ sh_elf_create_dynamic_sections (bfd *abfd, struct
   s = bfd_make_section_anyway_with_flags (abfd, ".plt", pltflags);
   htab->splt = s;
   if (s == NULL
-      || ! bfd_set_section_alignment (abfd, s, bed->plt_alignment))
+      || ! bfd_set_section_alignment (abfd, s, sh_hw_wa ? 5 : bed->plt_alignment))
     return FALSE;
 
   if (bed->want_plt_sym)
@@ -3951,9 +4816,39 @@ sh_elf_relocate_section (bfd *output_bfd, struct b
 
       r_type = ELF32_R_TYPE (rel->r_info);
 
+      /* Handle L1-L2 in a relaxation context.  */
+      if (r_type == (int) R_SH_SWITCH32
+	  || r_type == (int) R_SH_SWITCH16
+	  || r_type == (int) R_SH_SWITCH8)
+	{
+	  int reloc_found = 0;
+	  Elf_Internal_Rela * nrel = rel+1;
+
+	  if (ELF32_R_TYPE (nrel->r_info) == (int) R_SH_SYM_DIFF
+	      && nrel->r_offset == rel->r_offset)
+	    reloc_found = 1;
+	  else
+	    continue;
+
+	  if (reloc_found)
+	    {
+	      bfd_vma stop, start;
+	      bfd_signed_vma diff;
+
+	      stop = get_elf_r_symndx_value(input_bfd, ELF32_R_SYM(nrel->r_info)) + nrel->r_addend;
+	      start =  get_elf_r_symndx_value(input_bfd, ELF32_R_SYM(rel->r_info));
+	      diff = (bfd_signed_vma)(stop - start);
+
+	      if (ELF32_R_TYPE (rel->r_info) == (int) R_SH_SWITCH32)
+		bfd_put_signed_32 (input_bfd, (bfd_vma) diff,
+				   contents + rel->r_offset);
+	    }
+	  continue;
+	}
+
       /* Many of the relocs are only used for relaxing, and are
 	 handled entirely by the relaxation code.  */
-      if (r_type >= (int) R_SH_GNU_VTINHERIT
+      if (r_type >= (int) R_SH_SYM_DIFF
 	  && r_type <= (int) R_SH_LABEL)
 	continue;
       if (r_type == (int) R_SH_NONE)
@@ -4003,6 +4898,7 @@ sh_elf_relocate_section (bfd *output_bfd, struct b
 	  relocation = (sec->output_section->vma
 			+ sec->output_offset
 			+ sym->st_value);
+
 	  /* A local symbol never has STO_SH5_ISA32, so we don't need
 	     datalabel processing here.  Make sure this does not change
 	     without notice.  */
@@ -4232,6 +5128,9 @@ sh_elf_relocate_section (bfd *output_bfd, struct b
 	  break;
 
 	case R_SH_IND12W:
+	  debug(4, "[final_link_relocate] rel={%lx,%lx} relocation=%x addend=%x\n", 
+	  	(unsigned long) rel->r_offset, (unsigned long) rel->r_addend,
+		(unsigned int) relocation, (unsigned int) addend);
 	  goto final_link_relocate;
 
 	case R_SH_DIR8WPN:
@@ -4245,10 +5144,6 @@ sh_elf_relocate_section (bfd *output_bfd, struct b
 	  if (input_section->output_section->vma + input_section->output_offset
 	      != relocation)
 	    {
-	      int disp = (relocation
-			  - input_section->output_section->vma
-			  - input_section->output_offset
-			  - rel->r_offset);
 	      int mask = 0;
 	      switch (r_type)
 		{
@@ -4257,7 +5152,7 @@ sh_elf_relocate_section (bfd *output_bfd, struct b
 		case R_SH_DIR8WPL: mask = 3; break;
 		default: mask = 0; break;
 		}
-	      if (disp & mask)
+	      if (relocation & mask)
 		{
 		  ((*_bfd_error_handler)
 		   (_("%B: 0x%lx: fatal: unaligned branch target for relax-support relocation"),
@@ -4266,7 +5161,7 @@ sh_elf_relocate_section (bfd *output_bfd, struct b
 		  bfd_set_error (bfd_error_bad_value);
 		  return FALSE;
 		}
-	      relocation -= 4;
+	      if (!((input_section->output_offset + rel->r_offset) & mask)) relocation -= 4;
 	      goto final_link_relocate;
 	    }
 	  r = bfd_reloc_ok;
@@ -5729,6 +6624,24 @@ sh_elf_gc_mark_hook (asection *sec,
 	return NULL;
       }
 
+  /* Handle here the SH composed relocation R_SH_SWITCH32 + R_SH_SYM_DIFF  
+     that appear in relax mode. It represents a diff between 2 symbols:
+        .word L2-L1
+     R_SH_SWITCH32 handles symbol L1, and R_SH_SYM_DIFF handles symbol L2.
+     In garbage collector algorithm, we want to follow the section pointed 
+     by L2 symb. So we ignore R_SH_SWITCH32, and handles R_SH_SYM_DIFF 
+     normally.
+  */
+  switch (ELF32_R_TYPE (rel->r_info))
+    {
+    case R_SH_SWITCH32:
+      /* Don't look at R_SH_SWITCH32 if it is followed by a R_SH_SYM_DIFF 
+	 at the same address */
+      if (ELF32_R_TYPE((rel+1)->r_info) == R_SH_SYM_DIFF
+          && rel->r_offset == (rel+1)->r_offset)
+	return NULL;
+    }
+
   return _bfd_elf_gc_mark_hook (sec, info, rel, h, sym);
 }
 
@@ -5800,9 +6713,7 @@ sh_elf_gc_sweep_hook (bfd *abfd, struct bfd_link_i
 
 	case R_SH_GOT32:
 	case R_SH_GOT20:
-	case R_SH_GOTOFF:
 	case R_SH_GOTOFF20:
-	case R_SH_GOTPC:
 #ifdef INCLUDE_SHMEDIA
 	case R_SH_GOT_LOW16:
 	case R_SH_GOT_MEDLOW16:
@@ -6666,12 +7577,12 @@ sh_elf_set_private_flags (bfd *abfd, flagword flag
 static bfd_boolean
 sh_elf_copy_private_data (bfd * ibfd, bfd * obfd)
 {
+  if (! is_sh_elf (ibfd) || ! is_sh_elf (obfd))
+    return TRUE;
+
   /* Copy object attributes.  */
   _bfd_elf_copy_obj_attributes (ibfd, obfd);
 
-  if (! is_sh_elf (ibfd) || ! is_sh_elf (obfd))
-    return TRUE;
-
   /* Copy the stack size.  */
   if (elf_tdata (ibfd)->phdr && elf_tdata (obfd)->phdr
       && fdpic_object_p (ibfd) && fdpic_object_p (obfd))
Index: binutils/bfd/coff-sh.c
===================================================================
--- binutils.orig/bfd/coff-sh.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/coff-sh.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -5,6 +5,7 @@
    Contributed by Cygnus Support.
    Written by Steve Chamberlain, <sac@cygnus.com>.
    Relaxing code written by Ian Lance Taylor, <ian@cygnus.com>.
+   Copyright (c) 2009  STMicroelectronics.
 
    This file is part of BFD, the Binary File Descriptor library.
 
@@ -1707,7 +1708,7 @@ static const struct sh_opcode sh_opcode30[] =
   { 0x3000, SETSSP | USES1 | USES2 },		/* cmp/eq rm,rn */
   { 0x3002, SETSSP | USES1 | USES2 },		/* cmp/hs rm,rn */
   { 0x3003, SETSSP | USES1 | USES2 },		/* cmp/ge rm,rn */
-  { 0x3004, SETSSP | USESSP | USES1 | USES2 },	/* div1 rm,rn */
+  { 0x3004, SETS1 | SETSSP | USESSP | USES1 | USES2 },	/* div1 rm,rn */
   { 0x3005, SETSSP | USES1 | USES2 },		/* dmulu.l rm,rn */
   { 0x3006, SETSSP | USES1 | USES2 },		/* cmp/hi rm,rn */
   { 0x3007, SETSSP | USES1 | USES2 },		/* cmp/gt rm,rn */
Index: binutils/bfd/elflink.c
===================================================================
--- binutils.orig/bfd/elflink.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/elflink.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -9118,13 +9118,19 @@ elf_section_ignore_discarded_relocs (asection *sec
 unsigned int
 _bfd_elf_default_action_discarded (asection *sec)
 {
+  int prefix_size;
+
   if (sec->flags & SEC_DEBUGGING)
     return PRETEND;
 
   if (strcmp (".eh_frame", sec->name) == 0)
     return 0;
 
-  if (strcmp (".gcc_except_table", sec->name) == 0)
+  /* If -ffunction-sections is enable, the exception table section could
+     be named .gcc_except_table.*, therefore, we have to check if
+     ".gcc_except_table" is a prefix of the section's name.  */
+  prefix_size = strlen(".gcc_except_table");
+  if (strncmp (".gcc_except_table", sec->name, prefix_size) == 0)
     return 0;
 
   return COMPLAIN | PRETEND;
Index: binutils/bfd/ChangeLog.st40
===================================================================
--- binutils.orig/bfd/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/bfd/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,169 @@
+2013-06-19  Laurent Alfonsi  <laurent.alfonsi@st.com>
+
+	* elf32-sh.c: Handle addend on SYM_DIFF relocs.
+	(sh_elf_relax_check_overflow): Likewise
+	(sh_elf_relax_delete_bytes): Likewise
+	(sh_elf_relocate_section): Likewise
+
+2012-10-11  Laurent Alfonsi  <laurent.alfonsi@st.com>
+
+	* linker.c (bfd_is_symbol_to_wrap): Added.
+
+2012-04-20  Laurent Alfonsi  <laurent.alfonsi@st.com>
+
+	* elf32-sh.c (sh_elf_gc_mark_hook): Handle SH specific 
+	composed relocation.
+	* elf-eh-frame.c (_bfd_elf_parse_eh_frame): Likewise
+
+2012-02-06  Laurent Alfonsi  <laurent.alfonsi@st.com>
+
+	* elf32-sh.c : Various relaxation fixes
+	(sh_elf_relax_init): Add relax init function
+	(sh_elf_relax_section): Relaxation fixes + add debug traces
+	(sh_elf_relax_check_overflow): Likewise
+	(sh_elf_relax_delete_bytes): Likewise
+
+2011-07-12  Christian Bruel  <christian.bruel@st.com>
+
+	INSbl31164
+	* elflink.c (_bfd_elf_merge_symbol): Check NULL pointer.
+
+2011-05-09  Christian Bruel  <christian.bruel@st.com>
+
+	* elf32-sh.c (sh_wa_plts): Initialize got20
+
+2010-07-11  Christian Bruel  <christian.bruel@st.com>
+
+	* elf32-sh.c (sh_elf_gc_sweep_hook): don't dec refcount for R_SH_GOTOFF
+	and R_SH_GOTPC.
+
+2009-11-13  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_check_overflow): Restrict ranges.
+
+2009-10-26  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_section): Fix instruction swapping.
+	(sh_elf_get_global_sym_output_value_from_reloc): Cleanup.
+	(sh_elf_relax_check_overflow): Likewise.
+
+2009-10-09  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_delete_bytes): Fix R_SH_SWITCHxx relocations
+	update.
+
+2009-10-01  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_check_overflow): Fix range calculation.
+	(sh_elf_relax_delete_bytes): Likewise.
+
+2009-09-25  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_check_overflow): Fix range calculation.
+	(sh_elf_relax_delete_bytes): Likewise.
+
+2009-09-23  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_delete_bytes): Remove warnings.
+
+2009-09-22  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_check_overflow): Fix range calculation.
+
+2009-09-18  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_check_overflow): Fix R_SH_SYM_DIFF use.
+	(sh_elf_relax_delete_bytes): Likewise.
+
+2009-09-15  Yvan Roux  <yvan.roux@st.com>
+
+	* reloc.c (BFD_RELOC_SH_SYM_DIFF): Define.
+	* elf32-sh-relocs.h:  Add HOWTO entry for R_SH_SYM_DIFF.
+	* elf32-sh.c (sh_reloc_map) : Add R_SH_SYM_DIFF.
+	(sh_elf_relax_check_overflow): Handle R_SH_SYM_DIFF.
+	(sh_elf_relax_delete_bytes): Likewise.
+	(sh_elf_relocate_section): Likewise.
+	* bfd-in2.h: Regenerate.
+	* libbfd.h: Regenrate.
+
+2009-09-03  Yvan Roux  <yvan.roux@st.com>
+
+	* elflink.c (_bfd_elf_default_action_discarded): Handle suffixed
+	* elf32-sh.c (sh_elf_relax_check_overflow): Fix overflow checking.
+
+2009-07-07  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_relaxed_section_info): Defined.
+	(sec_sred): Likewise.
+	(sh_elf_get_global_sym_output_value_from_reloc): New function.
+	(sh_elf_relax_check_overflow): New function.
+	(sh_elf_relax_delete_bytes): Fix overflow checking.
+	(sh_elf_relax_section): Likewise.
+
+2009-06-12  Antony King  <antony.king@st.com>
+
+	* elf32-sh.c (sh_elf_copy_private_data): Fix is_sh_elf check.
+
+2009-06-08  Christian Bruel  <christian.bruel@st.com>
+
+	* elf32-sh.c (sh_elf_relax_section): Don't realign loads for SH4s.
+
+2009-05-15  Christian Bruel  <christian.bruel@st.com>
+	    Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_section): Fix section to compute local
+	symbol's address.
+	* elf-eh-frame.c (_bfd_elf_parse_eh_frame): Remove warning.
+	(_bfd_elf_discard_section_eh_frame): Likewise.
+
+2009-05-12  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_delete_bytes): Fix relaxation.
+
+2009-05-11  Christian Bruel  <christian.bruel@st.com>
+
+	INSbl30143
+	* elf32-sh.c (sh_elf_relax_section): Removed check for locals in
+	differents sections.
+
+2009-04-06  Christian Bruel  <christian.bruel@st.com>
+
+	* coff-sh.c (sh_opcode30): Fix div1 description.
+
+2009-04-15  Christian Bruel  <christian.bruel@st.com>
+
+	* elf32-sh.c (get_plt_info): Setup elf_wa_plts.
+	(elf_wa_plts, elf_wa_plt0_entry_le) Defined:
+	(elf_wa_pic_plt_entry_le, elf_wa_plt_entry_le): Likewise.
+
+2008-11-12  Yvan Roux  <yvan.roux@st.com>
+
+	* elf32-sh.c (sh_elf_relax_section): Fix relaxation.
+	(sh_elf_relax_delete_bytes): Likewise.
+	(sh_elf_swap_insns): Likewise.
+	(sh_elf_relocate_section): Likewise.
+
+2008-03-04  Antony King  <antony.king@st.com>
+
+	elf.c (swap_out_syms): Fix GCC 3.2 compilation failure.
+
+2007-09-14  Antony King  <antony.king@st.com>
+
+	Fix INSbl27871:
+	* config.bfd: Add sh*-superh-elf* target.
+
+2006-03-01  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* archures.c (bfd_mach_st40_300, bfd_mach_st40_300_nofpu): Define.
+	(bfd_mach_st40_300_nofpu_or_sh2a_nofpu): Likewise.
+	(bfd_mach_st40_300_nofpu_or_sh4a_nofpu): Likewise.
+	(bfd_mach_st40_300_or_sh4a): Likewise.
+	* bfd-in2.h: Regenerate.
+	* cpu-sh.c (ST40_300_NOFPU_OR_SH2A_NOFPU_NEXT): Define.
+	(ST40_300_NOFPU_OR_SH4A_NOFPU_NEXT): Likewise.
+	(ST40_300_NOFPU_NEXT, ST40_300_OR_SH4A_NEXT): Likewise.
+	(ST40_300_NEXT): Likewise.
+	(arch_info_struct): Add st40-300-nofpu-or-sh2a-nofpu,
+	st40-300-nofpu-or-sh4a-nofpu, st40-300-nofpu, st40-300-or-sh4a,
+	and st40-300.
+	(bfd_to_arch_table): Likewise.
Index: binutils/bfd/bfd-in2.h
===================================================================
--- binutils.orig/bfd/bfd-in2.h	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/bfd-in2.h	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -2019,6 +2019,11 @@ enum bfd_architecture
 #define bfd_mach_sh4        0x40
 #define bfd_mach_sh4_nofpu  0x41
 #define bfd_mach_sh4_nommu_nofpu  0x42
+#define bfd_mach_st40_300   0x430
+#define bfd_mach_st40_300_nofpu 0x431
+#define bfd_mach_st40_300_nofpu_or_sh2a_nofpu 0x432
+#define bfd_mach_st40_300_nofpu_or_sh4a_nofpu 0x433
+#define bfd_mach_st40_300_or_sh4a 0x434
 #define bfd_mach_sh4a       0x4a
 #define bfd_mach_sh4a_nofpu 0x4b
 #define bfd_mach_sh4al_dsp  0x4d
@@ -3400,6 +3405,7 @@ pc-relative or some form of GOT-indirect relocatio
   BFD_RELOC_SH_IMM8BY4,
   BFD_RELOC_SH_PCRELIMM8BY2,
   BFD_RELOC_SH_PCRELIMM8BY4,
+  BFD_RELOC_SH_SYM_DIFF,
   BFD_RELOC_SH_SWITCH16,
   BFD_RELOC_SH_SWITCH32,
   BFD_RELOC_SH_USES,
Index: binutils/bfd/reloc.c
===================================================================
--- binutils.orig/bfd/reloc.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/reloc.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -3296,6 +3296,8 @@ ENUMX
 ENUMX
   BFD_RELOC_SH_PCRELIMM8BY4
 ENUMX
+  BFD_RELOC_SH_SYM_DIFF
+ENUMX
   BFD_RELOC_SH_SWITCH16
 ENUMX
   BFD_RELOC_SH_SWITCH32
Index: binutils/bfd/libbfd.h
===================================================================
--- binutils.orig/bfd/libbfd.h	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/bfd/libbfd.h	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1554,6 +1554,7 @@ static const char *const bfd_reloc_code_real_names
   "BFD_RELOC_SH_IMM8BY4",
   "BFD_RELOC_SH_PCRELIMM8BY2",
   "BFD_RELOC_SH_PCRELIMM8BY4",
+  "BFD_RELOC_SH_SYM_DIFF",
   "BFD_RELOC_SH_SWITCH16",
   "BFD_RELOC_SH_SWITCH32",
   "BFD_RELOC_SH_USES",
Index: binutils/opcodes/ChangeLog.st40
===================================================================
--- binutils.orig/opcodes/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/opcodes/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,30 @@
+2006-03-31  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* sh-dis.c (print_insn_sh): Handle A_R1, A_R2 and A_R3 arg types.
+
+2006-03-01  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	* sh-opc.h (sh_arg_type): Add A_R1, A_R2 and A_R3.
+	(arch_st40_300_base, arch_st40_300_base): Define.
+	(arch_st40_300_sh2a_base): Likewise.
+	(arch_sh_base_mask): Extend the mask over the new defined bits.
+	(arch_st40_300, arch_st40_300_or_sh4a): Define.
+	(arch_st40_300_nofpu, arch_st40_300_nofpu_or_sh4a_nofpu): Likewise.
+	(arch_st40_300_nofpu_or_sh2a_nofpu): Likewise.
+	(diagram): Add ST40-300 architectures.
+	(arch_sh2a_nofpu_or_sh4_nommu_nofpu_up): Insert
+	arch_st40_300_nofpu_or_sh2a_nofpu_up. Remove arch_sh2a_nofpu_up.
+	(arch_st40_300_nofpu_or_sh2a_nofpu_up): Define.
+	(arch_sh4_nofpu_up): Add arch_st40_300_nofpu_or_sh4a_nofpu_up.
+	Remove arch_sh4a_nofpu_up.
+	(arch_st40_300_nofpu_or_sh4a_nofpu_up): Define.
+	(arch_st40_300_nofpu_up): Define.
+	(arch_sh4_up): Add arch_st40_300_or_sh4a_up.
+	Remove arch_sh4a_up.
+	(arch_st40_300_or_sh4a_up): Define.
+	(arch_st40_300_up): Define.
+	(icbi): Change to arch_st40_300_nofpu_or_sh4a_nofpu_up.
+	(synco): Change to arch_st40_300_nofpu_or_sh4a_nofpu_up.
+	(fpchg): Change to arch_st40_300_or_sh4a_up.
+	(mulr R0): Change to arch_st40_300_nofpu_or_sh2a_nofpu_up.
+	(mulr R1, mulr R2, mulr R3): Add.
Index: binutils/opcodes/sh-dis.c
===================================================================
--- binutils.orig/opcodes/sh-dis.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/opcodes/sh-dis.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,7 @@
 /* Disassemble SH instructions.
    Copyright 1993, 1994, 1995, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005,
    2006, 2007, 2012  Free Software Foundation, Inc.
+   Copyright (c) 2006  STMicroelectronics.
 
    This file is part of the GNU opcodes library.
 
@@ -693,6 +694,15 @@ print_insn_sh (bfd_vma memaddr, struct disassemble
 	    case A_R0:
 	      fprintf_fn (stream, "r0");
 	      break;
+	    case A_R1:
+	      fprintf_fn (stream, "r1");
+	      break;
+	    case A_R2:
+	      fprintf_fn (stream, "r2");
+	      break;
+	    case A_R3:
+	      fprintf_fn (stream, "r3");
+	      break;
 	    case A_REG_N:
 	      fprintf_fn (stream, "r%d", rn);
 	      break;
Index: binutils/opcodes/sh-opc.h
===================================================================
--- binutils.orig/opcodes/sh-opc.h	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/opcodes/sh-opc.h	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,7 @@
 /* Definitions for SH opcodes.
    Copyright 1993, 1994, 1995, 1997, 1999, 2000, 2001, 2002, 2003, 2004,
    2005, 2007 Free Software Foundation, Inc.
+   Copyright (c) 2006  STMicroelectronics.
 
    This file is part of the GNU opcodes library.
 
@@ -121,6 +122,12 @@ typedef enum
     A_MACL,
     A_PR,
     A_R0,
+ /* For use of the ST40-300 EXPERIMENTAL mulr instructions.
+    Not for submission to the netsources.  */
+    A_R1,
+    A_R2,
+    A_R3,
+ /* End of experimental.  */
     A_R0_GBR,
     A_REG_M,
     A_REG_N,
@@ -215,7 +222,10 @@ sh_dsp_reg_nums;
 #define arch_sh4_base	    (1 << 5)
 #define arch_sh4a_base	    (1 << 6)
 #define arch_sh2a_base      (1 << 7)
-#define arch_sh_base_mask   MASK (0, 7)
+#define arch_st40_300_base  (1 << 8)
+#define arch_sh4a_st40_300_base (1 << 9)
+#define arch_st40_300_sh2a_base (1 << 10)
+#define arch_sh_base_mask   MASK (0, 10)
 
 /* Bits 8 ... 24 are currently free.  */
 
@@ -255,6 +265,11 @@ sh_dsp_reg_nums;
 #define arch_sh2a_nofpu_or_sh3_nommu       (arch_sh2a_sh3_base|arch_sh_no_mmu |arch_sh_no_co)
 #define arch_sh2a_or_sh3e                  (arch_sh2a_sh4_base|arch_sh_no_mmu |arch_sh_sp_fpu)
 #define arch_sh2a_or_sh4                   (arch_sh2a_sh4_base|arch_sh_no_mmu |arch_sh_dp_fpu)
+#define arch_st40_300                      (arch_st40_300_base|arch_sh_has_mmu|arch_sh_dp_fpu)
+#define arch_st40_300_or_sh4a              (arch_sh4a_st40_300_base|arch_sh_has_mmu|arch_sh_dp_fpu)
+#define arch_st40_300_nofpu                (arch_st40_300_base|arch_sh_has_mmu|arch_sh_no_co)
+#define arch_st40_300_nofpu_or_sh4a_nofpu  (arch_sh4a_st40_300_base|arch_sh_has_mmu|arch_sh_no_co)
+#define arch_st40_300_nofpu_or_sh2a_nofpu  (arch_st40_300_sh2a_base|arch_sh_no_mmu |arch_sh_no_co)
 
 #define SH_MERGE_ARCH_SET(SET1, SET2) ((SET1) & (SET2))
 #define SH_VALID_BASE_ARCH_SET(SET) (((SET) & arch_sh_base_mask) != 0)
@@ -296,22 +311,32 @@ SH-DSP          SH3-nommu/SH2A-nofpu
  |               |          |`--------------------. |
  |               |          |                      \|
  |              SH3-nommu  SH4-nm-nf/SH2A-nofpu    SH3E/SH2A
- |               |\         |          |      \     |    |
- |               | `------. |     SH2A-nofpu   `----+---.|
- |               |         \|            \          |   SH4/SH2A
- |              SH3     SH4-nommu-nofpu   `---------+--. |   |
- |              /|\         |                       |   \|   |
- | .-----------' | `--------+---------------------. |  SH2A  |
- |/              |          /                      \|        |
- |               | .-------'                        |        |
- |               |/                                 |        |
-SH3-dsp         SH4-nofpu                          SH3E      |
- |               |`-------------------------------. | .-----'
- |               |                                 \|/
- |              SH4A-nofpu                         SH4
- | .------------' `-------------------------------. |
- |/                                                \|
-SH4AL-dsp                                          SH4A
+ |               |\         |          |    `-----. |    |
+ |               | \        | ST40-300-nf/SH2A-nf | |    |
+ |               |  \       |     |       |       `-+--. |
+ |               |   `----. |     |      SH2A-nofpu |   \|
+ |               |         \|     `----.   \        |   SH4/SH2A
+ |              SH3  SH4-nommu-nofpu    \   `-------+--. |   |
+ |              /|\         |            \          |   \|   |
+ | .-----------' | `--------+-------------+-------. |  SH2A  |
+ |/              |          |             |        \|        |
+ |               | .--------'             |         |        |
+ |               |/                       |         |        |
+SH3-dsp         SH4-nofpu                 |        SH3E      |
+ |               |`-----------------------+-------. | .------'
+ |               |                        |        \|/
+ |               |                        |        SH4
+ |              SH4A-nofpu/ST40-300-nofpu |         | 
+ |               |`.        | .-----------'         |
+ |               | |        |/                      |
+ |               | |       ST40-300-nofpu           |
+ |               | |        `-----------------------+------------.
+ |               | `------------------------------. |            |
+ |               |                                 \|            |
+ |              SH4A-nofpu                         SH4A/ST40-300 |
+ | .------------' `-------------------------------. |    | .-----'
+ |/                                                \|    |/
+SH4AL-dsp                                          SH4A ST40-300
 */
 
 /* Central branches.  */
@@ -326,9 +351,12 @@ SH-DSP          SH3-nommu/SH2A-nofpu
 		| arch_sh2a_or_sh3e_up \
 		| arch_sh3_nommu_up)
 #define arch_sh2a_nofpu_or_sh4_nommu_nofpu_up  (arch_sh2a_nofpu_or_sh4_nommu_nofpu \
-		| arch_sh2a_nofpu_up \
+		| arch_st40_300_nofpu_or_sh2a_nofpu_up \
 		| arch_sh2a_or_sh4_up \
 		| arch_sh4_nommu_nofpu_up)
+#define arch_st40_300_nofpu_or_sh2a_nofpu_up   (arch_st40_300_nofpu_or_sh2a_nofpu \
+		| arch_sh2a_nofpu_up \
+		| arch_st40_300_nofpu_up)
 #define arch_sh2a_nofpu_up                     (arch_sh2a_nofpu \
 		| arch_sh2a_up)
 #define arch_sh3_nommu_up                      (arch_sh3_nommu \
@@ -342,7 +370,13 @@ SH-DSP          SH3-nommu/SH2A-nofpu
 		| arch_sh4_nofpu_up)
 #define arch_sh4_nofpu_up                      (arch_sh4_nofpu \
 		| arch_sh4_up \
+		| arch_st40_300_nofpu_or_sh4a_nofpu_up)
+#define arch_st40_300_nofpu_or_sh4a_nofpu_up   (arch_st40_300_nofpu_or_sh4a_nofpu \
+                | arch_st40_300_nofpu_up \
+		| arch_st40_300_or_sh4a_up \
 		| arch_sh4a_nofpu_up)
+#define arch_st40_300_nofpu_up                 (arch_st40_300_nofpu \
+		| arch_st40_300_up)
 #define arch_sh4a_nofpu_up                     (arch_sh4a_nofpu \
 		| arch_sh4a_up \
 		| arch_sh4al_dsp_up)
@@ -360,8 +394,12 @@ SH-DSP          SH3-nommu/SH2A-nofpu
 #define arch_sh3e_up                           (arch_sh3e \
 		| arch_sh4_up)
 #define arch_sh4_up                            (arch_sh4 \
-		| arch_sh4a_up)
+		| arch_st40_300_or_sh4a_up)
+#define arch_st40_300_or_sh4a_up               (arch_st40_300_or_sh4a \
+		| arch_sh4a_up \
+		| arch_st40_300_up)
 #define arch_sh4a_up                           (arch_sh4a)
+#define arch_st40_300_up                       (arch_st40_300)
 
 /* Left branch.  */
 #define arch_sh_dsp_up                         (arch_sh_dsp  \
@@ -452,7 +490,7 @@ const sh_opcode_info sh_table[] =
 
 /* 0110nnnnmmmm1101 extu.w <REG_M>,<REG_N>*/{"extu.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_D}, arch_sh_up},
 
-/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_sh4a_nofpu_up},
+/* 0000nnnn11100011 icbi @<REG_N>       */{"icbi",{A_IND_N},{HEX_0,REG_N,HEX_E,HEX_3}, arch_st40_300_nofpu_or_sh4a_nofpu_up},
 
 /* 0100nnnn00101011 jmp @<REG_N>        */{"jmp",{A_IND_N},{HEX_4,REG_N,HEX_2,HEX_B}, arch_sh_up},
 
@@ -840,7 +878,7 @@ const sh_opcode_info sh_table[] =
 
 /* 0110nnnnmmmm1001 swap.w <REG_M>,<REG_N>*/{"swap.w",{ A_REG_M,A_REG_N},{HEX_6,REG_N,REG_M,HEX_9}, arch_sh_up},
 
-/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_sh4a_nofpu_up},
+/* 0000000010101011 synco               */{"synco",{0},{HEX_0,HEX_0,HEX_A,HEX_B}, arch_st40_300_nofpu_or_sh4a_nofpu_up},
 
 /* 0100nnnn00011011 tas.b @<REG_N>      */{"tas.b",{A_IND_N},{HEX_4,REG_N,HEX_1,HEX_B}, arch_sh_up},
 
@@ -1118,7 +1156,7 @@ const sh_opcode_info sh_table[] =
 /* 1111nnnn01001101 fneg <F_REG_N>     */{"fneg",{F_REG_N},{HEX_F,REG_N,HEX_4,HEX_D}, arch_sh2e_up},
 /* 1111nnn001001101 fneg <D_REG_N>     */{"fneg",{D_REG_N},{HEX_F,REG_N,HEX_4,HEX_D}, arch_sh2a_or_sh4_up},
 
-/* 1111011111111101 fpchg               */{"fpchg",{0},{HEX_F,HEX_7,HEX_F,HEX_D}, arch_sh4a_up},
+/* 1111011111111101 fpchg               */{"fpchg",{0},{HEX_F,HEX_7,HEX_F,HEX_D}, arch_st40_300_or_sh4a_up},
 
 /* 1111101111111101 frchg               */{"frchg",{0},{HEX_F,HEX_B,HEX_F,HEX_D}, arch_sh4_up},
 
@@ -1167,7 +1205,14 @@ const sh_opcode_info sh_table[] =
   /* 0100mmmm11110000 movml.l <REG_M>,@-R15 */ {"movmu.l",{A_REG_M,A_DEC_R15},{HEX_4,REG_M,HEX_F,HEX_0}, arch_sh2a_nofpu_up},
   /* 0100mmmm11110100 movml.l @R15+,<REG_M> */ {"movmu.l",{A_INC_R15,A_REG_M},{HEX_4,REG_M,HEX_F,HEX_4}, arch_sh2a_nofpu_up},
   /* 0000nnnn00111001 movrt <REG_N> */         {"movrt",{A_REG_N},{HEX_0,REG_N,HEX_3,HEX_9}, arch_sh2a_nofpu_up},
-  /* 0100nnnn10000000 mulr R0,<REG_N> */       {"mulr",{A_R0,A_REG_N},{HEX_4,REG_N,HEX_8,HEX_0}, arch_sh2a_nofpu_up},
+  /* 0100nnnn10000000 mulr R0,<REG_N> */       {"mulr",{A_R0,A_REG_N},{HEX_4,REG_N,HEX_8,HEX_0}, arch_st40_300_nofpu_or_sh2a_nofpu_up},
+
+/* Experimental ST40-300 instructions. Not for submission to the netsources.  */
+  /* 0100nnnn10010000 mulr R1,<REG_N> */       {"mulr",{A_R1,A_REG_N},{HEX_4,REG_N,HEX_9,HEX_0}, arch_st40_300_nofpu_up},
+  /* 0100nnnn10100000 mulr R2,<REG_N> */       {"mulr",{A_R2,A_REG_N},{HEX_4,REG_N,HEX_A,HEX_0}, arch_st40_300_nofpu_up},
+  /* 0100nnnn10110000 mulr R3,<REG_N> */       {"mulr",{A_R3,A_REG_N},{HEX_4,REG_N,HEX_B,HEX_0}, arch_st40_300_nofpu_up},
+/* End of experimental.  */
+
   /* 0000000001101000 nott */                  {"nott",{A_END},{HEX_0,HEX_0,HEX_6,HEX_8}, arch_sh2a_nofpu_up},
   /* 0000000001011011 resbank */               {"resbank",{A_END},{HEX_0,HEX_0,HEX_5,HEX_B}, arch_sh2a_nofpu_up},
   /* 0000000001101011 rts/n */                 {"rts/n",{A_END},{HEX_0,HEX_0,HEX_6,HEX_B}, arch_sh2a_nofpu_up},
Index: binutils/config/ChangeLog.st40
===================================================================
--- binutils.orig/config/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/config/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,8 @@
+2010-04-12  Christian Bruel  <christian.bruel@st.com>
+
+	* mh-mingw (LDFLAGS): Remove wrap rename.
+	
+2008-03-13  Antony King  <antony.king@st.com>
+
+	Fix INSbl27323:
+	* mh-mingw (BOOT_CFLAGS): Replace with CFLAGS.
Index: binutils/config/mh-mingw
===================================================================
--- binutils.orig/config/mh-mingw	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/config/mh-mingw	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -6,3 +6,7 @@ CFLAGS += -D__USE_MINGW_ACCESS
 # as GCC turns out to need that much more to pass all the limits-* tests.
 LDFLAGS += -Wl,--stack,12582912
 BOOT_LDFLAGS += -Wl,--stack,12582912
+# Activation of CYGPATH feature: Support for cygwin pathes in mingwin32 shell
+#   through syscall wrapping at linker level
+LDFLAGS += -Wl,--wrap,open,--wrap,creat,--wrap,fopen,--wrap,freopen,--wrap,remove,--wrap,unlink,--wrap,stat,--wrap,chdir,--wrap,rmdir,--wrap,opendir,--wrap,access
+
Index: binutils/gprof/search_list.c
===================================================================
--- binutils.orig/gprof/search_list.c	(.../vendor/tags/binutils-2.23.2)	(revision 3636)
+++ binutils/gprof/search_list.c	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -1,6 +1,7 @@
 /* search-list.c
 
    Copyright 2000, 2001, 2002, 2004, 2007 Free Software Foundation, Inc.
+   Copyright (c) 2006  STMicroelectronics.
 
    This file is part of GNU Binutils.
 
@@ -42,10 +43,26 @@ search_list_append (Search_List *list, const char
       else
 	len = strlen (beg);
 
+#ifndef __MINGW32__
       new_el = (Search_List_Elem *) xmalloc (sizeof (*new_el) + len);
       memcpy (new_el->path, beg, len);
       new_el->path[len] = '\0';
+#else
+      {
+	/* The Search_List_Elem string 'optimisation' makes
+	   calling cygpath a little tricky.  Especially combined
+	   with a source path from the middle of a string.  */
+	char *temp = xmalloc (len+1);
+	memcpy (temp, beg, len);
+	temp[len] = '\0';
+	cygpath_replace (&temp);
 
+	new_el = xmalloc (sizeof (*new_el) + strlen (temp));
+	strcpy (new_el->path, temp);
+	free (temp);
+      }
+#endif
+
       /* Append new path at end of list.  */
       new_el->next = 0;
 
Index: binutils/gprof/ChangeLog.st40
===================================================================
--- binutils.orig/gprof/ChangeLog.st40	(.../vendor/tags/binutils-2.23.2)	(revision 0)
+++ binutils/gprof/ChangeLog.st40	(.../tags/st40-2.23.2-130806)	(revision 3636)
@@ -0,0 +1,10 @@
+2011-07-01  Antony King  <antony.king@st.com>
+
+	Fix INSbl31029:
+	* corefile.c (core_create_function_syms): Check array size before
+	calling bsearch.
+
+2006-03-15  Andrew Stubbs  <andrew.stubbs@st.com>
+
+	Fix INSbl25520:
+	* search_list.c (search_list_append): Convert filenames with CYGPATH.
